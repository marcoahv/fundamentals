"use strict";(self.webpackChunkfundamentals=self.webpackChunkfundamentals||[]).push([[413],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>k});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),m=p(n),c=o,k=m["".concat(s,".").concat(c)]||m[c]||u[c]||i;return n?a.createElement(k,l(l({ref:t},d),{},{components:n})):a.createElement(k,l({ref:t},d))}));function k(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,l=new Array(i);l[0]=c;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r[m]="string"==typeof e?e:o,l[1]=r;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},8347:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>u,frontMatter:()=>i,metadata:()=>r,toc:()=>p});var a=n(7462),o=(n(7294),n(3905));const i={sidebar_position:3},l="React Native",r={unversionedId:"4 React/3 React Native",id:"4 React/3 React Native",title:"React Native",description:"Section 1: Introduction and Setup",source:"@site/docs/4 React/3 React Native.md",sourceDirName:"4 React",slug:"/4 React/3 React Native",permalink:"/fundamentals/4 React/3 React Native",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Next.js 13",permalink:"/fundamentals/4 React/2 NextJs 13"},next:{title:"Typescript in React",permalink:"/fundamentals/4 React/4 Typescript in React"}},s={},p=[{value:"Section 1: Introduction and Setup",id:"section-1-introduction-and-setup",level:2},{value:"<strong>=&gt;</strong> Introduction",id:"-introduction",level:3},{value:"What is React Native?",id:"what-is-react-native",level:4},{value:"Why Learn React Native?",id:"why-learn-react-native",level:4},{value:"Prerequisites for Learning React Native",id:"prerequisites-for-learning-react-native",level:4},{value:"Getting Started",id:"getting-started",level:4},{value:"<strong>=&gt;</strong> Expo vs React Native",id:"-expo-vs-react-native",level:3},{value:"React Native",id:"react-native-1",level:4},{value:"Expo",id:"expo",level:4},{value:"Advantages of Expo",id:"advantages-of-expo",level:4},{value:"Flexibility of Expo",id:"flexibility-of-expo",level:4},{value:"Expo as the Default Choice",id:"expo-as-the-default-choice",level:4},{value:"Conclusion",id:"conclusion",level:4},{value:"<strong>=&gt;</strong> Hello World",id:"-hello-world",level:3},{value:"Setting Up Development Environment",id:"setting-up-development-environment",level:4},{value:"Creating a React Native Project with Expo",id:"creating-a-react-native-project-with-expo",level:4},{value:"Understanding Project Files and Folders",id:"understanding-project-files-and-folders",level:4},{value:"Running the React Native Expo App",id:"running-the-react-native-expo-app",level:4},{value:"<strong>=&gt;</strong> Running the App on a Device",id:"-running-the-app-on-a-device",level:3},{value:"Steps to Run the App on a Real Device",id:"steps-to-run-the-app-on-a-real-device",level:4},{value:"<strong>=&gt;</strong> Running the App on an iOS Simulator",id:"-running-the-app-on-an-ios-simulator",level:3},{value:"Steps to Run the App on an iOS Simulator",id:"steps-to-run-the-app-on-an-ios-simulator",level:4},{value:"<strong>=&gt;</strong> Running the App on an Android Emulator",id:"-running-the-app-on-an-android-emulator",level:3},{value:"Steps to Run the App on an Android Emulator",id:"steps-to-run-the-app-on-an-android-emulator",level:4},{value:"Conclusion and Next Steps",id:"conclusion-and-next-steps",level:4},{value:"Section 2: Components",id:"section-2-components",level:2},{value:"<strong>=&gt;</strong> Core Components",id:"-core-components",level:3},{value:"the core components in React Native",id:"the-core-components-in-react-native",level:4},{value:"Core Components Table",id:"core-components-table",level:4},{value:"Conclusion",id:"conclusion-1",level:4},{value:"<strong>=&gt;</strong> View Component",id:"-view-component",level:3},{value:"Intro",id:"intro",level:4},{value:"Setting up the Project",id:"setting-up-the-project",level:4},{value:"ios and android simulators",id:"ios-and-android-simulators",level:4},{value:"Starting with a Clean Slate",id:"starting-with-a-clean-slate",level:4},{value:"Displaying the View Component",id:"displaying-the-view-component",level:4},{value:"Expanding the View Component",id:"expanding-the-view-component",level:4},{value:"Nesting Views within the View Component",id:"nesting-views-within-the-view-component",level:4},{value:"Summary",id:"summary",level:4},{value:"<strong>=&gt;</strong> Text Component",id:"-text-component",level:3},{value:"Intro",id:"intro-1",level:4},{value:"Implementing an Example",id:"implementing-an-example",level:4},{value:"Improving the Position",id:"improving-the-position",level:4},{value:"Styling and Layout",id:"styling-and-layout",level:4},{value:"Nesting Text Components",id:"nesting-text-components",level:4},{value:"Summary",id:"summary-1",level:4},{value:"<strong>=&gt;</strong> Image Component",id:"-image-component",level:3},{value:"Intro",id:"intro-2",level:4},{value:"Rendering a Static Image",id:"rendering-a-static-image",level:4},{value:"Loading a Network Image",id:"loading-a-network-image",level:4},{value:"Setting a Background Image",id:"setting-a-background-image",level:4},{value:"Summary",id:"summary-2",level:4},{value:"<strong>=&gt;</strong> ScrollView Component",id:"-scrollview-component",level:3},{value:"Intro",id:"intro-3",level:4},{value:"Implementing an Example",id:"implementing-an-example-1",level:4},{value:"Adding Text Component",id:"adding-text-component",level:4},{value:"Duplicating Image Component",id:"duplicating-image-component",level:4},{value:"Viewing the Content",id:"viewing-the-content",level:4},{value:"Introducing ScrollView",id:"introducing-scrollview",level:4},{value:"Resolving Padding Issue",id:"resolving-padding-issue",level:4},{value:"Summary",id:"summary-3",level:4},{value:"<strong>=&gt;</strong> Button Component",id:"-button-component",level:3},{value:"Intro",id:"intro-4",level:4},{value:"Implementing an Example",id:"implementing-an-example-2",level:4},{value:"Handling the Press Event",id:"handling-the-press-event",level:4},{value:"Customization with Props",id:"customization-with-props",level:4},{value:"Summary",id:"summary-4",level:4},{value:"<strong>=&gt;</strong> Pressable Component",id:"-pressable-component",level:3},{value:"Intro",id:"intro-5",level:4},{value:"Implementing an example",id:"implementing-an-example-3",level:4},{value:"Getting Started with Pressable Component",id:"getting-started-with-pressable-component",level:4},{value:"Custom Button using Pressable Component",id:"custom-button-using-pressable-component",level:4},{value:"Other Events Supported by Pressable Component",id:"other-events-supported-by-pressable-component",level:4},{value:"<strong>=&gt;</strong> Modal Component",id:"-modal-component",level:3},{value:"Intro",id:"intro-6",level:4},{value:"Show and Hide Modal on Button Press",id:"show-and-hide-modal-on-button-press",level:4},{value:"Controlling Modal Visibility",id:"controlling-modal-visibility",level:4},{value:"Additional Props for Modal",id:"additional-props-for-modal",level:4},{value:"Animation and Presentation Style Props",id:"animation-and-presentation-style-props",level:4},{value:"Exercise: Implementing Modal Props",id:"exercise-implementing-modal-props",level:4},{value:"Summary",id:"summary-5",level:4},{value:"<strong>=&gt;</strong> StatusBar component",id:"-statusbar-component",level:3},{value:"Intro",id:"intro-7",level:4},{value:"Code Example",id:"code-example",level:4},{value:"Modifying Appearance",id:"modifying-appearance",level:4},{value:"Visibility and Hidden Prop",id:"visibility-and-hidden-prop",level:4},{value:"Summary",id:"summary-6",level:4},{value:"<strong>=&gt;</strong> ActivityIndicator Component",id:"-activityindicator-component",level:3},{value:"Intro",id:"intro-8",level:4},{value:"Usage",id:"usage",level:4},{value:"Important Props",id:"important-props",level:4},{value:"<strong>=&gt;</strong> Alert component",id:"-alert-component",level:3},{value:"Intro",id:"intro-9",level:4},{value:"Usage Example",id:"usage-example",level:4},{value:"Adding a massage",id:"adding-a-massage",level:4},{value:"Controlling the buttons",id:"controlling-the-buttons",level:4},{value:"Available APIs",id:"available-apis",level:4},{value:"<strong>=&gt;</strong> Custom Components",id:"-custom-components",level:3},{value:"Intro",id:"intro-10",level:4},{value:"Create a custom component",id:"create-a-custom-component",level:4},{value:"Summary",id:"summary-7",level:4},{value:"Section 3: Styling",id:"section-3-styling",level:2},{value:"<strong>=&gt;</strong> Styling React Native apps",id:"-styling-react-native-apps",level:3},{value:"Intro",id:"intro-11",level:4},{value:"Styling Approaches",id:"styling-approaches",level:4},{value:"The stylesheet API",id:"the-stylesheet-api",level:4},{value:"<strong>=&gt;</strong> The StyleSheet API",id:"-the-stylesheet-api",level:3},{value:"Intro",id:"intro-12",level:4},{value:"Using inline styles",id:"using-inline-styles",level:4},{value:"Using the StyleSheet API",id:"using-the-stylesheet-api",level:4},{value:"why use StyleSheet API over inline styles",id:"why-use-stylesheet-api-over-inline-styles",level:4},{value:"Creating a style object without using the StyleSheet API",id:"creating-a-style-object-without-using-the-stylesheet-api",level:4},{value:"<strong>=&gt;</strong> Multiple Styles",id:"-multiple-styles",level:3},{value:"Intro",id:"intro-13",level:4},{value:"Applying Multiple Styles to a Component",id:"applying-multiple-styles-to-a-component",level:4},{value:"Extracting and Reusing Shared Styles",id:"extracting-and-reusing-shared-styles",level:4},{value:"specify multiple styles for a component",id:"specify-multiple-styles-for-a-component",level:4},{value:"the last style in the array takes precedence",id:"the-last-style-in-the-array-takes-precedence",level:4},{value:"To summarize",id:"to-summarize",level:4},{value:"<strong>=&gt;</strong> Box Model",id:"-box-model",level:3},{value:"Intro",id:"intro-14",level:4},{value:"Height and Width Properties",id:"height-and-width-properties",level:4},{value:"Padding",id:"padding",level:4},{value:"Margin",id:"margin",level:4},{value:"Borders",id:"borders",level:4},{value:"Border Radius",id:"border-radius",level:4},{value:"<strong>=&gt;</strong> Shadow and Elevation",id:"-shadow-and-elevation",level:3},{value:"Intro",id:"intro-15",level:4},{value:"Box Shadows in CSS",id:"box-shadows-in-css",level:4},{value:"Box Shadows in React Native",id:"box-shadows-in-react-native",level:4},{value:"the elevation property",id:"the-elevation-property",level:4},{value:"shadowColor is the only property that works on both iOS and Android",id:"shadowcolor-is-the-only-property-that-works-on-both-ios-and-android",level:4},{value:"Conclusion",id:"conclusion-2",level:4},{value:"<strong>=&gt;</strong> Style Inheritance",id:"-style-inheritance",level:3},{value:"Intro",id:"intro-16",level:4},{value:"Defining Styles for the Wrapping View Component",id:"defining-styles-for-the-wrapping-view-component",level:4},{value:"Adding Font Color",id:"adding-font-color",level:4},{value:"Understanding Bold Text Style Inheritance",id:"understanding-bold-text-style-inheritance",level:4},{value:"Conclusion",id:"conclusion-3",level:4},{value:"Section 4: Layout",id:"section-4-layout",level:2},{value:"<strong>=&gt;</strong> Layout with Flexbox",id:"-layout-with-flexbox",level:3},{value:"Intro",id:"intro-17",level:4},{value:"Understanding Flexbox:",id:"understanding-flexbox",level:4},{value:"The Axes in Flexbox:",id:"the-axes-in-flexbox",level:4},{value:"Understanding Flexbox Properties:",id:"understanding-flexbox-properties",level:4},{value:"<strong>=&gt;</strong> Code Setup",id:"-code-setup",level:3},{value:"Intro",id:"intro-18",level:4},{value:"Step 1: Creating a Reusable Box Component:",id:"step-1-creating-a-reusable-box-component",level:4},{value:"Step 2: Defining the Flex Container in App.js:",id:"step-2-defining-the-flex-container-in-appjs",level:4},{value:"Step 3: Adding Props to the Box Component:",id:"step-3-adding-props-to-the-box-component",level:4},{value:"Final Step: Adding a Border to the Container:",id:"final-step-adding-a-border-to-the-container",level:4},{value:"<strong>=&gt;</strong> flex",id:"-flex",level:3},{value:"Intro",id:"intro-19",level:4},{value:"Example 1",id:"example-1",level:4},{value:"Example 2",id:"example-2",level:4},{value:"Example 3",id:"example-3",level:4},{value:"Example 4",id:"example-4",level:4},{value:"Summary",id:"summary-8",level:4},{value:"<strong>=&gt;</strong> Flex Direction",id:"-flex-direction",level:3},{value:"Intro",id:"intro-20",level:4},{value:"Value 1: Column",id:"value-1-column",level:4},{value:"Value 2: column-reverse",id:"value-2-column-reverse",level:4},{value:"Value 3: row",id:"value-3-row",level:4},{value:"Value 4: row-reverse",id:"value-4-row-reverse",level:4},{value:"Overflow",id:"overflow",level:4},{value:"Summary",id:"summary-9",level:4},{value:"<strong>=&gt;</strong> Justify Content",id:"-justify-content",level:3},{value:"Intro",id:"intro-21",level:4},{value:"Setting Justify Content",id:"setting-justify-content",level:4},{value:"Default Value",id:"default-value",level:4},{value:"Flex Start",id:"flex-start",level:4},{value:"Flex End",id:"flex-end",level:4},{value:"Center",id:"center",level:4},{value:"Additional Values",id:"additional-values",level:4},{value:"Space Between",id:"space-between",level:4},{value:"Space Around",id:"space-around",level:4},{value:"Space Evenly",id:"space-evenly",level:4},{value:"Horizontal Alignment with Flex Direction",id:"horizontal-alignment-with-flex-direction",level:4},{value:"Summary",id:"summary-10",level:4},{value:"<strong>=&gt;</strong> AlignItems",id:"-alignitems",level:3},{value:"Intro",id:"intro-22",level:4},{value:"Default Value of Align Items",id:"default-value-of-align-items",level:4},{value:"Stretch",id:"stretch",level:4},{value:"Flex Start",id:"flex-start-1",level:4},{value:"Flex End",id:"flex-end-1",level:4},{value:"Center",id:"center-1",level:4},{value:"Baseline",id:"baseline",level:4},{value:"Summary",id:"summary-11",level:4},{value:"<strong>=&gt;</strong> AlignSelf",id:"-alignself",level:3},{value:"Intro",id:"intro-23",level:4},{value:"Align Self vs Align Items",id:"align-self-vs-align-items",level:4},{value:"Flex Start",id:"flex-start-2",level:4},{value:"Flex End",id:"flex-end-2",level:4},{value:"Center",id:"center-2",level:4},{value:"Stretch",id:"stretch-1",level:4},{value:"Default Value",id:"default-value-1",level:4},{value:"Inheritance from Align Items",id:"inheritance-from-align-items",level:4},{value:"Summary",id:"summary-12",level:4},{value:"<strong>=&gt;</strong> FlexWrap",id:"-flexwrap",level:3},{value:"Intro",id:"intro-24",level:4},{value:"Default Value of Flex Wrap",id:"default-value-of-flex-wrap",level:4},{value:"Using flexWrap",id:"using-flexwrap",level:4},{value:"No Wrap",id:"no-wrap",level:4},{value:"Wrap",id:"wrap",level:4},{value:"Wrap Reverse",id:"wrap-reverse",level:4},{value:"Horizontal Wrapping",id:"horizontal-wrapping",level:4},{value:"Summary",id:"summary-13",level:4},{value:"<strong>=&gt;</strong> Align Content",id:"-align-content",level:3},{value:"Intro",id:"intro-25",level:4},{value:"Align Content Property Overview",id:"align-content-property-overview",level:4},{value:"Understanding Values",id:"understanding-values",level:4},{value:"Value 1: Flex Start",id:"value-1-flex-start",level:4},{value:"Value 2: Flex End",id:"value-2-flex-end",level:4},{value:"Value 3: Center",id:"value-3-center",level:4},{value:"Value 4: Stretch",id:"value-4-stretch",level:4},{value:"Value 5: Space Between",id:"value-5-space-between",level:4},{value:"Fixing Styles for Space Between",id:"fixing-styles-for-space-between",level:4},{value:"Value 6: Space Around",id:"value-6-space-around",level:4},{value:"Summary",id:"summary-14",level:4},{value:"<strong>=&gt;</strong> gap",id:"-gap",level:3},{value:"Intro",id:"intro-26",level:4},{value:"Getting Started",id:"getting-started-1",level:4},{value:"Row Gap Property",id:"row-gap-property",level:4},{value:"Column Gap Property",id:"column-gap-property",level:4},{value:"Shorthand Gap Property",id:"shorthand-gap-property",level:4},{value:"Summary",id:"summary-15",level:4},{value:"<strong>=&gt;</strong> flexBasis",id:"-flexbasis",level:3},{value:"Intro",id:"intro-27",level:4},{value:"Understanding Flex Basis",id:"understanding-flex-basis",level:4},{value:"Using Flex Basis",id:"using-flex-basis",level:4},{value:"Flex Basis for Width",id:"flex-basis-for-width",level:4},{value:"In summary",id:"in-summary",level:4},{value:"<strong>=&gt;</strong> Flex Shrink",id:"-flex-shrink",level:3},{value:"Intro",id:"intro-28",level:4},{value:"Understanding Flex Shrink",id:"understanding-flex-shrink",level:4},{value:"Controlling Shrinking Behavior",id:"controlling-shrinking-behavior",level:4},{value:"Summary",id:"summary-16",level:4},{value:"<strong>=&gt;</strong> Flex Grow",id:"-flex-grow",level:3},{value:"Intro",id:"intro-29",level:4},{value:"Exploring Flex Grow",id:"exploring-flex-grow",level:4},{value:"Applying Flex Grow",id:"applying-flex-grow",level:4},{value:"To summarize:",id:"to-summarize-1",level:4},{value:"<strong>=&gt;</strong> Relative and Absolute Layout",id:"-relative-and-absolute-layout",level:3},{value:"Intro",id:"intro-30",level:4},{value:"Understanding Relative Layout",id:"understanding-relative-layout",level:4},{value:"Exploring Absolute Layout",id:"exploring-absolute-layout",level:4},{value:"Visualizing with UI",id:"visualizing-with-ui",level:4},{value:"When to Use Each Layout",id:"when-to-use-each-layout",level:4},{value:"Section 5: Dynamic User Interfaces",id:"section-5-dynamic-user-interfaces",level:2},{value:"<strong>=&gt;</strong> Dynamic User Interfaces",id:"-dynamic-user-interfaces",level:3},{value:"Intro",id:"intro-31",level:4},{value:"Learning Objectives",id:"learning-objectives",level:4},{value:"Setting Up",id:"setting-up",level:4},{value:"<strong>=&gt;</strong> Dimensions API",id:"-dimensions-api",level:3},{value:"Intro",id:"intro-32",level:4},{value:"In summary",id:"in-summary-1",level:4},{value:"<strong>=&gt;</strong> Dimensions API Drawback",id:"-dimensions-api-drawback",level:3},{value:"Intro",id:"intro-33",level:4},{value:"Logging Device Dimensions",id:"logging-device-dimensions",level:4},{value:"Adapting to Landscape Mode",id:"adapting-to-landscape-mode",level:4},{value:"The Solution: Using Hooks and Inline Styles",id:"the-solution-using-hooks-and-inline-styles",level:4},{value:"<strong>=&gt;</strong> useWindowDimensions",id:"-usewindowdimensions",level:3},{value:"Intro",id:"intro-34",level:4},{value:"Step 1: Eliminate Unnecessary Code",id:"step-1-eliminate-unnecessary-code",level:4},{value:"Step 2: Import <code>useWindowDimensions</code>",id:"step-2-import-usewindowdimensions",level:4},{value:"Step 3: Implement <code>useWindowDimensions</code>",id:"step-3-implement-usewindowdimensions",level:4},{value:"Testing the Updated Approach",id:"testing-the-updated-approach",level:4},{value:"<strong>=&gt;</strong> SafeAreaView Component",id:"-safeareaview-component",level:3},{value:"Intro",id:"intro-35",level:4},{value:"Code Walkthrough",id:"code-walkthrough",level:4},{value:"Issue and Solution",id:"issue-and-solution",level:4},{value:"Introducing Safe Area View",id:"introducing-safe-area-view",level:4},{value:"Conclusion",id:"conclusion-4",level:4},{value:"<strong>=&gt;</strong> Platform Specific Code",id:"-platform-specific-code",level:3},{value:"Intro",id:"intro-36",level:4},{value:"Platform Module",id:"platform-module",level:4},{value:"Platform.select",id:"platformselect",level:4},{value:"Platform-Specific Extensions",id:"platform-specific-extensions",level:4},{value:"example",id:"example",level:4},{value:"In summary",id:"in-summary-2",level:4},{value:"Section 6: Exercise One",id:"section-6-exercise-one",level:2},{value:"<strong>=&gt;</strong> Build a Pokemon Card 1",id:"-build-a-pokemon-card-1",level:3},{value:"Intro",id:"intro-37",level:4},{value:"Step 1: Modify app.js",id:"step-1-modify-appjs",level:4},{value:"Step 2: Add Images",id:"step-2-add-images",level:4},{value:"Step 3: Create a Components Folder",id:"step-3-create-a-components-folder",level:4},{value:"Step 4: Import the Component",id:"step-4-import-the-component",level:4},{value:"Step 5: Improve Card Placement",id:"step-5-improve-card-placement",level:4},{value:"<strong>=&gt;</strong> Build a Pokemon Card 2",id:"-build-a-pokemon-card-2",level:3},{value:"Intro",id:"intro-38",level:4},{value:"Step 6: Styling with Stylesheet API",id:"step-6-styling-with-stylesheet-api",level:4},{value:"Add Card Styling",id:"add-card-styling",level:4},{value:"Define Card Styles",id:"define-card-styles",level:4},{value:"Adding Shadow Effect",id:"adding-shadow-effect",level:4},{value:"<strong>=&gt;</strong> Build a Pokemon Card 3",id:"-build-a-pokemon-card-3",level:3},{value:"Intro",id:"intro-39",level:4},{value:"Step 7: Defining Pok\xe9mon Properties:",id:"step-7-defining-pok\xe9mon-properties",level:4},{value:"Step 7/2 : Passing Properties as Props:",id:"step-72--passing-properties-as-props",level:4},{value:"Step 8: Destructuring Props:",id:"step-8-destructuring-props",level:4},{value:"Rendering Content:",id:"rendering-content",level:4},{value:"Step 9: Block One - Name and HP:",id:"step-9-block-one---name-and-hp",level:4},{value:"Step 10: Block Two - Pok\xe9mon Image:",id:"step-10-block-two---pok\xe9mon-image",level:4},{value:"Step 11: Block Three - Pok\xe9mon Type:",id:"step-11-block-three---pok\xe9mon-type",level:4},{value:"Step 12: Block Four - Moves:",id:"step-12-block-four---moves",level:4},{value:"Step 13: Block Five - Weaknesses:",id:"step-13-block-five---weaknesses",level:4},{value:"Previewing the UI:",id:"previewing-the-ui",level:4},{value:"<strong>=&gt;</strong> Build a Pokemon Card 4",id:"-build-a-pokemon-card-4",level:3},{value:"Intro",id:"intro-40",level:4},{value:"Step 14: Styling the Name and HP Block",id:"step-14-styling-the-name-and-hp-block",level:4},{value:"nameContainer Style:",id:"namecontainer-style",level:4},{value:"Name Text Style:",id:"name-text-style",level:4},{value:"HP Text Style:",id:"hp-text-style",level:4},{value:"Step 15: Styling the Image Block",id:"step-15-styling-the-image-block",level:4},{value:"Conclusion:",id:"conclusion-5",level:4},{value:"<strong>=&gt;</strong> Build a Pokemon Card 5",id:"-build-a-pokemon-card-5",level:3},{value:"Intro",id:"intro-41",level:4},{value:"Step 16: Styling the Pok\xe9mon type Block",id:"step-16-styling-the-pok\xe9mon-type-block",level:4},{value:"Define the key value pairs for each of these styles",id:"define-the-key-value-pairs-for-each-of-these-styles",level:4},{value:"Step 17: Styling the Moves Block",id:"step-17-styling-the-moves-block",level:4},{value:"Step 18: Styling the Weakness Block",id:"step-18-styling-the-weakness-block",level:4},{value:"Conclusion:",id:"conclusion-6",level:4},{value:"<strong>=&gt;</strong> Build a Pokemon Card 6",id:"-build-a-pokemon-card-6",level:3},{value:"Intro",id:"intro-42",level:4},{value:"Step 19: Defining Pok\xe9mon Details",id:"step-19-defining-pok\xe9mon-details",level:4},{value:"Step 20: Adding a ScrollView",id:"step-20-adding-a-scrollview",level:4},{value:"Final Checks:",id:"final-checks",level:4},{value:"Conclusion:",id:"conclusion-7",level:4},{value:"Section 7: How to render list",id:"section-7-how-to-render-list",level:2},{value:"<strong>=&gt;</strong> Lists",id:"-lists",level:3},{value:"Intro",id:"intro-43",level:4},{value:"Setting Up the Project:",id:"setting-up-the-project-1",level:4},{value:"Step 1: Creating Mock Data",id:"step-1-creating-mock-data",level:4},{value:"Step 2: Importing the Data",id:"step-2-importing-the-data",level:4},{value:"Step 3: Rendering the List",id:"step-3-rendering-the-list",level:4},{value:"Step 4: Making the List Scrollable",id:"step-4-making-the-list-scrollable",level:4},{value:"Step 5: Styling Improvements",id:"step-5-styling-improvements",level:4},{value:"1: Add Safe Area View",id:"1-add-safe-area-view",level:4},{value:"Add some styles",id:"add-some-styles",level:4},{value:"2: Add Styling to the ScrollView",id:"2-add-styling-to-the-scrollview",level:4},{value:"3: Create a card Style",id:"3-create-a-card-style",level:4},{value:"4: Create a Text Style",id:"4-create-a-text-style",level:4},{value:"Conclusion:",id:"conclusion-8",level:4},{value:"<strong>=&gt;</strong> FlatList",id:"-flatlist",level:3},{value:"Intro",id:"intro-44",level:4},{value:"The recommended approach",id:"the-recommended-approach",level:4},{value:"horizontal prop",id:"horizontal-prop",level:4},{value:"keyExtractor prop",id:"keyextractor-prop",level:4},{value:"Adding horizontal padding",id:"adding-horizontal-padding",level:4},{value:"to summarize",id:"to-summarize-2",level:4},{value:"<strong>=&gt;</strong> ItemSeparator",id:"-itemseparator",level:3},{value:"Intro",id:"intro-45",level:4},{value:"ItemSeparatorComponent",id:"itemseparatorcomponent",level:4},{value:"In summary",id:"in-summary-3",level:4},{value:"<strong>=&gt;</strong> listEmpty",id:"-listempty",level:3},{value:"Intro",id:"intro-46",level:4},{value:"<strong>=&gt;</strong> List Header and Footer",id:"-list-header-and-footer",level:3},{value:"Intro",id:"intro-47",level:4},{value:"ListHeaderComponent",id:"listheadercomponent",level:4},{value:"List Footer Component",id:"list-footer-component",level:4},{value:"SectionList",id:"sectionlist",level:2},{value:"Intro",id:"intro-48",level:4},{value:"Grouping by Pok\xe9mon Type",id:"grouping-by-pok\xe9mon-type",level:4},{value:"Styling Section Headers",id:"styling-section-headers",level:4},{value:"ItemSeparatorComponent",id:"itemseparatorcomponent-1",level:4},{value:"SectionSeparatorComponent",id:"sectionseparatorcomponent",level:4},{value:"Conclusion",id:"conclusion-9",level:4},{value:"Section 8: Inputs and Forms",id:"section-8-inputs-and-forms",level:2},{value:"<strong>=&gt;</strong> Inputs and Forms",id:"-inputs-and-forms",level:3},{value:"Intro",id:"intro-49",level:4},{value:"Input Options in React Native",id:"input-options-in-react-native",level:4},{value:"Expo Expands Input Options",id:"expo-expands-input-options",level:4},{value:"Challenges in React Native Forms",id:"challenges-in-react-native-forms",level:4},{value:"React Hook Form",id:"react-hook-form",level:4},{value:"Project Setup",id:"project-setup",level:4},{value:"<strong>=&gt;</strong> TextInput",id:"-textinput",level:3},{value:"<strong>TextInput</strong>",id:"textinput",level:4},{value:"Intro",id:"intro-50",level:4},{value:"Getting Started",id:"getting-started-2",level:4},{value:"Adding Text Input",id:"adding-text-input",level:4},{value:"Styling the Text Input",id:"styling-the-text-input",level:4},{value:"Tracking Input Value with useState",id:"tracking-input-value-with-usestate",level:4},{value:"Displaying Input Value",id:"displaying-input-value",level:4},{value:"Summary",id:"summary-17",level:4},{value:"<strong>=&gt;</strong> TextInput Props",id:"-textinput-props",level:3},{value:"<strong>TextInput Props</strong>",id:"textinput-props",level:4},{value:"Intro",id:"intro-51",level:4},{value:"Placeholder Prop",id:"placeholder-prop",level:4},{value:"SecureTextEntry Prop",id:"securetextentry-prop",level:4},{value:"keyboardType Prop",id:"keyboardtype-prop",level:4},{value:"AutoCorrection and AutoCapitalization",id:"autocorrection-and-autocapitalization",level:4},{value:"<strong>=&gt;</strong> Multiline TextInput",id:"-multiline-textinput",level:3},{value:"<strong>Multiline TextInput</strong>",id:"multiline-textinput",level:4},{value:"Intro",id:"intro-52",level:4},{value:"Creating a Multi-line Input",id:"creating-a-multi-line-input",level:4},{value:"Styling the multiline Input",id:"styling-the-multiline-input",level:4},{value:"Addressing Alignment",id:"addressing-alignment",level:4},{value:"Summary",id:"summary-18",level:4},{value:"<strong>=&gt;</strong> Switch",id:"-switch",level:3},{value:"Intro",id:"intro-53",level:4},{value:"Usage Steps",id:"usage-steps",level:4},{value:"Step 1: Importing the Switch Component",id:"step-1-importing-the-switch-component",level:4},{value:"Step 2: Creating a Container",id:"step-2-creating-a-container",level:4},{value:"Step 3: Defining Styles",id:"step-3-defining-styles",level:4},{value:"Step 4: Connecting with state variable",id:"step-4-connecting-with-state-variable",level:4},{value:"Customizing Appearance using trackColor and thumbColor",id:"customizing-appearance-using-trackcolor-and-thumbcolor",level:4},{value:"Platform Differences",id:"platform-differences",level:4},{value:"<strong>=&gt;</strong> Login Form",id:"-login-form",level:3},{value:"Intro",id:"intro-54",level:4},{value:"Setting Up the Component",id:"setting-up-the-component",level:4},{value:"Creating the Main Container",id:"creating-the-main-container",level:4},{value:"Form Container",id:"form-container",level:4},{value:"Adding Labels and Inputs",id:"adding-labels-and-inputs",level:4},{value:"Adding a Submit Button",id:"adding-a-submit-button",level:4},{value:"Managing Form State",id:"managing-form-state",level:4},{value:"<strong>=&gt;</strong> KeyboardAvoidingView",id:"-keyboardavoidingview",level:3},{value:"Intro",id:"intro-55",level:4},{value:"Adding an Image",id:"adding-an-image",level:4},{value:"The Keyboard Overlay Issue",id:"the-keyboard-overlay-issue",level:4},{value:"Using KeyboardAvoidingView",id:"using-keyboardavoidingview",level:4},{value:"Addressing the Image Issue",id:"addressing-the-image-issue",level:4},{value:"Handling Platform-Specific Offset",id:"handling-platform-specific-offset",level:4},{value:"Conclusion",id:"conclusion-10",level:4},{value:"<strong>=&gt;</strong> Form Validation",id:"-form-validation",level:3},{value:"Intro",id:"intro-56",level:4},{value:"to display error messages",id:"to-display-error-messages",level:4},{value:"Define a Validation Function",id:"define-a-validation-function",level:4},{value:"Displaying Error Messages",id:"displaying-error-messages",level:4},{value:"Styling the Error Text",id:"styling-the-error-text",level:4},{value:"Conclusion",id:"conclusion-11",level:4},{value:"Section 9: Networking",id:"section-9-networking",level:2},{value:"<strong>=&gt;</strong> Networking",id:"-networking",level:3},{value:"Intro",id:"intro-57",level:4},{value:"Section Goals",id:"section-goals",level:4},{value:"React Query and Tan Stack Query",id:"react-query-and-tan-stack-query",level:4},{value:"Getting Started",id:"getting-started-3",level:4},{value:"JsonPlaceholder API",id:"jsonplaceholder-api",level:4},{value:"Next Steps",id:"next-steps",level:4},{value:"Conclusion",id:"conclusion-12",level:4},{value:"<strong>=&gt;</strong> GET Requests",id:"-get-requests",level:3},{value:"Introduction",id:"introduction",level:4},{value:"Clearing Existing Code",id:"clearing-existing-code",level:4},{value:"Fetching Data",id:"fetching-data",level:4},{value:"Component Mounting",id:"component-mounting",level:4},{value:"Rendering Data",id:"rendering-data",level:4},{value:"Enhancing the UI",id:"enhancing-the-ui",level:4},{value:"Conclusion",id:"conclusion-13",level:4},{value:"<strong>=&gt;</strong> Loading State",id:"-loading-state",level:3},{value:"Intro",id:"intro-58",level:4},{value:"Implementing Loading State",id:"implementing-loading-state",level:4},{value:"Visualizing the Loading UI",id:"visualizing-the-loading-ui",level:4},{value:"Conclusion",id:"conclusion-14",level:4},{value:"<strong>=&gt;</strong> Pull to refresh",id:"-pull-to-refresh",level:3},{value:"Intro",id:"intro-59",level:4},{value:"Implementing Pull-to-Refresh",id:"implementing-pull-to-refresh",level:4},{value:"Defining the <code>handleRefresh</code> Function",id:"defining-the-handlerefresh-function",level:4},{value:"Conclusion",id:"conclusion-15",level:4},{value:"<strong>=&gt;</strong> POST Request",id:"-post-request",level:3},{value:"Introduction",id:"introduction-1",level:4},{value:"Using Jsonplaceholder API",id:"using-jsonplaceholder-api",level:4},{value:"Step 1: Create State Variables",id:"step-1-create-state-variables",level:4},{value:"Step 2: Bind Variables to UI Elements",id:"step-2-bind-variables-to-ui-elements",level:4},{value:"Styling",id:"styling",level:4},{value:"Step 3: Define Button Click Handler",id:"step-3-define-button-click-handler",level:4},{value:"Conclusion",id:"conclusion-16",level:4},{value:"<strong>=&gt;</strong> Error Handling",id:"-error-handling",level:3},{value:"Intro",id:"intro-60",level:4},{value:"Step 1: Define Error State Variable",id:"step-1-define-error-state-variable",level:4},{value:"Step 2: Try-Catch Blocks for Fetch and Post",id:"step-2-try-catch-blocks-for-fetch-and-post",level:4},{value:"Step 3: Render UI Based on Error State",id:"step-3-render-ui-based-on-error-state",level:4},{value:"Error Styles",id:"error-styles",level:4},{value:"Note on Handling Localhost URLs in Android Emulator",id:"note-on-handling-localhost-urls-in-android-emulator",level:4},{value:"Debugging Features in React Native",id:"debugging-features-in-react-native",level:4},{value:"Conclusion",id:"conclusion-17",level:4},{value:"Section 10: Navigation",id:"section-10-navigation",level:2},{value:"<strong>=&gt;</strong> Navigation",id:"-navigation",level:3},{value:"Intro",id:"intro-61",level:4},{value:"Solutions for handling navigation",id:"solutions-for-handling-navigation",level:4},{value:"Setting Up the Project",id:"setting-up-the-project-2",level:4},{value:"<strong>=&gt;</strong> Stack Navigation",id:"-stack-navigation",level:3},{value:"Intro",id:"intro-62",level:4},{value:"Stack Navigator and Native Stack Navigator",id:"stack-navigator-and-native-stack-navigator",level:4},{value:"Setting Up the Project",id:"setting-up-the-project-3",level:4},{value:"<strong>=&gt;</strong> Navigation between Screens",id:"-navigation-between-screens",level:3},{value:"Intro",id:"intro-63",level:4},{value:"Using the <code>navigation</code> prop",id:"using-the-navigation-prop",level:4},{value:"Using the <code>useNavigation</code> hook",id:"using-the-usenavigation-hook",level:4},{value:"<strong>=&gt;</strong> Passing Data between Screens",id:"-passing-data-between-screens",level:3},{value:"Intro",id:"intro-64",level:4},{value:"Passing Data Between Screens",id:"passing-data-between-screens",level:4},{value:"Setting Default Parameter Value",id:"setting-default-parameter-value",level:4},{value:"Updating Parameters",id:"updating-parameters",level:4},{value:"Sending Data Back",id:"sending-data-back",level:4},{value:"Customizing Appearance and Behavior",id:"customizing-appearance-and-behavior",level:4},{value:"<strong>=&gt;</strong> Stack Navigation Options",id:"-stack-navigation-options",level:3},{value:"Intro",id:"intro-65",level:4},{value:"Screen Title",id:"screen-title",level:4},{value:"Styling Headers",id:"styling-headers",level:4},{value:"Header Left and Header Right",id:"header-left-and-header-right",level:4},{value:"Header Left",id:"header-left",level:4},{value:"Styling Content",id:"styling-content",level:4},{value:"Uniform Style Across All Screens",id:"uniform-style-across-all-screens",level:4},{value:"<strong>=&gt;</strong> Dynamic Stack Navigator Options",id:"-dynamic-stack-navigator-options",level:3},{value:"Intro",id:"intro-66",level:4},{value:"Dynamically Set Header Title",id:"dynamically-set-header-title",level:4},{value:"Stack.Screen Component",id:"stackscreen-component",level:4},{value:"Leveraging React Hook",id:"leveraging-react-hook",level:4},{value:"Use Effect vs. Use Layout Effect",id:"use-effect-vs-use-layout-effect",level:4},{value:"Choosing Between the Two",id:"choosing-between-the-two",level:4},{value:"<strong>=&gt;</strong> Drawer Navigation",id:"-drawer-navigation",level:3},{value:"Installation",id:"installation",level:4},{value:"Library Installation",id:"library-installation",level:4},{value:"Code Separation",id:"code-separation",level:4},{value:"Importing Libraries",id:"importing-libraries",level:4},{value:"Missing Step",id:"missing-step",level:4},{value:"Clearing Cache",id:"clearing-cache",level:4},{value:"Component Creation",id:"component-creation",level:4},{value:"Defining Screens",id:"defining-screens",level:4},{value:"Adding Screens",id:"adding-screens",level:4},{value:"Restart Server",id:"restart-server",level:4},{value:"Using the Drawer",id:"using-the-drawer",level:4},{value:"Programmatic Navigation",id:"programmatic-navigation",level:4},{value:"Navigating Programmatically",id:"navigating-programmatically",level:4},{value:"Conclusion",id:"conclusion-18",level:4},{value:"<strong>=&gt;</strong> Drawer Navigation Options",id:"-drawer-navigation-options",level:3},{value:"Title Option",id:"title-option",level:4},{value:"Custom Colors",id:"custom-colors",level:4},{value:"Entire Drawer Color",id:"entire-drawer-color",level:4},{value:"Further Customization",id:"further-customization",level:4},{value:"Conclusion",id:"conclusion-19",level:4},{value:"<strong>=&gt;</strong> Tab Navigation",id:"-tab-navigation",level:3},{value:"Installation",id:"installation-1",level:4},{value:"Code Separation",id:"code-separation-1",level:4},{value:"Importing Libraries",id:"importing-libraries-1",level:4},{value:"Creating Components",id:"creating-components",level:4},{value:"Defining Screens",id:"defining-screens-1",level:4},{value:"Configuring Tab Screens",id:"configuring-tab-screens",level:4},{value:"Tab Navigation in Action",id:"tab-navigation-in-action",level:4},{value:"Conclusion",id:"conclusion-20",level:4},{value:"<strong>=&gt;</strong> Tab Navigation Options",id:"-tab-navigation-options",level:3},{value:"Screen Options",id:"screen-options",level:4},{value:"Tab Screen Options",id:"tab-screen-options",level:4},{value:"Additional Options",id:"additional-options",level:4},{value:"Conclusion",id:"conclusion-21",level:4},{value:"<strong>=&gt;</strong> Nesting Navigators",id:"-nesting-navigators",level:3},{value:"Nesting Example",id:"nesting-example",level:4},{value:"Modifying app.js",id:"modifying-appjs",level:4},{value:"Creating a New Tab Screen",id:"creating-a-new-tab-screen",level:4},{value:"Nested Navigation",id:"nested-navigation",level:4},{value:"Handling Headers",id:"handling-headers",level:4},{value:"Conclusion",id:"conclusion-22",level:4}],d={toc:p},m="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(m,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"react-native"},"React Native"),(0,o.kt)("h2",{id:"section-1-introduction-and-setup"},"Section 1: Introduction and Setup"),(0,o.kt)("blockquote",null),(0,o.kt)("h3",{id:"-introduction"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Introduction"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Welcome to an exciting series on React Native for beginners.")),(0,o.kt)("h4",{id:"what-is-react-native"},"What is React Native?"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"React Native is an open-source framework for building native Android and iOS applications using React.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Leveraging JavaScript, you can access platform-specific APIs while employing React components to define the appearance and behavior of"),(0,o.kt)("p",{parentName:"li"},"your user interface."))),(0,o.kt)("h4",{id:"why-learn-react-native"},"Why Learn React Native?"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Traditionally, developing an iOS app requires knowledge of Swift or Objective-C, while building an Android app requires Java or Kotlin"),(0,o.kt)("p",{parentName:"li"},"expertise.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"With React Native, you can create an app that works seamlessly on both platforms, saving time and effort.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Learning React Native involves a minimal learning curve if you already have experience with React.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"React Native is in high demand in the job market, allowing businesses to have a single team proficient in React Native instead of"),(0,o.kt)("p",{parentName:"li"},"separate iOS and Android developers.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The expertise in React can also extend to web app development.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"React Native is used by companies like Microsoft, Meta, Tesla, Pinterest, and Discord, making it a valuable addition to your skill set."))),(0,o.kt)("h4",{id:"prerequisites-for-learning-react-native"},"Prerequisites for Learning React Native"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"A solid understanding of JavaScript and the fundamentals of React is essential.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Concepts like function components, props, state, JSX, and hooks are prerequisites.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If you're new to React, don't worry. There is an extensive tutorial series covering React from beginner to advanced levels."))),(0,o.kt)("h4",{id:"getting-started"},"Getting Started"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"All the source code related to this series can be found in my GitHub repository (linked in the description).")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Subscribe to the channel and stay tuned for the next video as we start our journey of learning the various concepts of React Native."))),(0,o.kt)("h3",{id:"-expo-vs-react-native"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Expo vs React Native"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"let's explore a vital topic: Expo versus React Native.")),(0,o.kt)("h4",{id:"react-native-1"},"React Native"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"React Native is an open-source framework maintained by Meta or Facebook, designed for building cross-platform apps.")),(0,o.kt)("h4",{id:"expo"},"Expo"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Expo, on the other hand, is an independent open-source framework maintained by Expo itself.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"While both frameworks have the common goal of developing Android and iOS apps, they differ significantly in terms of maintenance, ease of setup, and platform compatibility."))),(0,o.kt)("h4",{id:"advantages-of-expo"},"Advantages of Expo"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Expo provides a streamlined experience and a suite of tools and services built around React Native, greatly simplifying the development process.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Expo is to React Native what Next.js is to React.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"It offers a simplified setup compared to plain React Native, which can be challenging and time-consuming.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"One of the key advantages of Expo is the ability to develop your app on Windows or Linux and still run it on a physical iPhone.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Expo has evolved significantly over the years and now supports nearly all the features necessary for building enterprise mobile apps."))),(0,o.kt)("h4",{id:"flexibility-of-expo"},"Flexibility of Expo"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In the event that you require access to native Android or iOS code, Expo allows you to eject your app and work with a plain React Native code base.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This flexibility ensures that you have the option to leverage the additional functionalities provided by Expo while still tapping into native code when necessary."))),(0,o.kt)("h4",{id:"expo-as-the-default-choice"},"Expo as the Default Choice"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If you're new to React Native and exploring the official React Native documentation, you'll notice that Expo is the default choice for setting up your development environment.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This endorsement by the React Native community highlights Expo as the optimal starting point for beginners.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Expo provides a smoother onboarding experience and a robust set of tools to kick-start your React Native journey, which is what we will be using in this series."))),(0,o.kt)("h4",{id:"conclusion"},"Conclusion"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Join me in the next video where we will create our first React Native project using Expo. Thank you.")),(0,o.kt)("h3",{id:"-hello-world"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Hello World"),(0,o.kt)("h4",{id:"setting-up-development-environment"},"Setting Up Development Environment"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Install Node.js from node.js.org, the latest stable release.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Update Node.js if already installed.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Use VS Code as the code editor, which can be downloaded from code.visualstudio.com.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'Create a folder called "React Native Course" and open it in VS Code.')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This folder will serve as our workspace throughout the series."))),(0,o.kt)("h4",{id:"creating-a-react-native-project-with-expo"},"Creating a React Native Project with Expo"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Open the terminal in VS Code (shortcut: Control + `) and enter the following command:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"}," npx create-expo-app@latest [project-name]\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This command will create a new React Native project with the Expo package already installed.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The project directory will be created, and all necessary dependencies will be installed."))),(0,o.kt)("h4",{id:"understanding-project-files-and-folders"},"Understanding Project Files and Folders"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Take a few minutes to understand the different files and folders generated by create-expo-app.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"package.json")," file contains project dependencies, scripts, and metadata.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"package-lock.json")," file ensures consistent installation of project dependencies.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"babel.config.js")," file serves as the Babel configuration file.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"app.json")," file contains configuration options for the project.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"app.js")," file serves as the default screen of the project.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},".gitignore")," file specifies files and folders that shouldn't be tracked by the Version Control System.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"node_modules")," folder houses all project dependencies.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"assets")," folder contains various resources, such as icons and splash screens."))),(0,o.kt)("h4",{id:"running-the-react-native-expo-app"},"Running the React Native Expo App"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"It's finally time to run our first React Native Expo app.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Follow the instructions in the terminal to run the project."))),(0,o.kt)("h3",{id:"-running-the-app-on-a-device"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Running the App on a Device"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Now that we have learned how to generate a new Expo project and gained an understanding of the project's different files and folders, it's time to run our application.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"There are several methods available for running the app on different devices:"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"iOS device")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Android device")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"iOS simulator")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Android emulator")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"We will focus on running the app on a real device."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"I will be demonstrating the process on an iPhone, but I will also provide instructions for running the app on an Android device."))),(0,o.kt)("h4",{id:"steps-to-run-the-app-on-a-real-device"},"Steps to Run the App on a Real Device"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Navigate to the project folder and run the command ",(0,o.kt)("inlineCode",{parentName:"p"},"npm start")," ."),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"This will generate a QR code which we will use shortly."))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Download the Expo Go app on your device."),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"You can find it on the App Store for iPhones or the Play Store for Android devices."))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"Ensure that both your computer and the mobile device are connected to the same Wi-Fi network."))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"On your iPhone, open the Camera app and scan the QR code displayed in the terminal."),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"If you have an Android device, use the QR code scanner within the Expo Go app.")))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"After a few seconds, you should see the Hello World app running on your device."),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"The device screen may be mirrored on your computer screen."))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"To test the app"),", go back to ",(0,o.kt)("inlineCode",{parentName:"p"},"app.js"),' and change the text to "Hello World".'),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Save the file, and you will notice the change reflected on your device almost instantly.")))),(0,o.kt)("h3",{id:"-running-the-app-on-an-ios-simulator"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Running the App on an iOS Simulator"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"let's explore how to run the app on an iOS simulator.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"Please note that running iOS simulators is only possible on a Mac and not on Windows or Linux systems"),"."))),(0,o.kt)("h4",{id:"steps-to-run-the-app-on-an-ios-simulator"},"Steps to Run the App on an iOS Simulator"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Navigate to the project folder in the terminal and execute the command ",(0,o.kt)("inlineCode",{parentName:"p"},"npm start")," .")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Download Xcode from the App Store and grant the necessary permissions it requests."),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Note: Xcode may already be downloaded if you have a Mac."))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"In the terminal, find out the shortcut for opening the iOS simulator. It is ",(0,o.kt)("inlineCode",{parentName:"p"},"I")," , so press ",(0,o.kt)("inlineCode",{parentName:"p"},"I")," on your keyboard."),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Within a few seconds, the iPhone simulator should open and prompt you to open the app in Expo Go."))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Grant the necessary permissions and you will see the Expo app running on the simulator.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},'Try changing the text to "Hello iOS Simulator" in ',(0,o.kt)("inlineCode",{parentName:"p"},"app.js")," ."),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Save the file and you will see the change reflecting in the simulator."))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"By default, the iPhone SE (third generation) simulator is open. If you prefer to use a different device, go to File > Open Simulator and select a device (e.g., iPhone 14 Pro S).")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Go back to VS Code, with focus in the terminal, and press ",(0,o.kt)("inlineCode",{parentName:"p"},"I")," once again."),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"This will open the application in Expo Go on the selected device, and you will have your app up and running.")))),(0,o.kt)("h3",{id:"-running-the-app-on-an-android-emulator"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Running the App on an Android Emulator"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"we will explore how to run our application on an Android emulator.")),(0,o.kt)("h4",{id:"steps-to-run-the-app-on-an-android-emulator"},"Steps to Run the App on an Android Emulator"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Visit ",(0,o.kt)("inlineCode",{parentName:"p"},"developer.android.com/studio")," and download Android Studio."),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"It is available for Windows, Mac OS, and Linux."))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Install Android Studio."),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'Launch the setup Wizard and click "Next" on the welcome screen.')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'Choose the standard setup type and click "Next".')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Proceed through the setup by selecting the desired color theme and accepting the terms.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'Finally, click "Finish" on the final review screen.')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The installation process may take a few minutes.")))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Once Android Studio is installed, you should see a different welcome screen."),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'Click on "More Actions" and select "Virtual Device Manager".')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"By default, there will be a Pixel 3 device available. However, you can create a new device if you wish to test on different devices.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'Click on the "Create Device" button to create a new virtual device.')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Choose a device that you wish to test on. For example, select the Pixel 4 device where the Play Store icon is displayed.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Select the Android API level. For example, select the latest API level (API 34).")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'Provide a name for your virtual device (e.g., "Code Evolution Test") and click "Finish" on the verify configuration screen.')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This will create a Pixel 4 virtual device in Android Studio.")))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Run the device by clicking on the play button.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"With the Android emulator running in the background, return to VS Code."),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'Press "A" to run our application on the opened device.')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This will install Expo Go on the virtual device and launch your application.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Within a few seconds, you will see the Expo app running on the virtual device.")))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Try changing the text in ",(0,o.kt)("inlineCode",{parentName:"p"},"app.js"),' to "Hello from Android".'),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"You will notice the text reflecting right away.")))),(0,o.kt)("h4",{id:"conclusion-and-next-steps"},"Conclusion and Next Steps"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"These are the different methods for running an Expo app on your physical device, an iOS simulator, or an Android emulator.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Throughout the series, we will primarily focus on running our app on the iOS simulator and Android emulator.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"However, if you prefer, you can also run it on your own physical device.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In the next section, let's take a look at the core components React Native offers to build native mobile applications.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If you're enjoying the content, please leave a like and subscribe to the channel. I'll see you in the next video."))),(0,o.kt)("h2",{id:"section-2-components"},"Section 2: Components"),(0,o.kt)("blockquote",null),(0,o.kt)("h3",{id:"-core-components"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Core Components"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"the-core-components-in-react-native"},"the core components in React Native"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In this section, we will explore the core components in React Native.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"When we use React to create web user interfaces, we often utilize HTML tags such as ",(0,o.kt)("inlineCode",{parentName:"p"},"<div>")," , ",(0,o.kt)("inlineCode",{parentName:"p"},"<span>")," , and ",(0,o.kt)("inlineCode",{parentName:"p"},"<p>")," .")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'Here\'s an example React component that renders "Hello, World!" in the browser using ',(0,o.kt)("inlineCode",{parentName:"p"},"<div>")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"<p>")," tags."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nconst HelloWorld = () => {\n  return (\n    <div>\n      <p>Hello, World!</p>\n    </div>\n  )\n}\nexport default HelloWorld\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"It's crucial to note that JSX elements we write for the web are specific to the browser's understanding of HTML.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"However, when working with React Native, these elements won't work because React Native does not incorporate the concept of a Document Object Model (DOM).")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'In Android and iOS development, a fundamental building block called a "View" is employed for user interfaces.')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"A view is a small rectangular element on the screen that can display text, images, or respond to user input.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In Android development, views are written in Kotlin or Java, while in iOS development, Swift or Objective-C is used.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"With React Native, this process becomes simpler as you can create these views using JavaScript through React components. At runtime, React Native generates the corresponding Android and iOS views for these components.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'React Native offers a collection of essential rebuilt components known as "Core Components" that are readily available for building your native app\'s user interface.'))),(0,o.kt)("h4",{id:"core-components-table"},"Core Components Table"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"React Native Core Component"),(0,o.kt)("th",{parentName:"tr",align:null},"Android Equivalent"),(0,o.kt)("th",{parentName:"tr",align:null},"iOS Equivalent"),(0,o.kt)("th",{parentName:"tr",align:null},"Web Equivalent")))),(0,o.kt)("p",null,"| View | View | UIView | ",(0,o.kt)("inlineCode",{parentName:"p"},"<div>")," |\n| Text | TextView | UILabel | ",(0,o.kt)("inlineCode",{parentName:"p"},"<p>")," |\n| Image | ImageView | UIImageView | ",(0,o.kt)("inlineCode",{parentName:"p"},"<img>")," |\n| TextInput | EditText | UITextField | ",(0,o.kt)("inlineCode",{parentName:"p"},"<input>")," |\n| ScrollView | ScrollView | UIScrollView | ",(0,o.kt)("inlineCode",{parentName:"p"},"<div>")," |\n| Button | Button | UIButton | ",(0,o.kt)("inlineCode",{parentName:"p"},"<button>")," |"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Pause the video and take a good look at each row and column in this table.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"A notable difference between creating React components for the web and React Native is that in React Native, you need to import core components from the React Native Library, ..."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text } from 'react-native' /// import core components from the React Native Library\nconst MyComponent = () => {\n  return (\n    <View>\n      <Text>Hello, World!</Text>\n    </View>\n  )\n}\nexport default MyComponent\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"whereas in React for web development, you don't import HTML elements like ",(0,o.kt)("inlineCode",{parentName:"p"},"<div>")," , ",(0,o.kt)("inlineCode",{parentName:"p"},"<span>")," , or ",(0,o.kt)("inlineCode",{parentName:"p"},"<p>"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Before we proceed, it's important to quickly highlight a point about styling. We will cover styling in detail in the next section, but for this section, we will apply some basic inline styles that might be familiar if you have written HTML and CSS for the web."))),(0,o.kt)("h4",{id:"conclusion-1"},"Conclusion"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"With an understanding of what core components are in React Native, let's take a closer look at the most important ones in the next video.")),(0,o.kt)("h3",{id:"-view-component"},(0,o.kt)("strong",{parentName:"h3"},"=>")," View Component"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The View component is a fundamental code component in React Native.It serves as a building block for creating user interfaces.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The View component functions as a container that supports layouts using flexbox styling, touch handling, and accessibility controls.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In web development terms, the View component can be compared to the div tag.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"When working with React Native, the View component is typically nested inside other views and can have zero or more children of any type.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"It provides the structure and organization for other components in the UI."))),(0,o.kt)("h4",{id:"setting-up-the-project"},"Setting up the Project"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Create a new Expo project using the command")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npx create-expo-app core-components\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Make sure you are running the latest version of Expo (version 49) by checking the package.json file.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Start the development server by running the command"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm start\n")),(0,o.kt)("h4",{id:"ios-and-android-simulators"},"ios and android simulators"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'Open the iOS simulator by pressing the key "I" in the terminal.')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Open the Android emulator in Android Studio.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'Run the app on the Android emulator by pressing the key "A" in the terminal.'))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"\u203a Using Expo Go\n\u203a Press s \u2502 switch to development build\n\n\u203a Press a \u2502 open Android\n\u203a Press i \u2502 open iOS simulator\n\u203a Press w \u2502 open web\n\n\u203a Press j \u2502 open debugger\n\u203a Press r \u2502 reload app\n\u203a Press m \u2502 toggle menu\n\u203a Press o \u2502 open project code in your editor\n\n\u203a Press ? \u2502 show all commands\n\nLogs for your project will appear below. Press Ctrl+C to exit.\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Verify that the app is running on both the iOS simulator and Android emulator.")),(0,o.kt)("h4",{id:"starting-with-a-clean-slate"},"Starting with a Clean Slate"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'Delete the existing code in the "app.js" file.')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Import the View component from the React Native library.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'Define a new component called "App" and make it the default export.')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Within the JSX code, return the View component."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View } from 'react-native'\n\nfunction App() {\n  return <View>{/* Your code here */}</View>\n}\n\nexport default App\n")),(0,o.kt)("h4",{id:"displaying-the-view-component"},"Displaying the View Component"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Add a background color to the View component using inline styles.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'Set the style prop as an object and set the background color to "plum".')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Save the file and observe the iOS simulator and Android emulator."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View } from 'react-native'\n\nfunction App() {\n  return <View style={{ backgroundColor: 'plum' }}>{/* Your code here */}</View>\n}\n\nexport default App\n")),(0,o.kt)("h4",{id:"expanding-the-view-component"},"Expanding the View Component"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'Add the style property "flex: 1" to the View component.')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This will make the View component flexibly expand and take up all available space on the screen.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Save the file and observe the expanded View component."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View } from 'react-native'\n\nfunction App() {\n  return <View style={{ flex: 1, backgroundColor: 'plum' }}>{/* Your code here */}</View>\n}\n\nexport default App\n")),(0,o.kt)("h4",{id:"nesting-views-within-the-view-component"},"Nesting Views within the View Component"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Create a new View component with a light blue background color.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Specify its height and width as 200.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Duplicate the View component and change its background color to light green.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Save the file and observe the nested views within the outer View component."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View } from 'react-native'\n\nfunction App() {\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum' }}>\n      <View style={{ backgroundColor: 'lightblue', height: 200, width: 200 }} />\n      <View style={{ backgroundColor: 'lightgreen', height: 200, width: 200 }} />\n    </View>\n  )\n}\n\nexport default App\n")),(0,o.kt)("h4",{id:"summary"},"Summary"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The View component is a core component in React Native that serves as a container for other components.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"It supports layout and styling using flexbox.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Remember to import the View component before using it.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Nested views can be used to create complex user interfaces."))),(0,o.kt)("h3",{id:"-text-component"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Text Component"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-1"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The text component is a component for displaying text.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"It supports nesting, styling, and touch handling.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Depending on the target platform, ",(0,o.kt)("inlineCode",{parentName:"p"},"React Native will translate this component")," to either a UI text view for iOS, a text view for Android, or a paragraph tag for the web."))),(0,o.kt)("h4",{id:"implementing-an-example"},"Implementing an Example"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"To start, let's write some code within the outer view component.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'Delete the two nested views and instead add the text "Hello World".'))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View } from 'react-native'\n\nfunction App() {\n  return <View style={{ flex: 1, backgroundColor: 'plum' }}>Hello World</View>\n}\n\nexport default App\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"When we save the file, ",(0,o.kt)("inlineCode",{parentName:"p"},"we see an error."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This error occurs because ",(0,o.kt)("inlineCode",{parentName:"p"},"in React Native, all text nodes must be wrapped inside a text component"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Directly placing text under a view is not allowed.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This is a common error you will run into when starting with React Native.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},'To fix this error, we need to import the text component from React Native and wrap the "Hello World" text with it.')))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text } from 'react-native'\n\nfunction App() {\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum' }}>\n      <Text>Hello World</Text>\n    </View>\n  )\n}\n\nexport default App\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Once we make this change and save the file, we can now see the text being displayed in the simulator and the emulator.")),(0,o.kt)("h4",{id:"improving-the-position"},"Improving the Position"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Now the position of the text is a little awkward, so let's add some padding for now on the outer view container.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Add a padding of 60."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text } from 'react-native'\n\nfunction App() {\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <Text>Hello World</Text>\n    </View>\n  )\n}\n\nexport default App\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Save the file.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'This is much better. We\'re able to clearly see the "Hello World" text. Not perfect, but better.'))),(0,o.kt)("h4",{id:"styling-and-layout"},"Styling and Layout"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"As mentioned in the previous video, there is much more to learn about styling and layout with these components.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We will cover these topics in detail in the upcoming sections."))),(0,o.kt)("h4",{id:"nesting-text-components"},"Nesting Text Components"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Next, let's explore nesting text components.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'For example, suppose we want to display the word "Hello" in white color.')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'To achieve this, we can wrap the "Hello" text with another pair of text component tags.')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'On this inner text component, we can add a style prop, which is an object, and set the color property to a value of "white".'))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text } from 'react-native'\nfunction App() {\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <Text>\n        <Text style={{ color: 'white' }}>Hello</Text> World\n      </Text>\n    </View>\n  )\n}\nexport default App\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},'By doing this, the word "Hello" will appear in white color, while "World" remains in black.')),(0,o.kt)("h4",{id:"summary-1"},"Summary"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The text component is essential for displaying text in React Native.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Remember that every text node within a view must be wrapped with the text component.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Additionally, nesting of text components is allowed."))),(0,o.kt)("h3",{id:"-image-component"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Image Component"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-2"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The image component enables us to display various types of images including static images, network images, and images from the local disk such as the camera roll.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"React Native seamlessly translates the image component to platform-specific counterparts: UIImage view for iOS, ImageView for Android, and the image tag for the web.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let's return to VS Code and understand more."))),(0,o.kt)("h4",{id:"rendering-a-static-image"},"Rendering a Static Image"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"To begin, let's render a static image located in the assets folder.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Start by importing the image component from react native.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Next, import the image from the assets folder.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The const, let's call it logo image, and we use the required function from './assets/adaptive-icon.png'.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In the JSX code, invoke the image component and specify the source prop so image which is self-closing and we specify the source prop equal to logo image."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, Image } from 'react-native'\nconst logoImage = require('./assets/adaptive-icon.png')\n\nfunction App() {\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <Text>\n        <Text style={{ color: 'white' }}>Hello</Text> World\n      </Text>\n      <Image source={logoImage} />\n    </View>\n  )\n}\n\nexport default App\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If we save the file and check both the devices, we'll see that the image renders but appears too large.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"To fix this, let's add a width and height to the image, so style prop with 300 and height 300."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, Image } from 'react-native'\nconst logoImage = require('./assets/adaptive-icon.png')\n\nfunction App() {\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <Text>\n        <Text style={{ color: 'white' }}>Hello</Text> World\n      </Text>\n      <Image\n        source={logoImage}\n        style={{ width: 300, height: 300 }}\n      />\n    </View>\n  )\n}\n\nexport default App\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Save the file and now we can see the image within the view much better.")),(0,o.kt)("h4",{id:"loading-a-network-image"},"Loading a Network Image"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Next, let's load an image by making a network request.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Duplicate the line with the image component and change the source prop to a remote image URI.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"A convenient place to find placeholder images is picsum.photos.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Scroll down and find the URL for a square image. (",(0,o.kt)("inlineCode",{parentName:"p"},"https://picsum/photos/200"),")")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Copy and paste the URL as a string into the source attribute.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let's adjust the size to 300 by 300, (",(0,o.kt)("inlineCode",{parentName:"p"},"https://picsum/photos/300"),")"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, Image } from 'react-native'\nconst logoImage = require('./assets/adaptive-icon.png')\n\nfunction App() {\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <Text>\n        <Text style={{ color: 'white' }}>Hello</Text> World\n      </Text>\n      <Image\n        source={logoImage}\n        style={{ width: 300, height: 300 }}\n      />\n      <Image\n        source={'https://picsum.photos/200'}\n        style={{ width: 300, height: 300 }}\n      />\n    </View>\n  )\n}\n\nexport default App\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"When we save the file, we encounter a warning.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The warning is because the source prop expects a number but we have provided a string.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"When using logo image as a value we are actually passing in a number that references the image in the assets folder.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In order to specify a remote image as the source, we need to convert the value into an object and include a key called uri.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The string is set as the value for uri."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, Image } from 'react-native'\nconst logoImage = require('./assets/adaptive-icon.png')\n\nfunction App() {\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <Text>\n        <Text style={{ color: 'white' }}>Hello</Text> World\n      </Text>\n      <Image\n        source={logoImage}\n        style={{ width: 300, height: 300 }}\n      />\n      <Image\n        source={{ uri: 'https://picsum.photos/200' }}\n        style={{ width: 300, height: 300 }}\n      />\n    </View>\n  )\n}\n\nexport default App\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If we go back to our screens, we'll see the image being rendered.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"It's very important to note that ",(0,o.kt)("inlineCode",{parentName:"p"},"specifying width and height is mandatory for Network images."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"For static images, React Native can infer the dimensions from the file data."))),(0,o.kt)("h4",{id:"setting-a-background-image"},"Setting a Background Image"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Finally, let's explore setting a background image for a view.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"React Native provides a second image component called ",(0,o.kt)("inlineCode",{parentName:"p"},"imageBackground")," for this purpose.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Import it at the top and then comment out the two image components in the JSX.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Instead, add the image background component opening and closing tags.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We pass the source attribute is equal to ",(0,o.kt)("inlineCode",{parentName:"p"},"logoImage")," which is the Adaptive icon.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"And then ,as children for the image background component, Let's add a text component that says IMAGE TEXT.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Save the file and we can observe that the image appears in the background with the text overlaid on top."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, Image, ImageBackground } from 'react-native'\nconst logoImage = require('./assets/adaptive-icon.png')\n\nfunction App() {\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <Text>\n        <Text style={{ color: 'white' }}>Hello</Text> World\n      </Text>\n\n      {/* <Image source={logoImage} style={{ width: 300, height: 300 }} />\n      <Image source={{ uri: 'https://picsum.photos/200' }} style={{ width: 300, height: 300 }} /> */}\n\n      <ImageBackground source={logoImage}>\n        <Text>IMAGE TEXT</Text>\n      </ImageBackground>\n    </View>\n  )\n}\n\nexport default App\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If you want the image to occupy the entire available space, rely on the flex property.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Style Flex set to 1."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, Image, ImageBackground } from 'react-native'\nconst logoImage = require('./assets/adaptive-icon.png')\n\nfunction App() {\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <Text>\n        <Text style={{ color: 'white' }}>Hello</Text> World\n      </Text>\n\n      {/* <Image source={logoImage} style={{ width: 300, height: 300 }} />\n      <Image source={{ uri: 'https://picsum.photos/200' }} style={{ width: 300, height: 300 }} /> */}\n\n      <ImageBackground\n        source={logoImage}\n        style={{ flex: 1 }}>\n        <Text>IMAGE TEXT</Text>\n      </ImageBackground>\n    </View>\n  )\n}\n\nexport default App\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We see the image now takes up the available space.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let's not worry too much about centering the text for now, as I mentioned in every video we will cover styling and layouts in the upcoming sections."))),(0,o.kt)("h4",{id:"summary-2"},"Summary"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In summary, the image component is utilized to render images in React Native.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"You can display static images, network images, and even local images from the camera roll (although that topic is beyond the scope of this video).")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"To render an image, import the image component from React Native and specify the source prop.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"For remote images, ensure to use the URI option.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"To render a background image, utilize the image background component nesting the desired content inside."))),(0,o.kt)("h3",{id:"-scrollview-component"},(0,o.kt)("strong",{parentName:"h3"},"=>")," ScrollView Component"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-3"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"View Component:"),(0,o.kt)("p",{parentName:"li"},"The View component is similar to a div tag in web development. However, it does not scroll automatically. It is used to define the structure and layout of the content.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Image Component:"),(0,o.kt)("p",{parentName:"li"},"The Image component is used to display images in React Native. It can be static or dynamic."))),(0,o.kt)("p",null,"To demonstrate the difference between the web and React Native, we will use the View and Image components."),(0,o.kt)("h4",{id:"implementing-an-example-1"},"Implementing an Example"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Keep the outer View component and one Image component from the previous video.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Keep the static image as it is."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, Image, ImageBackground } from 'react-native'\nconst logoImage = require('./assets/adaptive-icon.png')\n\nfunction App() {\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <Image\n        source={logoImage}\n        style={{ width: 300, height: 300 }}\n      />\n    </View>\n  )\n}\n\nexport default App\n")),(0,o.kt)("h4",{id:"adding-text-component"},"Adding Text Component"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Add a lengthy Text component right after the Image component to emphasize the point.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The Text component contains some lorem ipsum text."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, Image, ImageBackground } from 'react-native'\nconst logoImage = require('./assets/adaptive-icon.png')\n\nfunction App() {\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <Image\n        source={logoImage}\n        style={{ width: 300, height: 300 }}\n      />\n      <Text>\n        Lorem ipsum, dolor sit amet consectetur adipisicing elit. Qui eligendi perspiciatis ipsam\n        eaque modi, ducimus quae similique in at voluptatum cumque! Aliquam, quisquam id, placeat\n        neque a fugiat ea quam odio, repudiandae atque iste. Nulla at quaerat exercitationem\n        blanditiis aspernatur recusandae non laudantium omnis? Accusamus eaque mollitia optio? Illo,\n        aliquam! Repellat praesentium cum, earum iste iure ipsa accusamus, expedita, temporibus\n        optio corporis eius fugiat minus consequuntur aperiam est ullam nobis rerum. Autem quibusdam\n        unde molestiae? Similique repudiandae dolorum aut nobis hic aliquid doloribus obcaecati\n        beatae, fugit temporibus! Incidunt sint at ut id consectetur necessitatibus, natus possimus\n        sequi adipisci dignissimos minima accusantium ea ducimus culpa libero assumenda! Hic\n        doloremque alias placeat inventore quibusdam vitae neque facere, tempora excepturi saepe\n        ipsa numquam, ratione aspernatur tempore nisi incidunt distinctio? Doloremque possimus,\n        accusamus recusandae iste, ut doloribus sed dolores itaque, quaerat nostrum minima voluptas\n        perferendis corporis suscipit iusto mollitia deserunt. Commodi minima totam iure?\n      </Text>\n    </View>\n  )\n}\n\nexport default App\n")),(0,o.kt)("h4",{id:"duplicating-image-component"},"Duplicating Image Component"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Duplicate the Image component by copying and pasting it.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, Image, ImageBackground } from 'react-native'\nconst logoImage = require('./assets/adaptive-icon.png')\n\nfunction App() {\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <Image\n        source={logoImage}\n        style={{ width: 300, height: 300 }}\n      />\n      <Text>\n        Lorem ipsum dolor sit amet consectetur, adipisicing elit. Mollitia id ipsa veritatis, nemo\n        ad reiciendis blanditiis consequuntur fugit officia saepe tenetur doloribus illo sed ipsam\n        natus, qui temporibus unde ratione, sapiente in tempore debitis delectus nisi harum!\n        Voluptate voluptatem nulla esse qui similique aspernatur quam culpa cumque quia\n        voluptatibus. Quis, quod ex optio tenetur deserunt saepe officiis excepturi. Maiores\n        quisquam, corrupti hic consectetur animi voluptatum libero itaque nisi eaque esse laudantium\n        et nemo fuga laborum eligendi quasi accusamus dolor iure eos quibusdam recusandae. At\n        explicabo perferendis laudantium, tempore dolorum quos beatae voluptatum a tempora, minus\n        eius eligendi impedit blanditiis nulla!\n      </Text>\n      <Image\n        source={logoImage}\n        style={{ width: 300, height: 300 }}\n      />\n    </View>\n  )\n}\n\nexport default App\n")),(0,o.kt)("h4",{id:"viewing-the-content"},"Viewing the Content"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"After saving the file and returning to the simulator or emulator, we will notice that the first image is followed by the long text and then the image again, both in iOS and Android.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"However, there is an issue - we cannot scroll down to see the full image. Clicking and dragging does not scroll."))),(0,o.kt)("h4",{id:"introducing-scrollview"},"Introducing ScrollView"),(0,o.kt)("p",null,"React Native provides the ScrollView component specifically for scrolling purposes."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Import the ScrollView component from react native.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Replace the View component with ScrollView."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, Image, ScrollView } from 'react-native'\nconst logoImage = require('./assets/adaptive-icon.png')\n\nfunction App() {\n  return (\n    <ScrollView style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <Image\n      source={logoImage}\n      style={{ width: 300, height: 300 }}\n      />\n      <Text>\n        Lorem ipsum dolor sit amet consectetur, adipisicing elit. Mollitia id ipsa veritatis, nemo\n        ad reiciendis blanditiis consequuntur fugit officia saepe tenetur doloribus illo sed ipsam\n        natus, qui temporibus unde ratione, sapiente in tempore debitis delectus nisi harum!\n        Voluptate voluptatem nulla esse qui similique aspernatur quam culpa cumque quia\n        voluptatibus. Quis, quod ex optio tenetur deserunt saepe officiis excepturi. Maiores\n        quisquam, corrupti hic consectetur animi voluptatum libero itaque nisi eaque esse laudantium\n        et nemo fuga laborum eligendi quasi accusamus dolor iure eos quibusdam recusandae. At\n        explicabo perferendis laudantium, tempore dolorum quos beatae voluptatum a tempora, minus\n        eius eligendi impedit blanditiis nulla!\n      </Text>\n      <Image source={logoImage} style={{ width: 300, height: 300 }} />\n    </ScrollView>\n  )\n")),(0,o.kt)("h4",{id:"resolving-padding-issue"},"Resolving Padding Issue"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The ScrollView component has padding by default, which causes the issue of not being able to fully see the end of the second image.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"To address this, nest the ScrollView within the View component.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This way, the ScrollView is bounded by the height of its parent, representing the entire available space with 60 pixels padding."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, Image, ScrollView } from 'react-native'\nconst logoImage = require('./assets/adaptive-icon.png')\n\nfunction App() {\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <ScrollView>\n        <Image\n          source={logoImage}\n          style={{ width: 300, height: 300 }}\n        />\n        <Text>\n          Lorem ipsum dolor sit amet consectetur, adipisicing elit. Mollitia id ipsa veritatis, nemo\n          ad reiciendis blanditiis consequuntur fugit officia saepe tenetur doloribus illo sed ipsam\n          natus, qui temporibus unde ratione, sapiente in tempore debitis delectus nisi harum!\n          Voluptate voluptatem nulla esse qui similique aspernatur quam culpa cumque quia\n          voluptatibus. Quis, quod ex optio tenetur deserunt saepe officiis excepturi. Maiores\n          quisquam, corrupti hic consectetur animi voluptatum libero itaque nisi eaque esse\n          laudantium et nemo fuga laborum eligendi quasi accusamus dolor iure eos quibusdam\n          recusandae. At explicabo perferendis laudantium, tempore dolorum quos beatae voluptatum a\n          tempora, minus eius eligendi impedit blanditiis nulla!\n        </Text>\n        <Image\n          source={logoImage}\n          style={{ width: 300, height: 300 }}\n        />\n      </ScrollView>\n    </View>\n  )\n}\n\nexport default App\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"After saving the file, the content becomes scrollable.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We can now scroll down to the end of the second image successfully."))),(0,o.kt)("h4",{id:"summary-3"},"Summary"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"unlike the div tag in web development, the View component in React Native doesn't scroll by default.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"For scrollable content, you should utilize the ScrollView component and ensure it has a bounded height."))),(0,o.kt)("h3",{id:"-button-component"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Button Component"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-4"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The Button component allows users to trigger actions similar to the button component in the web")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"However, it's important to note that the button component has platform-specific rendering for iOS and Android"))),(0,o.kt)("h4",{id:"implementing-an-example-2"},"Implementing an Example"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"First, we need to import the Button component from React Native")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Inside the View component, I'll invoke the Button component"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, Image, ScrollView, Button } from 'react-native'\nconst logoImage = require('./assets/adaptive-icon.png')\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <Button />\n    </View>\n  )\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Unlike the HTML button element, the button component in React Native is a self-closing tag with no inner text or closing tag")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"To specify the button text, we use a prop called ",(0,o.kt)("inlineCode",{parentName:"p"},"title"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'Let\'s set it it to "Press"'))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, Image, ScrollView, Button } from 'react-native'\nconst logoImage = require('./assets/adaptive-icon.png')\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <Button title='Press' />\n    </View>\n  )\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"If we save the file and take a look at the devices, we can see the button component rendered with iOS styles on iPhone 14 Pro and Android styles on the Android virtual device")),(0,o.kt)("h4",{id:"handling-the-press-event"},"Handling the Press Event"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In React Native, the button component provides an ",(0,o.kt)("inlineCode",{parentName:"p"},"onPress")," prop to handle the Press event")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'Let\'s add onPress equal to an arrow function that logs to the console "Button pressed"'))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, Image, ScrollView, Button } from 'react-native'\nconst logoImage = require('./assets/adaptive-icon.png')\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <Button\n        title='Press'\n        onPress={() => console.log('Button pressed')}\n      />\n    </View>\n  )\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"When we press the button, the event handler is triggered and we see the log message in the terminal")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The event handler can be more complex by defining a separate function and assigning it to the onPress event"))),(0,o.kt)("h4",{id:"customization-with-props"},"Customization with Props"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The third prop to highlight is the ",(0,o.kt)("inlineCode",{parentName:"p"},"color")," prop, which allows easy customization of the button color")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'Let\'s set color to "midnight blue"'))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, Image, ScrollView, Button } from 'react-native'\nconst logoImage = require('./assets/adaptive-icon.png')\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <Button\n        title='Press'\n        onPress={() => console.log('Button pressed')}\n        color='midnightblue'\n      />\n    </View>\n  )\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Now, if we take a look at the UI, we can see the button with the new color applied")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Lastly, there is the ",(0,o.kt)("inlineCode",{parentName:"p"},"disabled")," prop mainly used in form handling"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, Image, ScrollView, Button } from 'react-native'\nconst logoImage = require('./assets/adaptive-icon.png')\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <Button\n        title='Press'\n        onPress={() => console.log('Button pressed')}\n        color='midnightblue'\n        disabled\n      />\n    </View>\n  )\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"By adding the disabled prop and setting it to true by default, the button is styled as disabled and won't trigger any press events when pressed")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"It's usually better to manage a state variable to control the disabled prop value instead of directly assigning true or false"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"disabled = { state }\n")),(0,o.kt)("h4",{id:"summary-4"},"Summary"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Button")," component is used to trigger actions on press")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"You can specify the ",(0,o.kt)("inlineCode",{parentName:"p"},"title")," prop for the button text")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"onPress")," prop is used to handle the Press event")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"color")," prop is used to set the button color")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"disabled")," prop is used to disable the button"))),(0,o.kt)("h3",{id:"-pressable-component"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Pressable Component"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-5"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In the previous video, we learned about the Button component which allows us to trigger actions based on user interaction.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"However, there are times when we need to trigger actions on the press of other elements such as images or text.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"To address this requirement, React Native provides a component called ",(0,o.kt)("inlineCode",{parentName:"p"},"Pressable"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"Pressable is a wrapper component that detects various stages of press interactions on its defined children")))),(0,o.kt)("h4",{id:"implementing-an-example-3"},"Implementing an example"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let's switch back to VS Code and explore an example to better understand its usage.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Behind the scenes, I have included an Image component and a Text component. Both of these are components we've already seen in previous videos."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Button, Image, Text } from 'react-native'\nconst logoImage = require('./assets/adaptive-icon.png')\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <Button\n        title='Press'\n        onPress={() => console.log('Button pressed')}\n        color='midnightblue'\n      />\n      <Image\n        source={logoImage}\n        style={{ width: 300, height: 300 }}\n      />\n      <Text>\n        Lorem ipsum, dolor sit amet consectetur adipisicing elit. Qui eligendi perspiciatis ipsam\n        eaque modi, ducimus quae similique in at voluptatum cumque! Aliquam, quisquam id, placeat\n        neque a fugiat ea quam odio, repudiandae atque iste. Nulla at quaerat exercitationem\n        blanditiis aspernatur recusandae non laudantium omnis? Accusamus eaque mollitia optio? Illo,\n        aliquam! Repellat praesentium cum, earum iste iure ipsa accusamus, expedita, temporibus\n        optio corporis eius fugiat minus consequuntur aperiam est ullam nobis rerum. Autem quibusdam\n        unde molestiae? Similique repudiandae dolorum aut nobis hic aliquid doloribus obcaecati\n        beatae, fugit temporibus! Incidunt sint at ut id consectetur necessitatibus, natus possimus\n        sequi adipisci dignissimos minima accusantium ea ducimus culpa libero assumenda! Hic\n        doloremque alias placeat inventore quibusdam vitae neque facere\n      </Text>\n    </View>\n  )\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"If we take a look at the two devices, we have the Button from the last video, the Image component, and the long Text component.")),(0,o.kt)("h4",{id:"getting-started-with-pressable-component"},"Getting Started with Pressable Component"),(0,o.kt)("p",null,"To begin:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Import the Pressable component from React Native.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Wrap the desired elements with Pressable to detect press interactions. In our example, we'll wrap both the Image and Text components. So, the Image component is now a child of Pressable, and so is the Text component."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Button, Image, Text, Pressable } from 'react-native'\nconst logoImage = require('./assets/adaptive-icon.png')\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <Button\n        title='Press'\n        onPress={() => console.log('Button pressed')}\n        color='midnightblue'\n      />\n      <Pressable>\n        <Image\n          source={logoImage}\n          style={{ width: 300, height: 300 }}\n        />{' '}\n      </Pressable>\n      <Pressable>\n        <Text>\n          Lorem ipsum, dolor sit amet consectetur adipisicing elit. Qui eligendi perspiciatis ipsam\n          eaque modi, ducimus quae similique in at voluptatum cumque! Aliquam, quisquam id, placeat\n          neque a fugiat ea quam odio, repudiandae atque iste. Nulla at quaerat exercitationem\n          blanditiis aspernatur recusandae non laudantium omnis? Accusamus eaque mollitia optio?\n          Illo, aliquam! Repellat praesentium cum, earum iste iure ipsa accusamus, expedita,\n          temporibus optio corporis eius fugiat minus consequuntur aperiam est ullam nobis rerum.\n          Autem quibusdam unde molestiae? Similique repudiandae dolorum aut nobis hic aliquid\n          doloribus obcaecati beatae, fugit temporibus! Incidunt sint at ut id consectetur\n          necessitatibus, natus possimus sequi adipisci dignissimos minima accusantium ea ducimus\n          culpa libero assumenda! Hic doloremque alias placeat inventore quibusdam vitae neque\n          facere\n        </Text>\n      </Pressable>\n    </View>\n  )\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Similar to the Button component, the Pressable component accepts the ",(0,o.kt)("inlineCode",{parentName:"p"},"onPress")," prop to handle the press event.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let's add it with an event handler:"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Button, Image, Text, Pressable } from 'react-native'\nconst logoImage = require('./assets/adaptive-icon.png')\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <Button\n        title='Press'\n        onPress={() => console.log('Button pressed')}\n        color='midnightblue'\n      />\n\n      <Pressable onPress={() => console.log('Image pressed')}>\n        <Image\n          source={logoImage}\n          style={{ width: 300, height: 300 }}\n        />\n      </Pressable>\n      <Pressable onPress={() => console.log('Text pressed')}>\n        <Text>\n          Lorem ipsum, dolor sit amet consectetur adipisicing elit. Qui eligendi perspiciatis ipsam\n          eaque modi, ducimus quae similique in at voluptatum cumque! Aliquam, quisquam id, placeat\n          neque a fugiat ea quam odio, repudiandae atque iste. Nulla at quaerat exercitationem\n          blanditiis aspernatur recusandae non laudantium omnis? Accusamus eaque mollitia optio?\n          Illo, aliquam! Repellat praesentium cum, earum iste iure ipsa accusamus, expedita,\n          temporibus optio corporis eius fugiat minus consequuntur aperiam est ullam nobis rerum.\n          Autem quibusdam unde molestiae? Similique repudiandae dolorum aut nobis hic aliquid\n          doloribus obcaecati beatae, fugit temporibus! Incidunt sint at ut id consectetur\n          necessitatibus, natus possimus sequi adipisci dignissimos minima accusantium ea ducimus\n          culpa libero assumenda! Hic doloremque alias placeat inventore quibusdam vitae neque\n          facere\n        </Text>\n      </Pressable>\n    </View>\n  )\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Now, let's return to the simulator and verify the code. When we press the Text component, we will see the corresponding log statement.")),(0,o.kt)("h4",{id:"custom-button-using-pressable-component"},"Custom Button using Pressable Component"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If you feel that the native Button component doesn't meet your app's requirements, you can create a custom button using the Pressable component.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Just a heads up in case you want to build one from scratch."))),(0,o.kt)("h4",{id:"other-events-supported-by-pressable-component"},"Other Events Supported by Pressable Component"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In addition to ",(0,o.kt)("inlineCode",{parentName:"p"},"onPress")," , the Pressable component supports several other events you can listen to:")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"onPressIn")," is called when a press is activated.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"onLongPress")," is triggered when a press is held for longer than 500 milliseconds.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"onPressOut")," is called when the press gesture is deactivated."),(0,o.kt)("p",{parentName:"li"},"Here is a great visualization from the React Native Docs:\n",(0,o.kt)("img",{parentName:"p",src:"https://reactnative.dev/docs/assets/d_pressable_pressing.svg",alt:"Pressable Events Visualization"})),(0,o.kt)("p",{parentName:"li"},"After triggering ",(0,o.kt)("inlineCode",{parentName:"p"},"onPressIn")," , the user removes their finger, triggering ",(0,o.kt)("inlineCode",{parentName:"p"},"onPressOut")," , which is followed by ",(0,o.kt)("inlineCode",{parentName:"p"},"onPress")," ."),(0,o.kt)("p",{parentName:"li"},"However, if the user keeps their finger pressed for more than 500 milliseconds after ",(0,o.kt)("inlineCode",{parentName:"p"},"onPressIn")," , ",(0,o.kt)("inlineCode",{parentName:"p"},"onLongPress")," is triggered followed by ",(0,o.kt)("inlineCode",{parentName:"p"},"onPressOut")," ."),(0,o.kt)("p",{parentName:"li"},"As an exercise, I encourage you to add these props to the Pressable component on the Image and handle the events to ensure they trigger as expected. Let me know in the comment section if they all work as expected."))),(0,o.kt)("h3",{id:"-modal-component"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Modal Component"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-6"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Modal is a screen that overlays the app content to provide important information or prompt the user for a decision.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Since they are purposefully interruptive, make sure you use them only when necessary."))),(0,o.kt)("h4",{id:"show-and-hide-modal-on-button-press"},"Show and Hide Modal on Button Press"),(0,o.kt)("p",null,"To begin:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Import the Modal component from React Native.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Button, Text, Modal } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <Button\n        title='Press'\n        onPress={() => console.log('Button pressed')}\n        color='midnightblue'\n      />\n    </View>\n  )\n}\n")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Just before the closing View tag, define a Modal element."),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The Modal opening and closing tags act as a container, and within it, we define a View that represents the content to be presented.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Duplicate the View component from above and modify the background color to light blue.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'Inside the View component, add a Text component with the text "Modal content".')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'Add a button labeled "Close" with the color midnight blue.'))))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Button, Text, Modal } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <Button\n        title='Press'\n        onPress={() => console.log('Button pressed')}\n        color='midnightblue'\n      />\n      <Modal>\n        <View style={{ flex: 1, backgroundColor: 'lightblue', padding: 60 }}>\n          <Text>Modal content</Text>\n          <Button\n            title='Close'\n            color='midnightblue'\n          />\n        </View>\n      </Modal>\n    </View>\n  )\n}\n")),(0,o.kt)("h4",{id:"controlling-modal-visibility"},"Controlling Modal Visibility"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"By default, the Modal is always visible. We need to control its visibility based on user interaction.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"To achieve this, we require a state variable. Import the ",(0,o.kt)("inlineCode",{parentName:"p"},"useState")," hook from React")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"and within the App component, create the state variable ",(0,o.kt)("inlineCode",{parentName:"p"},"isModalVisible")," with a setter function ",(0,o.kt)("inlineCode",{parentName:"p"},"setIsModalVisible")," , and the default value for the state variable is ",(0,o.kt)("inlineCode",{parentName:"p"},"false")," ."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { useState } from 'react'\nimport { View, Button, Text, Modal } from 'react-native'\n\nexport default function App() {\n  const [isModalVisible, setIsModalVisible] = useState(false)\n\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <Button\n        title='Press'\n        onPress={() => console.log('Button pressed')}\n        color='midnightblue'\n      />\n      <Modal>\n        <View style={{ flex: 1, backgroundColor: 'lightblue', padding: 60 }}>\n          <Text>Modal content</Text>\n          <Button\n            title='Close'\n            color='midnightblue'\n          />\n        </View>\n      </Modal>\n    </View>\n  )\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Bind this variable to the ",(0,o.kt)("inlineCode",{parentName:"li"},"visible")," prop of the Modal component, so ",(0,o.kt)("inlineCode",{parentName:"li"},"visible")," is equal to ",(0,o.kt)("inlineCode",{parentName:"li"},"isModalVisible")," . Since it is ",(0,o.kt)("inlineCode",{parentName:"li"},"false")," by default, the Modal is initially hidden.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { useState } from 'react'\nimport { View, Button, Text, Modal } from 'react-native'\n\nexport default function App() {\n  const [isModalVisible, setIsModalVisible] = useState(false)\n\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <Button\n        title='Press'\n        onPress={() => console.log('Button pressed')}\n        color='midnightblue'\n      />\n      <Modal visible={isModalVisible}>\n        <View style={{ flex: 1, backgroundColor: 'lightblue', padding: 60 }}>\n          <Text>Modal content</Text>\n          <Button\n            title='Close'\n            color='midnightblue'\n          />\n        </View>\n      </Modal>\n    </View>\n  )\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"To toggle the visibility of the Modal, modify the ",(0,o.kt)("inlineCode",{parentName:"li"},"onPress")," event of the button component to call the setter function ",(0,o.kt)("inlineCode",{parentName:"li"},"setIsModalVisible")," passing in a value of ",(0,o.kt)("inlineCode",{parentName:"li"},"true")," .")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { useState } from 'react'\nimport { View, Button, Text, Modal } from 'react-native'\n\nexport default function App() {\n  const [isModalVisible, setIsModalVisible] = useState(false)\n\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <Button\n        title='Press'\n        onPress={() => setIsModalVisible(true)}\n        color='midnightblue'\n      />\n      <Modal visible={isModalVisible}>\n        <View style={{ flex: 1, backgroundColor: 'lightblue', padding: 60 }}>\n          <Text>Modal content</Text>\n          <Button\n            title='Close'\n            color='midnightblue'\n          />\n        </View>\n      </Modal>\n    </View>\n  )\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Add another event handler to the button within the Modal component to close it. So, ",(0,o.kt)("inlineCode",{parentName:"li"},"onPress")," calls the function ",(0,o.kt)("inlineCode",{parentName:"li"},"setIsModalVisible")," and we pass in ",(0,o.kt)("inlineCode",{parentName:"li"},"false")," to hide the Modal.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { useState } from 'react'\nimport { View, Button, Text, Modal } from 'react-native'\n\nexport default function App() {\n  const [isModalVisible, setIsModalVisible] = useState(false)\n\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <Button\n        title='Press'\n        onPress={() => setIsModalVisible(true)}\n        color='midnightblue'\n      />\n      <Modal visible={isModalVisible}>\n        <View style={{ flex: 1, backgroundColor: 'lightblue', padding: 60 }}>\n          <Text>Modal content</Text>\n          <Button\n            title='Close'\n            onPress={() => setIsModalVisible(false)}\n            color='midnightblue'\n          />\n        </View>\n      </Modal>\n    </View>\n  )\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'In the simulator, we have a view with a plum background and the "Press" button.')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Click the button, and the Modal will be displayed.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Click the button within the Modal, and the Modal will be hidden.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Pretty straightforward usage."))),(0,o.kt)("h4",{id:"additional-props-for-modal"},"Additional Props for Modal"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"It is recommended to include another prop called ",(0,o.kt)("inlineCode",{parentName:"li"},"onRequestClose")," where we call ",(0,o.kt)("inlineCode",{parentName:"li"},"setIsModalVisible")," passing in ",(0,o.kt)("inlineCode",{parentName:"li"},"false")," .")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { useState } from 'react'\nimport { View, Button, Text, Modal } from 'react-native'\n\nexport default function App() {\n  const [isModalVisible, setIsModalVisible] = useState(false)\n\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <Button\n        title='Press'\n        onPress={() => setIsModalVisible(true)}\n        color='midnightblue'\n      />\n      <Modal\n        visible={isModalVisible}\n        onRequestClose={() => setIsModalVisible(false)}>\n        <View style={{ flex: 1, backgroundColor: 'lightblue', padding: 60 }}>\n          <Text>Modal content</Text>\n          <Button\n            title='Close'\n            onPress={() => setIsModalVisible(false)}\n            color='midnightblue'\n          />\n        </View>\n      </Modal>\n    </View>\n  )\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"onRequestClose")," handler is triggered when the user presses the back button on Android or dismisses the Modal with a gesture on iOS.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In either of the two scenarios, we want to hide the Modal."))),(0,o.kt)("h4",{id:"animation-and-presentation-style-props"},"Animation and Presentation Style Props"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let's explore a few more props related to Modals.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"By default, the Modal abruptly appears and disappears because the ",(0,o.kt)("inlineCode",{parentName:"p"},"animationType")," prop is set to ",(0,o.kt)("inlineCode",{parentName:"p"},"none")," ."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { useState } from 'react'\nimport { View, Button, Text, Modal } from 'react-native'\n\nexport default function App() {\n  const [isModalVisible, setIsModalVisible] = useState(false)\n\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <Button\n        title='Press'\n        onPress={() => setIsModalVisible(true)}\n        color='midnightblue'\n      />\n      <Modal\n        visible={isModalVisible}\n        onRequestClose={() => setIsModalVisible(false)}\n        animationType='none'>\n        <View style={{ flex: 1, backgroundColor: 'lightblue', padding: 60 }}>\n          <Text>Modal content</Text>\n          <Button\n            title='Close'\n            onPress={() => setIsModalVisible(false)}\n            color='midnightblue'\n          />\n        </View>\n      </Modal>\n    </View>\n  )\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Set the prop to ",(0,o.kt)("inlineCode",{parentName:"li"},"slide")," , and the Modal will slide in from the bottom.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { useState } from 'react'\nimport { View, Button, Text, Modal } from 'react-native'\n\nexport default function App() {\n  const [isModalVisible, setIsModalVisible] = useState(false)\n\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <Button\n        title='Press'\n        onPress={() => setIsModalVisible(true)}\n        color='midnightblue'\n      />\n      <Modal\n        visible={isModalVisible}\n        onRequestClose={() => setIsModalVisible(false)}\n        animationType='slide'>\n        <View style={{ flex: 1, backgroundColor: 'lightblue', padding: 60 }}>\n          <Text>Modal content</Text>\n          <Button\n            title='Close'\n            onPress={() => setIsModalVisible(false)}\n            color='midnightblue'\n          />\n        </View>\n      </Modal>\n    </View>\n  )\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Alternatively, set the value to ",(0,o.kt)("inlineCode",{parentName:"li"},"fade")," , and the Modal will fade into view.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { useState } from 'react'\nimport { View, Button, Text, Modal } from 'react-native'\n\nexport default function App() {\n  const [isModalVisible, setIsModalVisible] = useState(false)\n\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <Button\n        title='Press'\n        onPress={() => setIsModalVisible(true)}\n        color='midnightblue'\n      />\n      <Modal\n        visible={isModalVisible}\n        onRequestClose={() => setIsModalVisible(false)}\n        animationType='fade'>\n        <View style={{ flex: 1, backgroundColor: 'lightblue', padding: 60 }}>\n          <Text>Modal content</Text>\n          <Button\n            title='Close'\n            onPress={() => setIsModalVisible(false)}\n            color='midnightblue'\n          />\n        </View>\n      </Modal>\n    </View>\n  )\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"There is a prop called ",(0,o.kt)("inlineCode",{parentName:"li"},"presentationStyle")," , which is set to ",(0,o.kt)("inlineCode",{parentName:"li"},"fullScreen")," by default.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { useState } from 'react'\nimport { View, Button, Text, Modal } from 'react-native'\n\nexport default function App() {\n  const [isModalVisible, setIsModalVisible] = useState(false)\n\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <Button\n        title='Press'\n        onPress={() => setIsModalVisible(true)}\n        color='midnightblue'\n      />\n      <Modal\n        visible={isModalVisible}\n        onRequestClose={() => setIsModalVisible(false)}\n        animationType='fade'\n        presentationStyle='fullScreen'>\n        <View style={{ flex: 1, backgroundColor: 'lightblue', padding: 60 }}>\n          <Text>Modal content</Text>\n          <Button\n            title='Close'\n            onPress={() => setIsModalVisible(false)}\n            color='midnightblue'\n          />\n        </View>\n      </Modal>\n    </View>\n  )\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"You can change this to either ",(0,o.kt)("inlineCode",{parentName:"li"},"formSheet")," or ",(0,o.kt)("inlineCode",{parentName:"li"},"pageSheet")," to alter the appearance. For now, set it to ",(0,o.kt)("inlineCode",{parentName:"li"},"pageSheet")," and change back the ",(0,o.kt)("inlineCode",{parentName:"li"},"animationType")," to ",(0,o.kt)("inlineCode",{parentName:"li"},"slide")," as it makes for a much better effect.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { useState } from 'react'\nimport { View, Button, Text, Modal } from 'react-native'\n\nexport default function App() {\n  const [isModalVisible, setIsModalVisible] = useState(false)\n\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <Button\n        title='Press'\n        onPress={() => setIsModalVisible(true)}\n        color='midnightblue'\n      />\n      <Modal\n        visible={isModalVisible}\n        onRequestClose={() => setIsModalVisible(false)}\n        animationType='slide'\n        presentationStyle='pageSheet'>\n        <View style={{ flex: 1, backgroundColor: 'lightblue', padding: 60 }}>\n          <Text>Modal content</Text>\n          <Button\n            title='Close'\n            onPress={() => setIsModalVisible(false)}\n            color='midnightblue'\n          />\n        </View>\n      </Modal>\n    </View>\n  )\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"presentationStyle")," prop only affects iOS and ",(0,o.kt)("inlineCode",{parentName:"li"},"not Android"),".")),(0,o.kt)("h4",{id:"exercise-implementing-modal-props"},"Exercise: Implementing Modal Props"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"As an exercise, open an iPad simulator and toggle between ",(0,o.kt)("inlineCode",{parentName:"p"},"formSheet")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"pageSheet")," values for the ",(0,o.kt)("inlineCode",{parentName:"p"},"presentationStyle")," prop.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let me know in the comment section if you were successful in implementing it."))),(0,o.kt)("h4",{id:"summary-5"},"Summary"),(0,o.kt)("p",null,"To summarize what we have learned:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The Modal component in React Native allows us to present important information or prompt user decisions.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"You can define a Modal using the Modal component with the desired content nested as its children.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The visibility of the Modal can be controlled using the ",(0,o.kt)("inlineCode",{parentName:"p"},"visible")," prop, and the ",(0,o.kt)("inlineCode",{parentName:"p"},"onRequestClose")," callback is used to close the Modal when it is dismissed through hardware interaction.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"animationType")," prop to add fancier appearance transitions to the Modal, and the ",(0,o.kt)("inlineCode",{parentName:"p"},"presentationStyle")," prop in iOS to modify its presentation."))),(0,o.kt)("h3",{id:"-statusbar-component"},(0,o.kt)("strong",{parentName:"h3"},"=>")," StatusBar component"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-7"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Welcome back for our next component. Let's take a look at the status part component in React Native.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The status bar component provides control over the application's status bar, which is the area typically located at the top of the screen.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The status bar displays various information such as the current time, Wi-Fi and network status, battery level, and other status icons.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Now, our focus will be on the top section of the two devices. You can see they are transparent to begin with."))),(0,o.kt)("h4",{id:"code-example"},"Code Example"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"let's now import the statusBar component")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"and within the view component invoke status bar"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, StatusBar } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <StatusBar />\n    </View>\n  )\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"When we save the file, there is no visible change in iOS, but in Android, it adds a status bar component with a dark background.")),(0,o.kt)("h4",{id:"modifying-appearance"},"Modifying Appearance"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let's now modify its appearance by adding some props:"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Set the background color using the backgroundColor prop. For example, backgroundColor: 'lightgreen' (specific to Android).")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, StatusBar } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <StatusBar backgroundColor='lightgreen' />\n    </View>\n  )\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Please note that this prop is specific to Android. The iOS simulator has no background color, while the Android device shows a green background.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Although we can't change the background color on iOS, we can adjust the text color on both platforms.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The prop to control the text color is called",(0,o.kt)("inlineCode",{parentName:"p"}," barStyle")," , and its default value is ",(0,o.kt)("inlineCode",{parentName:"p"},"default")," ."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, StatusBar } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <StatusBar\n        backgroundColor='lightgreen'\n        barStyle='default'\n      />\n    </View>\n  )\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This corresponds to dark text on iOS and light text on Android.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Currently, we see black text on iOS and white text on Android.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We can change the value of barStyle to ",(0,o.kt)("inlineCode",{parentName:"p"},"dark-content")," , which results in black text on both platforms,")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"or ",(0,o.kt)("inlineCode",{parentName:"p"},"light-content")," , which gives us white text on both platforms."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, StatusBar } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <StatusBar\n        backgroundColor='lightgreen'\n        barStyle='dark-content'\n      />\n    </View>\n  )\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Depending on your application's background color, choose the appropriate value to ensure good visibility and contrast.")),(0,o.kt)("h4",{id:"visibility-and-hidden-prop"},"Visibility and Hidden Prop"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Speaking of visibility, you can use the ",(0,o.kt)("inlineCode",{parentName:"li"},"hidden")," prop to hide the status bar.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, StatusBar } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <StatusBar\n        backgroundColor='lightgreen'\n        barStyle='dark-content'\n        hidden\n      />\n    </View>\n  )\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Add the hidden prop, and you'll notice that the status bar is now hidden.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"As an exercise, I encourage you to try toggling the visibility of the status bar by using a state variable and a button click event, similar to how you control the visibility of a modal."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { useState } from 'react'\nimport { View, StatusBar, Button, Text } from 'react-native'\n\nexport default function App() {\n  const [isStatusBarHidden, setIsStatusBarHidden] = useState(false)\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <StatusBar\n        backgroundColor='lightgreen'\n        barStyle='dark-content'\n        hidden={isStatusBarHidden}\n      />\n      <Button\n        title='Hidden'\n        onPress={() => setIsStatusBarHidden(true)}\n        color='midnightblue'\n      />\n      <Text> </Text>\n      <Button\n        title='Visible'\n        onPress={() => setIsStatusBarHidden(false)}\n        color='midnightblue'\n      />\n    </View>\n  )\n}\n")),(0,o.kt)("h4",{id:"summary-6"},"Summary"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"To summarize, the status bar component allows you to control the application's status bar.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"You can adjust the background color on Android using the backgroundColor prop,")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"change the text color using the barStyle prop,")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"and toggle visibility using the hidden prop."))),(0,o.kt)("h3",{id:"-activityindicator-component"},(0,o.kt)("strong",{parentName:"h3"},"=>")," ActivityIndicator Component"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-8"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In this video, let's take a look at the ActivityIndicator component.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The ActivityIndicator component displays a circular loading indicator.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"It is used to inform users about the status of ongoing processes, such as loading an app, submitting a form, or saving updates."))),(0,o.kt)("h4",{id:"usage"},"Usage"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"To begin, import the ActivityIndicator component from React Native and place it within a view.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { useState } from 'react'\nimport { View, ActivityIndicator } from 'react-native'\n\nexport default function App() {\n  const [isStatusBarHidden, setIsStatusBarHidden] = useState(false)\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <ActivityIndicator />\n    </View>\n  )\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If we save the file, you will notice the circular loading indicator in both iOS and Android.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"They are indeed very small, and the color contrast is not great. So, I recommend you verify this on your own simulator or virtual device.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Although they have slight visual differences, they effectively convey the message that something is happening in the background."))),(0,o.kt)("h4",{id:"important-props"},"Important Props"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let's highlight three important props for this component:"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"size")," prop: By default, it is set to ",(0,o.kt)("inlineCode",{parentName:"li"},"small"),", but we can change it to ",(0,o.kt)("inlineCode",{parentName:"li"},"large"),".")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { useState } from 'react'\nimport { View, ActivityIndicator } from 'react-native'\n\nexport default function App() {\n  const [isStatusBarHidden, setIsStatusBarHidden] = useState(false)\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <ActivityIndicator />\n      <ActivityIndicator size='large' />\n    </View>\n  )\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"color")," prop: By default, it uses the system accent default color for Android and a shade of gray for iOS. However, we can customize it by setting a specific color, such as ",(0,o.kt)("inlineCode",{parentName:"li"},"midnightblue"),".")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { useState } from 'react'\nimport { View, ActivityIndicator } from 'react-native'\n\nexport default function App() {\n  const [isStatusBarHidden, setIsStatusBarHidden] = useState(false)\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <ActivityIndicator />\n      <ActivityIndicator size='large' />\n      <ActivityIndicator\n        size='large'\n        color='midnightblue'\n      />\n    </View>\n  )\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"animating")," prop: By default, it is set to ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),", which is why we see the indicator.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We can set it to ",(0,o.kt)("inlineCode",{parentName:"p"},"false")," to hide the indicator."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { useState } from 'react'\nimport { View, ActivityIndicator } from 'react-native'\n\nexport default function App() {\n  const [isStatusBarHidden, setIsStatusBarHidden] = useState(false)\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <ActivityIndicator />\n      <ActivityIndicator size='large' />\n      <ActivityIndicator\n        size='large'\n        color='midnightblue'\n      />\n      <ActivityIndicator\n        size='large'\n        color='midnightblue'\n        animating={false}\n      />\n    </View>\n  )\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Keep in mind that the recommended approach is to use a state variable for the ",(0,o.kt)("inlineCode",{parentName:"p"},"animating")," prop.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In summary, the ActivityIndicator component displays a loading indicator to inform users about ongoing background processes.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"You can customize it using the ",(0,o.kt)("inlineCode",{parentName:"p"},"size")," prop to set the size,")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"the ",(0,o.kt)("inlineCode",{parentName:"p"},"color")," prop to set a predefined or custom color,")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"and the ",(0,o.kt)("inlineCode",{parentName:"p"},"animating")," prop to control visibility."))),(0,o.kt)("h3",{id:"-alert-component"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Alert component"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-9"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The Alert component in React Native serves more as an API than a typical component. Instead of rendering it as part of JSX, you invoke methods that generate UI elements.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"When using the Alert component, you can launch another dialog with a specified title and message.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Additionally, you have the option to include a list of buttons."))),(0,o.kt)("h4",{id:"usage-example"},"Usage Example"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Import the Alert component from React Native.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Define a button within the View component in the JSX of the App component.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Import the Button component.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},'Add a title to the Button component, called "alert", and an onPress prop.')),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"The onPress prop should be an arrow function where we invoke ",(0,o.kt)("inlineCode",{parentName:"p"},"Alert.alert()"),' , passing a string ("invalid data") as the first parameter.'))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Alert, Button } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <Button\n        title='Alert'\n        onPress={() => Alert.alert('Invalid data!')}\n      />\n    </View>\n  )\n}\n")),(0,o.kt)("ol",{start:7},(0,o.kt)("li",{parentName:"ol"},"Upon pressing the button, the alert dialog will be displayed with the specified ",(0,o.kt)("inlineCode",{parentName:"li"},"title"),' ("invalid data").')),(0,o.kt)("h4",{id:"adding-a-massage"},"Adding a massage"),(0,o.kt)("ol",{start:8},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Optionally, you can specify a ",(0,o.kt)("inlineCode",{parentName:"p"},"message")," as the second parameter in the ",(0,o.kt)("inlineCode",{parentName:"p"},"Alert.alert()")," function.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"To display multiple alerts, duplicate the button and change the title and message accordingly."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Alert, Button } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <Button\n        title='Alert'\n        onPress={() => Alert.alert('Invalid data!')}\n      />\n      <Button\n        title='Alert 2'\n        onPress={() => Alert.alert('Invalid data!', 'DOB Incorrect')}\n      />\n    </View>\n  )\n}\n")),(0,o.kt)("h4",{id:"controlling-the-buttons"},"Controlling the buttons"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"on iOS you can specify any number of buttons while on Android the limit is three")),(0,o.kt)("ol",{start:10},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"To control the buttons shown in the alert, you can pass an array as the third parameter in the ",(0,o.kt)("inlineCode",{parentName:"p"},"Alert.alert()")," function.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},'Within the array, specify objects with a "text" property (e.g., "cancel") and a corresponding "onPress" handler.')),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},'The "onPress" handler can be defined as an arrow function that performs a desired action (e.g., logging to the console).'))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Alert, Button } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <Button\n        title='Alert'\n        onPress={() => Alert.alert('Invalid data!')}\n      />\n      <Button\n        title='Alert 2'\n        onPress={() => Alert.alert('Invalid data!', 'DOB Incorrect')}\n      />\n      <Button\n        title='Alert 3'\n        onPress={() =>\n          Alert.alert('Invalid data!', 'DOB Incorrect', [\n            {\n              text: 'Cancel',\n              onPress: () => console.log('Cancel pressed'),\n            },\n            {\n              text: 'OK',\n              onPress: () => console.log('OK pressed'),\n            },\n          ])\n        }\n      />\n    </View>\n  )\n}\n")),(0,o.kt)("h4",{id:"available-apis"},"Available APIs"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Alert is just one of the many available apis in react native")),(0,o.kt)("ol",{start:13},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"The appearance of the alert dialog may vary slightly between iOS and Android platforms.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"For a comprehensive list of available APIs in React Native, refer to the documentation on development APIs."))),(0,o.kt)("h3",{id:"-custom-components"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Custom Components"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-10"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"In React Native, we often combine core components to create custom user interfaces.")),(0,o.kt)("h4",{id:"create-a-custom-component"},"Create a custom component"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},'To create a custom component, start by creating a new folder called "components" within your project folder.'),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},'Inside the "components" folder, create a new file called "Greet.js".'))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},'In "Greet.js", define a basic component that accepts a "name" prop and renders JSX.'),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'Import the "View" and "Text" components from React Native.')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'Export a default function called "Greet" that accepts a "name" prop.')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'Within the function, destructure the "name" prop and return JSX with a "View" component and a nested "Text" component.')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'The "Text" component will display "Hello" followed by the \'name\' passed into the component.'))))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text } from 'react-native'\n\nexport default function Greet({ name }) {\n  return (\n    <View>\n      <Text>Hello, {name}</Text>\n    </View>\n  )\n}\n")),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},'Import the newly created "Greet" component into "App.js".')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View } from 'react-native'\nimport Greet from './components/Greet'\n\nexport default function App() {\n  return <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}></View>\n}\n")),(0,o.kt)("ol",{start:4},(0,o.kt)("li",{parentName:"ol"},'Use the "Greet" component with a "name" prop, such as "Bruce Wayne" or "Clark Kent".')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View } from 'react-native'\nimport Greet from './components/Greet'\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <Greet name='Bruce Wane' />\n      <Greet name='Clark Kent' />\n    </View>\n  )\n}\n")),(0,o.kt)("h4",{id:"summary-7"},"Summary"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'By combining core components like "View" and "Text", we can create reusable custom components.')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Custom components can include components like cards, buttons, list items, and more.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The essence of building React Native apps is combining core components to create reusable custom components that form user interfaces.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Next, we will focus on styling in React Native and explore the StyleSheet API."))),(0,o.kt)("h2",{id:"section-3-styling"},"Section 3: Styling"),(0,o.kt)("blockquote",null),(0,o.kt)("h3",{id:"-styling-react-native-apps"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Styling React Native apps"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-11"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Styling React Native apps shares similarities with styling web apps but introduces some key differences.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The most notable difference is that ",(0,o.kt)("inlineCode",{parentName:"p"},"React Native does not use CSS for styling"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Instead, you style your app using JavaScript itself.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The naming conventions for styles and their values are similar to CSS on the web but with a slight modification.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"Names are written in camel case"),", such as ",(0,o.kt)("inlineCode",{parentName:"p"},"backgroundColor")," instead of ",(0,o.kt)("inlineCode",{parentName:"p"},"background-color")," ."))),(0,o.kt)("h4",{id:"styling-approaches"},"Styling Approaches"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"The first approach")," is using inline styles with the ",(0,o.kt)("inlineCode",{parentName:"p"},"style prop"),", which is accepted by most of the core components.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We have already explored this approach in the previous section of this course, where we specified a plain JavaScript object as the value for the ",(0,o.kt)("inlineCode",{parentName:"p"},"style")," prop.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"The second approach")," involves utilizing the ",(0,o.kt)("inlineCode",{parentName:"p"},"stylesheet API")," provided by React Native.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This API allows you to define multiple styles in one place using the ",(0,o.kt)("inlineCode",{parentName:"p"},"create")," method."))),(0,o.kt)("h4",{id:"the-stylesheet-api"},"The stylesheet API"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In this section, ",(0,o.kt)("inlineCode",{parentName:"p"},"we will primarily focus on the stylesheet API"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We will explore how to style various core components and understand the nuances of applying specific styles across iOS and Android platforms."))),(0,o.kt)("h3",{id:"-the-stylesheet-api"},(0,o.kt)("strong",{parentName:"h3"},"=>")," The StyleSheet API"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-12"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In this video, we will explore the StyleSheet API which allows us to style components in React Native.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"For this section on styling, we have created a new Expo project called ",(0,o.kt)("inlineCode",{parentName:"p"},"StylingRN"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"However, you can continue working on the same core components project from the previous section if you prefer to.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Just ensure that you start with an empty ",(0,o.kt)("inlineCode",{parentName:"p"},"app.js")," file to follow along."))),(0,o.kt)("h4",{id:"using-inline-styles"},"Using inline styles"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let's start by quickly creating a component that will render some text at the top:")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"On the ",(0,o.kt)("inlineCode",{parentName:"p"},"View")," component, we add the ",(0,o.kt)("inlineCode",{parentName:"p"},"style")," prop with ",(0,o.kt)("inlineCode",{parentName:"p"},"flex")," set to ",(0,o.kt)("inlineCode",{parentName:"p"},"1")," so as to occupy the entire available space, a ",(0,o.kt)("inlineCode",{parentName:"p"},"backgroundColor")," , and finally ",(0,o.kt)("inlineCode",{parentName:"p"},"padding")," ."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <Text>StyleSheet API</Text>\n    </View>\n  )\n}\n")))),(0,o.kt)("h4",{id:"using-the-stylesheet-api"},"Using the StyleSheet API"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If we save the file and take a look at the two devices, we can see the expected UI.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This approach uses inline styling which we have already come across. Although inline styles work fine, they are not the recommended approach for styling in React Native.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In fact, you will rarely find them in a codebase.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The preferred method is to use the StyleSheet API.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let me demonstrate how to use it by replacing the inline style.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"To begin, import the StyleSheet API from React Native:"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <Text>StyleSheet API</Text>\n    </View>\n  )\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Next, below the ",(0,o.kt)("inlineCode",{parentName:"li"},"App")," component, call the ",(0,o.kt)("inlineCode",{parentName:"li"},"create")," method on the StyleSheet API, and assign the returned value to a constant called ",(0,o.kt)("inlineCode",{parentName:"li"},"styles")," :")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum', padding: 60 }}>\n      <Text>StyleSheet API</Text>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"As an argument to the ",(0,o.kt)("inlineCode",{parentName:"p"},"create")," method, provide an object that contains key-value pairs.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"You can choose any key name you want to, but it is recommended to give them semantic meaning.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"For example, I will limit ",(0,o.kt)("inlineCode",{parentName:"p"},"container")," .")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The value should be an object containing key-value pairs similar to CSS properties and values but in JavaScript.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In our case, we can extract the styles from the ",(0,o.kt)("inlineCode",{parentName:"p"},"style")," prop and assign them to the ",(0,o.kt)("inlineCode",{parentName:"p"},"container")," key.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"So cut the object and specify as the value to ",(0,o.kt)("inlineCode",{parentName:"p"},"container")," .")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Now, for the ",(0,o.kt)("inlineCode",{parentName:"p"},"style")," prop on the ",(0,o.kt)("inlineCode",{parentName:"p"},"View")," component, specify ",(0,o.kt)("inlineCode",{parentName:"p"},"styles.container")," ."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Text>StyleSheet API</Text>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    padding: 60,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"If we save the file, we can see that the UI remains the same as before, but this time we have styled our component using the StyleSheet API.")),(0,o.kt)("h4",{id:"why-use-stylesheet-api-over-inline-styles"},"why use StyleSheet API over inline styles"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Now, there are a couple of reasons:"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"First, by moving styles away from the render function, you ",(0,o.kt)("inlineCode",{parentName:"p"},"make the code easier to read and understand"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Second, naming the styles ",(0,o.kt)("inlineCode",{parentName:"p"},"adds meaning to the low-level components in the render function"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"For example, you could create a ",(0,o.kt)("inlineCode",{parentName:"p"},"title")," style and assign it to the ",(0,o.kt)("inlineCode",{parentName:"p"},"Text")," component as ",(0,o.kt)("inlineCode",{parentName:"p"},"styles.title")," ."))))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Text style={style.title}>StyleSheet API</Text>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    padding: 60,\n  },\n  title: {},\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This makes it clear that the ",(0,o.kt)("inlineCode",{parentName:"p"},"View")," represents the container and the ",(0,o.kt)("inlineCode",{parentName:"p"},"Text")," represents the title for the screen.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Finally, organizing styles in this manner ",(0,o.kt)("inlineCode",{parentName:"p"},"makes the code reusable and easier to maintain"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Imagine having the same inline styles across multiple ",(0,o.kt)("inlineCode",{parentName:"p"},"Text")," components and you need to change the font size.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"You would have to update each component style individually.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"However, by grouping the styles using the StyleSheet API, you only need to change it once as the updated ",(0,o.kt)("inlineCode",{parentName:"p"},"title")," style will be reflected across all components.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"It is also important to note that these styles can only be used within the same file.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"However, you do have the option to create a separate Global Styles file and export the styles object."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"export const styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    padding: 60,\n  },\n  title: {},\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"You can then use it in any file throughout your codebase.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This allows for reusing the styles across different components and promoting consistency in your application's visual design.")),(0,o.kt)("li",{parentName:"ul"})),(0,o.kt)("h4",{id:"creating-a-style-object-without-using-the-stylesheet-api"},"Creating a style object without using the StyleSheet API"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Well, in that case, you won't have access to autocomplete suggestions.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If I try to add a margin, you can see we don't have any autocomplete.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"But the same with the StyleSheet API, we have access to those autocomplete suggestions.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"And trust me, in React Native, having the assistance is valuable since the property names are quite different from what you're used to in the browser.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"All right, I hope you now have a clear understanding of the two methods of styling React Native components: inline styles and the StyleSheet API. The StyleSheet API is the recommended approach as it promotes writing organized, easy-to-read, and maintainable code."))),(0,o.kt)("h3",{id:"-multiple-styles"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Multiple Styles"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-13"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"in the previous video we learned about Styling with Stylesheet API")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Text style={styles.title}>StyleSheet API</Text>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    padding: 60,\n  },\n  title: {},\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The Stylesheet API is used for styling in React Native.")),(0,o.kt)("h4",{id:"applying-multiple-styles-to-a-component"},"Applying Multiple Styles to a Component"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"To begin, we'll add two boxes within our container View component, each with text:")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Light blue box")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Light green box"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View>\n        <Text>Lightblue box</Text>\n      </View>\n      <View>\n        <Text>Lightgreen box</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    padding: 60,\n  },\n  title: {},\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If we look at the two devices, we can see the text from the two boxes, but they don't resemble a box in any way. Let's add some styles to fix this.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Inside the Stylesheet API object, below the container key, we'll add two more keys:")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Light blue box: An object that sets the background color to light blue, with a height of 100 and padding of 10.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Light green box: An object that sets the background color to light green."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View>\n        <Text>Lightblue box</Text>\n      </View>\n      <View>\n        <Text>Lightgreen box</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    padding: 60,\n  },\n  lightBlueBox: {\n    backgroundColor: 'lightblue',\n    width: 100,\n    height: 100,\n    padding: 10,\n  },\n  lightGreenBox: {\n    backgroundColor: 'lightgreen',\n    width: 100,\n    height: 100,\n    padding: 10,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Now, we can use these styles for our View components.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"On the first nested View component, add the style prop and set it to ",(0,o.kt)("inlineCode",{parentName:"p"},"Styles.lightBlueBox")," .")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Repeat the process for the light green box by setting the style prop to ",(0,o.kt)("inlineCode",{parentName:"p"},"Styles.lightGreenBox")," ."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View style={styles.lightBlueBox}>\n        <Text>Lightblue box</Text>\n      </View>\n      <View style={styles.lightGreenBox}>\n        <Text>Lightgreen box</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    padding: 60,\n  },\n  lightBlueBox: {\n    backgroundColor: 'lightblue',\n    width: 100,\n    height: 100,\n    padding: 10,\n  },\n  lightGreenBox: {\n    backgroundColor: 'lightgreen',\n    width: 100,\n    height: 100,\n    padding: 10,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If we take a look at the UI, we can see that the two boxes are now displayed as expected.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Everything works great, but there is room for improvement."))),(0,o.kt)("h4",{id:"extracting-and-reusing-shared-styles"},"Extracting and Reusing Shared Styles"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"There are common styles shared between the light blue box and the light green box.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We can extract these shared styles and reuse them in React Native.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let's refactor the styles:")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'Start with a key called "box" and extract width, height, and padding into this new box.')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'Change "light blue box" to "light blue background" and set the background color to light blue.')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'Similarly, change "light green box" to "light green background" and set the background color to light green.'))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View style={styles.lightBlueBox}>\n        <Text>Lightblue box</Text>\n      </View>\n      <View style={styles.lightGreenBox}>\n        <Text>Lightgreen box</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    padding: 60,\n  },\n  box: {\n    width: 100,\n    height: 100,\n    padding: 10,\n  },\n  lightBlueBg: {\n    backgroundColor: 'lightblue',\n  },\n  lightGreenBg: {\n    backgroundColor: 'lightgreen',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Now, we have separated the common styles from the colors.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'The light blue box is a combination of "box" with "light blue background", while the light green box is a combination of "box" and "light green background".'))),(0,o.kt)("h4",{id:"specify-multiple-styles-for-a-component"},"specify multiple styles for a component"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"To specify multiple styles for a component, we use an array of styles.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"For the light blue box, we use an array as the value to the style prop and specify ",(0,o.kt)("inlineCode",{parentName:"p"},"styles.box, styles.lightBlueBg")," .")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Similarly, for the light green box, we specify an array ",(0,o.kt)("inlineCode",{parentName:"p"},"styles.box, styles.lightGreenBg")," ."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View style={[styles.box, styles.lightBlueBg]}>\n        <Text>Lightblue box</Text>\n      </View>\n      <View style={[styles.box, styles.lightGreenBg]}>\n        <Text>Lightgreen box</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    padding: 60,\n  },\n  box: {\n    width: 100,\n    height: 100,\n    padding: 10,\n  },\n  lightBlueBg: {\n    backgroundColor: 'lightblue',\n  },\n  lightGreenBg: {\n    backgroundColor: 'lightgreen',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If we now take a look at the two devices, we can see that the two boxes are still rendering as expected (light blue and light green).")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The styles, however, are written in a much more organized manner."))),(0,o.kt)("h4",{id:"the-last-style-in-the-array-takes-precedence"},"the last style in the array takes precedence"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"One important point to note is that when merging different styles, the last style in the array takes ",(0,o.kt)("inlineCode",{parentName:"p"},"precedence"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'Even if we add a background color "pink" to the "box" style,'))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"const styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    padding: 60,\n  },\n  box: {\n    width: 100,\n    height: 100,\n    padding: 10,\n    backgroundColor: 'pink',\n  },\n  lightBlueBg: {\n    backgroundColor: 'lightblue',\n  },\n  lightGreenBg: {\n    backgroundColor: 'lightgreen',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"the boxes will continue to render with their respective colors.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"However, if we change the order in the array so that ",(0,o.kt)("inlineCode",{parentName:"p"},"Styles.box")," is the last element,"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View>\n        <Text style={[styles.lightBlueBg, styles.box]}>Lightblue box</Text>\n      </View>\n      <View>\n        <Text style={[styles.box, styles.lightGreenBg]}>Lightgreen box</Text>\n      </View>\n    </View>\n  )\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"we can see that the box color is now pink instead of light blue.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"When merging the background color from the two styles, the value from the last element in the array takes precedence."))),(0,o.kt)("h4",{id:"to-summarize"},"To summarize"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"You can specify multiple styles using arrays in tags.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"When merging styles, the value from the last style in the array takes precedence."))),(0,o.kt)("h3",{id:"-box-model"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Box Model"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-14"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In this video, let's take a look at the different styles applicable in relation to the CSS Box model.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"As you may already know, ",(0,o.kt)("inlineCode",{parentName:"p"},"the CSS Box model represents a box that encloses every HTML element consisting of margins, borders, padding, and the actual content"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Interestingly, ",(0,o.kt)("inlineCode",{parentName:"p"},"these properties are also applicable to React Native components"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let's delve into the specifics of these properties in this video."))),(0,o.kt)("h4",{id:"height-and-width-properties"},"Height and Width Properties"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"To begin, let's discuss the height and width properties.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"These properties have already been covered in the previous videos of the series.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"They're used to define the dimensions of a component.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"It is important to note that ",(0,o.kt)("inlineCode",{parentName:"p"},"in React Native, all dimensions are unitless")," and represent density independent pixels.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"No specific units like Rems or pixels are required.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In our example, both the width and height are set to 100."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View>\n        <Text style={[styles.lightBlueBg, styles.box]}>Lightblue box</Text>\n      </View>\n      <View>\n        <Text style={[styles.box, styles.lightGreenBg]}>Lightgreen box</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    padding: 60,\n  },\n  box: {\n    width: 100,\n    height: 100,\n    padding: 10,\n  },\n  lightBlueBg: {\n    backgroundColor: 'lightblue',\n  },\n  lightGreenBg: {\n    backgroundColor: 'lightgreen',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"But what you can do is specify percentage values.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"when the parent's dimensions are defined. Child components can have percentage dimensions"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In this case, since the container has a flex value of 1, occupying the entire available screen space, we can set the Box's width and height to 25 percent."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View>\n        <Text style={[styles.lightBlueBg, styles.box]}>Lightblue box</Text>\n      </View>\n      <View>\n        <Text style={[styles.box, styles.lightGreenBg]}>Lightgreen box</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    padding: 60,\n  },\n  box: {\n    width: '25%',\n    height: '25%',\n    padding: 10,\n  },\n  lightBlueBg: {\n    backgroundColor: 'lightblue',\n  },\n  lightGreenBg: {\n    backgroundColor: 'lightgreen',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"As a result, you can observe that the Box width and height now account for 25 percent of the apparent container's width and height, respectively.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Together, the two boxes occupy fifty percent of the available height and 25 percent of the available width.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"So this covers the width and height aspects of the element."))),(0,o.kt)("h4",{id:"padding"},"Padding"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Moving on, let's talk about padding.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Similar to CSS for the web, ",(0,o.kt)("inlineCode",{parentName:"p"},"React Native allows us to specify padding in all four directions."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Additionally, there are a few properties in React Native that you should be aware of.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"You can individually set padding in the horizontal and vertical directions using ",(0,o.kt)("inlineCode",{parentName:"p"},"paddingHorizontal")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"paddingVertical")," .")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"So, let's comment out padding and instead add ",(0,o.kt)("inlineCode",{parentName:"p"},"paddingHorizontal: 10")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"paddingVertical: 20")," . Take a look at the UI,"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View style={[styles.box, styles.lightBlueBg]}>\n        <Text>Lightblue box</Text>\n      </View>\n      <View style={[styles.box, styles.lightGreenBg]}>\n        <Text>Lightgreen box</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    padding: 60,\n  },\n\n  box: {\n    width: 100,\n    height: 100,\n    // width: '25%',\n    // height: '25%',\n    // padding: 10,\n    paddingHorizontal: 10,\n    paddingVertical: 20,\n  },\n  lightBlueBg: {\n    backgroundColor: 'lightblue',\n  },\n  lightGreenBg: {\n    backgroundColor: 'lightgreen',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"and you will see the styles work as expected.")),(0,o.kt)("h4",{id:"margin"},"Margin"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The margin property also functions similarly to its CSS counterpart, and in React Native, we can utilize ",(0,o.kt)("inlineCode",{parentName:"p"},"marginHorizontal")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"marginVertical")," as well.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"So, ",(0,o.kt)("inlineCode",{parentName:"p"},"margin: 10")," works completely fine, but we can also have ",(0,o.kt)("inlineCode",{parentName:"p"},"marginVertical: 10")," . Take a look at the UI,"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View style={[styles.box, styles.lightBlueBg]}>\n        <Text>Lightblue box</Text>\n      </View>\n      <View style={[styles.box, styles.lightGreenBg]}>\n        <Text>Lightgreen box</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    padding: 60,\n  },\n\n  box: {\n    width: 100,\n    height: 100,\n    // width: '25%',\n    // height: '25%',\n    // padding: 10,\n    paddingHorizontal: 10,\n    paddingVertical: 20,\n    // margin: 10,\n    marginVertical: 10,\n  },\n  lightBlueBg: {\n    backgroundColor: 'lightblue',\n  },\n  lightGreenBg: {\n    backgroundColor: 'lightgreen',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"and we now clearly see the spacing between the two boxes because of the vertical margin.")),(0,o.kt)("h4",{id:"borders"},"Borders"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Next, let's take a look at borders in React Native.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In traditional web CSS, we often specify the border with a shorthand property like ",(0,o.kt)("inlineCode",{parentName:"p"},"border: 2px solid purple")," .")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"However, this approach does not work in React Native.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Instead, we need to specify the properties individually.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"First, we set ",(0,o.kt)("inlineCode",{parentName:"p"},"borderWidth")," to 2. Next, we have ",(0,o.kt)("inlineCode",{parentName:"p"},"borderColor"),' , which is a string "purple". Finally, we have ',(0,o.kt)("inlineCode",{parentName:"p"},"borderStyle"),' , which is set to "solid" by default, so we don\'t need to explicitly mention it.'))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View style={[styles.box, styles.lightBlueBg]}>\n        <Text>Lightblue box</Text>\n      </View>\n      <View style={[styles.box, styles.lightGreenBg]}>\n        <Text>Lightgreen box</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    padding: 60,\n  },\n\n  box: {\n    width: 100,\n    height: 100,\n    // width: '25%',\n    // height: '25%',\n    // padding: 10,\n    paddingHorizontal: 10,\n    paddingVertical: 20,\n    // margin: 10,\n    marginVertical: 10,\n    borderWidth: 2,\n    borderColor: 'purple',\n    // borderStyle: 'solid'\n  },\n  lightBlueBg: {\n    backgroundColor: 'lightblue',\n  },\n  lightGreenBg: {\n    backgroundColor: 'lightgreen',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Take a look at the simulator, and you will see the purple border applied to both boxes.")),(0,o.kt)("h4",{id:"border-radius"},"Border Radius"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Finally, I want to highlight a nuance regarding border radius in iOS versus Android.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If we set a border radius on a text component, let's go with inline styles for now: ",(0,o.kt)("inlineCode",{parentName:"p"},"borderRadius: 5")," and this needs a background color, so ",(0,o.kt)("inlineCode",{parentName:"p"},'backgroundColor: "red" '),","))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View style={[styles.box, styles.lightBlueBg]}>\n        <Text style={{ borderRadius: 5, backgroundColor: 'red' }}>Lightblue box</Text>\n      </View>\n      <View style={[styles.box, styles.lightGreenBg]}>\n        <Text>Lightgreen box</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    padding: 60,\n  },\n\n  box: {\n    width: 100,\n    height: 100,\n    // width: '25%',\n    // height: '25%',\n    // padding: 10,\n    paddingHorizontal: 10,\n    paddingVertical: 20,\n    // margin: 10,\n    marginVertical: 10,\n    borderWidth: 2,\n    borderColor: 'purple',\n    // borderStyle: 'solid'\n  },\n  lightBlueBg: {\n    backgroundColor: 'lightblue',\n  },\n  lightGreenBg: {\n    backgroundColor: 'lightgreen',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"you will notice that it only applies to Android and not iOS.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We have the curved border in Android but not iOS.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"However, if we apply ",(0,o.kt)("inlineCode",{parentName:"p"},"borderRadius")," to the view component, so ",(0,o.kt)("inlineCode",{parentName:"p"}," borderRadius: 5"),","))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View style={[styles.box, styles.lightBlueBg]}>\n        <Text style={{ borderRadius: 5, backgroundColor: 'red' }}>Lightblue box</Text>\n      </View>\n      <View style={[styles.box, styles.lightGreenBg]}>\n        <Text>Lightgreen box</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    padding: 60,\n  },\n\n  box: {\n    width: 100,\n    height: 100,\n    // width: '25%',\n    // height: '25%',\n    // padding: 10,\n    paddingHorizontal: 10,\n    paddingVertical: 20,\n    // margin: 10,\n    marginVertical: 10,\n    borderWidth: 2,\n    borderColor: 'purple',\n    // borderStyle: 'solid'\n    borderRadius: 5,\n  },\n  lightBlueBg: {\n    backgroundColor: 'lightblue',\n  },\n  lightGreenBg: {\n    backgroundColor: 'lightgreen',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"you will observe that the boxes have rounded corners on both platforms.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This is an important distinction to keep in mind.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"Border radius is applicable to the view component across both platforms, but for the text component, it only applies to Android"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If you wish to add a border radius to text, ",(0,o.kt)("inlineCode",{parentName:"p"},"the solution is to wrap it with a view component and apply the border radius to the view component instead.")))),(0,o.kt)("p",null,"I hope you are able to slowly recognize the differences in styling between the web and React Native, as well as the variations in styling for iOS and Android platforms."),(0,o.kt)("h3",{id:"-shadow-and-elevation"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Shadow and Elevation"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-15"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In the previous video, we learned about the differences in styling between web and React Native when it comes to some Box model properties.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We also understood the nuances of applying the Border radius property for iOS and Android."))),(0,o.kt)("h4",{id:"box-shadows-in-css"},"Box Shadows in CSS"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Applying box shadows using CSS for the web is straightforward.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We specify the horizontal offset, vertical offset, blur, spread, and color."))),(0,o.kt)("h4",{id:"box-shadows-in-react-native"},"Box Shadows in React Native"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In React Native, we use a group of four properties.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let's add a new key called ",(0,o.kt)("inlineCode",{parentName:"p"},"boxShadow")," to the Styles object and specify the different shadow properties.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The first property is ",(0,o.kt)("inlineCode",{parentName:"p"},"shadowColor")," , which determines the color of the box shadow. Let's set it to ",(0,o.kt)("inlineCode",{parentName:"p"},"#333333")," .")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The second property is ",(0,o.kt)("inlineCode",{parentName:"p"},"shadowOffset")," , which accepts an object containing width and height properties with numerical values. Let's set width to 6 and height to 6.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The third property is ",(0,o.kt)("inlineCode",{parentName:"p"},"shadowOpacity")," , which sets the transparency of the box shadow. Its value ranges from 0 to 1, with 0 representing complete transparency and 1 representing complete opacity. Let's set ",(0,o.kt)("inlineCode",{parentName:"p"},"shadowOpacity")," to 0.6 for our example.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The fourth property is ",(0,o.kt)("inlineCode",{parentName:"p"},"shadowRadius")," , which accepts a number to set the blur radius. A larger value creates a larger and lighter blur, making the shadow more prominent. Let's set it to 4.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let's also change the box width and height to 250.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Next, we need to specify the box shadow in the Styles array for the light blue box."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Text style={[styles.box, styles.lightBlueBg, styles.boxShadow]}>\n        <Text style={{ borderRadius: 5, backgroundColor: 'red' }}>Lightblue box</Text>\n      </View>\n      <Text style={[styles.box, styles.lightGreenBg]}>\n        <Text>Lightgreen box</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    padding: 60,\n  },\n\n  box: {\n    width: 250,\n    height: 250,\n    // width: '25%',\n    // height: '25%',\n    // padding: 10,\n    paddingHorizontal: 10,\n    paddingVertical: 20,\n    // margin: 10,\n    marginVertical: 10,\n    borderWidth: 2,\n    borderColor: 'purple',\n    // borderStyle: 'solid'\n    borderRadius: 5,\n  },\n  lightBlueBg: {\n    backgroundColor: 'lightblue',\n  },\n  lightGreenBg: {\n    backgroundColor: 'lightgreen',\n  },\n  boxShadow: {\n    shadowColor: '333333',\n    shadowOffset: { width: 6, height: 6 },\n    shadowOpacity: 0.6,\n    shadowRadius: 4,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"When we take a look at the iOS simulator, we can see that the box shadow is applied.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"However, if we take a look at Android, there is no box shadow."))),(0,o.kt)("h4",{id:"the-elevation-property"},"the elevation property"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"There are no common styles to apply shadows in both iOS and Android.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"To add box shadows in Android, we have to use the ",(0,o.kt)("inlineCode",{parentName:"p"},"elevation")," property, which internally utilizes the Android elevation API.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let's add a new key to our Styles object called ",(0,o.kt)("inlineCode",{parentName:"p"},"androidShadow")," with a property ",(0,o.kt)("inlineCode",{parentName:"p"},"elevation")," set to 10, and let's apply this to the light green box."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View style={[styles.box, styles.lightBlueBg, styles.boxShadow]}>\n        <Text style={{ borderRadius: 5, backgroundColor: 'red' }}>Lightblue box</Text>\n      </View>\n      <View style={[styles.box, styles.lightGreenBg, styles.androidShadow]}>\n        <Text>Lightgreen box</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    padding: 60,\n  },\n\n  box: {\n    width: 250,\n    height: 250,\n    // width: '25%',\n    // height: '25%',\n    // padding: 10,\n    paddingHorizontal: 10,\n    paddingVertical: 20,\n    // margin: 10,\n    marginVertical: 10,\n    borderWidth: 2,\n    borderColor: 'purple',\n    // borderStyle: 'solid'\n    borderRadius: 5,\n  },\n  lightBlueBg: {\n    backgroundColor: 'lightblue',\n  },\n  lightGreenBg: {\n    backgroundColor: 'lightgreen',\n  },\n  boxShadow: {\n    shadowColor: '333333',\n    shadowOffset: { width: 6, height: 6 },\n    shadowOpacity: 0.6,\n    shadowRadius: 4,\n  },\n  androidShadow: {\n    elevation: 10,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"When we view the Android device, we can see the shadow on the light green box.")),(0,o.kt)("h4",{id:"shadowcolor-is-the-only-property-that-works-on-both-ios-and-android"},"shadowColor is the only property that works on both iOS and Android"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"It's also worth mentioning that ",(0,o.kt)("inlineCode",{parentName:"p"},"shadowColor")," is the only property that works on both iOS and Android.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"As an exercise, I encourage you to change the shadow color to ",(0,o.kt)("inlineCode",{parentName:"p"},"blue")," and apply it to both iOS and Android. Let me know in the comment section if it works for you."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View style={[styles.box, styles.lightBlueBg, styles.boxShadow]}>\n        <Text style={{ borderRadius: 5, backgroundColor: 'red' }}>Lightblue box</Text>\n      </View>\n      <View style={[styles.box, styles.lightGreenBg, styles.androidShadow]}>\n        <Text>Lightgreen box</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    padding: 60,\n  },\n\n  box: {\n    width: 250,\n    height: 250,\n    // width: '25%',\n    // height: '25%',\n    // padding: 10,\n    paddingHorizontal: 10,\n    paddingVertical: 20,\n    // margin: 10,\n    marginVertical: 10,\n    borderWidth: 2,\n    borderColor: 'purple',\n    // borderStyle: 'solid'\n    borderRadius: 5,\n  },\n  lightBlueBg: {\n    backgroundColor: 'lightblue',\n  },\n  lightGreenBg: {\n    backgroundColor: 'lightgreen',\n  },\n  boxShadow: {\n    shadowColor: 'blue',\n    shadowOffset: { width: 6, height: 6 },\n    shadowOpacity: 0.6,\n    shadowRadius: 4,\n  },\n  androidShadow: {\n    elevation: 20,\n    shadowColor: 'blue',\n  },\n})\n")),(0,o.kt)("h4",{id:"conclusion-2"},"Conclusion"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Shadow properties do not work in Android, and you have to rely on the ",(0,o.kt)("inlineCode",{parentName:"p"},"elevation")," property.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"There are packages available that support cross-platform shadows, but that is not the topic we want to address right now."))),(0,o.kt)("h3",{id:"-style-inheritance"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Style Inheritance"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-16"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In this final video of the section, we will explore style inheritance in React Native.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let's dive straight into the code and look at an example to better understand this concept.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Within our ",(0,o.kt)("inlineCode",{parentName:"p"},"App")," component, within the outer ",(0,o.kt)("inlineCode",{parentName:"p"},"View")," component, let's add a new ",(0,o.kt)("inlineCode",{parentName:"p"},"View")," and nest a ",(0,o.kt)("inlineCode",{parentName:"p"},"Text")," component inside it.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'The text is going to read "Style Inheritance".'))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View>\n        <Text>Style inheritance</Text>\n      </View>\n      <View style={[styles.box, styles.lightBlueBg, styles.boxShadow]}>\n        <Text style={{ borderRadius: 5, backgroundColor: 'red' }}>Lightblue box</Text>\n      </View>\n      <View style={[styles.box, styles.lightGreenBg, styles.androidShadow]}>\n        <Text>Lightgreen box</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    padding: 60,\n  },\n\n  box: {\n    width: 250,\n    height: 250,\n    // width: '25%',\n    // height: '25%',\n    // padding: 10,\n    paddingHorizontal: 10,\n    paddingVertical: 20,\n    // margin: 10,\n    marginVertical: 10,\n    borderWidth: 2,\n    borderColor: 'purple',\n    // borderStyle: 'solid'\n    borderRadius: 5,\n  },\n  lightBlueBg: {\n    backgroundColor: 'lightblue',\n  },\n  lightGreenBg: {\n    backgroundColor: 'lightgreen',\n  },\n  // boxShadow: {\n  //   shadowColor: 'blue',\n  //   shadowOffset: { width: 6, height: 6 },\n  //   shadowOpacity: 0.6,\n  //   shadowRadius: 4,\n  // },\n  androidShadow: {\n    elevation: 20,\n    shadowColor: 'blue',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"If we return to the UI, we can see the text appears in black.")),(0,o.kt)("h4",{id:"defining-styles-for-the-wrapping-view-component"},"Defining Styles for the Wrapping View Component"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Now, let's define some styles for the wrapping ",(0,o.kt)("inlineCode",{parentName:"p"},"View")," component.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In ",(0,o.kt)("inlineCode",{parentName:"p"},"styles.create")," , let's add a new key called ",(0,o.kt)("inlineCode",{parentName:"p"},"darkModeBackgroundColor")," and set it to black.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"On the new ",(0,o.kt)("inlineCode",{parentName:"p"},"View")," component, ",(0,o.kt)("inlineCode",{parentName:"p"},"style")," is equal to ",(0,o.kt)("inlineCode",{parentName:"p"},"Styles.darkModeBackgroundColor")," ."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View style={styles.darkMode}>\n        <Text>Style inheritance</Text>\n      </View>\n      <View style={[styles.box, styles.lightBlueBg, styles.boxShadow]}>\n        <Text style={{ borderRadius: 5, backgroundColor: 'red' }}>Lightblue box</Text>\n      </View>\n      <View style={[styles.box, styles.lightGreenBg, styles.androidShadow]}>\n        <Text>Lightgreen box</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    padding: 60,\n  },\n  darkMode: {\n    backgroundColor: 'black',\n  },\n\n  box: {\n    width: 250,\n    height: 250,\n    // width: '25%',\n    // height: '25%',\n    // padding: 10,\n    paddingHorizontal: 10,\n    paddingVertical: 20,\n    // margin: 10,\n    marginVertical: 10,\n    borderWidth: 2,\n    borderColor: 'purple',\n    // borderStyle: 'solid'\n    borderRadius: 5,\n  },\n  lightBlueBg: {\n    backgroundColor: 'lightblue',\n  },\n  lightGreenBg: {\n    backgroundColor: 'lightgreen',\n  },\n  // boxShadow: {\n  //   shadowColor: 'blue',\n  //   shadowOffset: { width: 6, height: 6 },\n  //   shadowOpacity: 0.6,\n  //   shadowRadius: 4,\n  // },\n  androidShadow: {\n    elevation: 20,\n    shadowColor: 'blue',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"If you now take a look at the UI, we see the ",(0,o.kt)("inlineCode",{parentName:"li"},"View")," with the dark background. However, the text is not visible since its default color is also black.")),(0,o.kt)("h4",{id:"adding-font-color"},"Adding Font Color"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let's go back to our styles and add a font color for dark mode.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"backgroundColor: 'black',")," ",(0,o.kt)("inlineCode",{parentName:"p"},"color: 'white',")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View style={styles.darkMode}>\n        <Text>Style inheritance</Text>\n      </View>\n      <View style={[styles.box, styles.lightBlueBg, styles.boxShadow]}>\n        <Text style={{ borderRadius: 5, backgroundColor: 'red' }}>Lightblue box</Text>\n      </View>\n      <View style={[styles.box, styles.lightGreenBg, styles.androidShadow]}>\n        <Text>Lightgreen box</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    padding: 60,\n  },\n  darkMode: {\n    backgroundColor: 'black',\n    color: 'white',\n  },\n\n  box: {\n    width: 250,\n    height: 250,\n    // width: '25%',\n    // height: '25%',\n    // padding: 10,\n    paddingHorizontal: 10,\n    paddingVertical: 20,\n    // margin: 10,\n    marginVertical: 10,\n    borderWidth: 2,\n    borderColor: 'purple',\n    // borderStyle: 'solid'\n    borderRadius: 5,\n  },\n  lightBlueBg: {\n    backgroundColor: 'lightblue',\n  },\n  lightGreenBg: {\n    backgroundColor: 'lightgreen',\n  },\n  // boxShadow: {\n  //   shadowColor: 'blue',\n  //   shadowOffset: { width: 6, height: 6 },\n  //   shadowOpacity: 0.6,\n  //   shadowRadius: 4,\n  // },\n  androidShadow: {\n    elevation: 20,\n    shadowColor: 'blue',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If we save the file and go back to the UI, you can see that we still don't see the text.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In CSS for the web, setting a font color on a ",(0,o.kt)("inlineCode",{parentName:"p"},"div")," tag applies the same color to nested ",(0,o.kt)("inlineCode",{parentName:"p"},"paragraph")," tags within the ",(0,o.kt)("inlineCode",{parentName:"p"},"div")," tag. This is possible due to inheritance, which is a feature in CSS.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"However, ",(0,o.kt)("inlineCode",{parentName:"p"},"when working with styles in React Native, there is no inheritance of styles from a "),"View",(0,o.kt)("inlineCode",{parentName:"p"},"component to a"),"Text",(0,o.kt)("inlineCode",{parentName:"p"}," component"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"To set the text color to white, you need to create and apply a separate style on this text component.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"For example, ",(0,o.kt)("inlineCode",{parentName:"p"},"darkModeText: { color: 'white', },"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"And apply on the text component: ",(0,o.kt)("inlineCode",{parentName:"p"},"style={Styles.darkModeText}")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View style={styles.darkMode}>\n        <Text style={styles.darkModeText}>Style inheritance</Text>\n      </View>\n      <View style={[styles.box, styles.lightBlueBg, styles.boxShadow]}>\n        <Text style={{ borderRadius: 5, backgroundColor: 'red' }}>Lightblue box</Text>\n      </View>\n      <View style={[styles.box, styles.lightGreenBg, styles.androidShadow]}>\n        <Text>Lightgreen box</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    padding: 60,\n  },\n  darkMode: {\n    backgroundColor: 'black',\n  },\n  darkModeText: {\n    color: 'white',\n  },\n\n  box: {\n    width: 250,\n    height: 250,\n    // width: '25%',\n    // height: '25%',\n    // padding: 10,\n    paddingHorizontal: 10,\n    paddingVertical: 20,\n    // margin: 10,\n    marginVertical: 10,\n    borderWidth: 2,\n    borderColor: 'purple',\n    // borderStyle: 'solid'\n    borderRadius: 5,\n  },\n  lightBlueBg: {\n    backgroundColor: 'lightblue',\n  },\n  lightGreenBg: {\n    backgroundColor: 'lightgreen',\n  },\n  // boxShadow: {\n  //   shadowColor: 'blue',\n  //   shadowOffset: { width: 6, height: 6 },\n  //   shadowOpacity: 0.6,\n  //   shadowRadius: 4,\n  // },\n  androidShadow: {\n    elevation: 20,\n    shadowColor: 'blue',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"If we return to the UI, you will see that the text now appears in white.")),(0,o.kt)("h4",{id:"understanding-bold-text-style-inheritance"},"Understanding Bold Text Style Inheritance"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Now, let's add a new style called ",(0,o.kt)("inlineCode",{parentName:"p"},"boldText")," and set ",(0,o.kt)("inlineCode",{parentName:"p"},"fontWeight")," to bold.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In the JSX, within the ",(0,o.kt)("inlineCode",{parentName:"p"},"Text"),' component right after "Style Inheritance", I\'m going to nest another ',(0,o.kt)("inlineCode",{parentName:"p"},"Text")," component.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'The text is going to read "in bold", and for the style, I\'m going to apply only the ',(0,o.kt)("inlineCode",{parentName:"p"},"boldText")," style: ",(0,o.kt)("inlineCode",{parentName:"p"},"style={Styles.boldText}")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { View, Text, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View style={styles.darkMode}>\n        <Text style={styles.darkModeText}>\n          Style inheritance<Text style={styles.boldText}> in bold</Text>\n        </Text>\n      </View>\n      <View style={[styles.box, styles.lightBlueBg, styles.boxShadow]}>\n        <Text style={{ borderRadius: 5, backgroundColor: 'red' }}>Lightblue box</Text>\n      </View>\n      <View style={[styles.box, styles.lightGreenBg, styles.androidShadow]}>\n        <Text>Lightgreen box</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    padding: 60,\n  },\n  darkMode: {\n    backgroundColor: 'black',\n  },\n  darkModeText: {\n    color: 'white',\n  },\n  boldText: {\n    fontWeight: 'bold',\n  },\n\n  box: {\n    width: 250,\n    height: 250,\n    // width: '25%',\n    // height: '25%',\n    // padding: 10,\n    paddingHorizontal: 10,\n    paddingVertical: 20,\n    // margin: 10,\n    marginVertical: 10,\n    borderWidth: 2,\n    borderColor: 'purple',\n    // borderStyle: 'solid'\n    borderRadius: 5,\n  },\n  lightBlueBg: {\n    backgroundColor: 'lightblue',\n  },\n  lightGreenBg: {\n    backgroundColor: 'lightgreen',\n  },\n  // boxShadow: {\n  //   shadowColor: 'blue',\n  //   shadowOffset: { width: 6, height: 6 },\n  //   shadowOpacity: 0.6,\n  //   shadowRadius: 4,\n  // },\n  androidShadow: {\n    elevation: 20,\n    shadowColor: 'blue',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Now, here is my question: Is the bold text styled in white and bold, or just bold? Take a moment to think about it and let me know your answer in the comment section.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If we return to the UI, we can see that the bold text is indeed both bold and white.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"Although React Native's style inheritance capabilities are limited compared to CSS, it still supports style inheritance within text subtrees"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In our case, the white color from the parent ",(0,o.kt)("inlineCode",{parentName:"p"},"Text")," component is inherited by the nested ",(0,o.kt)("inlineCode",{parentName:"p"},"Text")," component.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"So, inheritance from "),"View",(0,o.kt)("inlineCode",{parentName:"p"},"to"),"Text",(0,o.kt)("inlineCode",{parentName:"p"},"does not work, but from"),"Text",(0,o.kt)("inlineCode",{parentName:"p"},"to another nested"),"Text",(0,o.kt)("inlineCode",{parentName:"p"}," does work.")))),(0,o.kt)("h4",{id:"conclusion-3"},"Conclusion"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"With that, we conclude this section on styling in React Native.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We have seen how to add styles inline and using the stylesheet API,")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"how to add multiple styles to the same component using the array syntax,")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"the differences in styling Box model properties for the web versus React Native and for iOS versus Android.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We also had a look at shadows and elevation,")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"and finally, style inheritance.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In the next section, let's focus our attention on understanding layouts in React Native."))),(0,o.kt)("h2",{id:"section-4-layout"},"Section 4: Layout"),(0,o.kt)("blockquote",null),(0,o.kt)("h3",{id:"-layout-with-flexbox"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Layout with Flexbox"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-17"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In this section, we will dive into the world of layouts in React Native.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The core of layout design in React Native is flexbox, a powerful one-dimensional layout model used to arrange elements within a container.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"With flexbox, you have the freedom to arrange items either horizontally (left to right or right to left) or vertically (top to bottom or bottom to top).")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Additionally, you can easily control the spacing and alignment of items within the container."))),(0,o.kt)("h4",{id:"understanding-flexbox"},"Understanding Flexbox:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Flexbox consists of two main entities: the flex container and the flex items.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The parent container, usually a View component, is referred to as the ",(0,o.kt)("inlineCode",{parentName:"p"},"flex container"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The immediate children elements are called ",(0,o.kt)("inlineCode",{parentName:"p"},"flex items"),"."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"<View>\n  <View>Item 1</View>\n  <View>Item 2</View>\n  <View>Item 3</View>\n</View>\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"In the provided sample UI, the parent view acts as the flex container, and all the children views serve as flex items.")),(0,o.kt)("h4",{id:"the-axes-in-flexbox"},"The Axes in Flexbox:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"When working with flexbox, we encounter two axes: the ",(0,o.kt)("inlineCode",{parentName:"p"},"main axis")," and the ",(0,o.kt)("inlineCode",{parentName:"p"},"cross axis"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"By default,"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"the main axis runs from left to right,"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"and the cross axis is perpendicular to it"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"running from top to bottom"),".")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"However, in React Native, it is the opposite:"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"the main axis runs top to bottom"),",")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"and the cross axis runs left to right"),".")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"It is very important to remember this."))),(0,o.kt)("h4",{id:"understanding-flexbox-properties"},"Understanding Flexbox Properties:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Understanding flexbox is a straightforward process, much like learning CSS.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"You need to familiarize yourself with the various flexbox properties and understand how they function.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Once you grasp the concepts of flexbox, you'll have a solid understanding of how layouts are created in React Native.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In this section, we will focus on exploring different flexbox properties while arranging elements on the screen."))),(0,o.kt)("h3",{id:"-code-setup"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Code Setup"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-18"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In this video, we will set up the initial code that we will be working with throughout this section.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"For the section on layouts, we have created a new Expo project called RNLayout"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npx create-expo-app RNLayout\n")),(0,o.kt)("h4",{id:"step-1-creating-a-reusable-box-component"},"Step 1: Creating a Reusable Box Component:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'Within the project folder, create a new folder called "',(0,o.kt)("inlineCode",{parentName:"p"},"components"),'."')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'Inside the "components" folder, create a new file called "',(0,o.kt)("inlineCode",{parentName:"p"},"Box.js"),'."')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Define the Box custom component that will utilize the View and Text core components along with the StyleSheet API for styling.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Start by importing the required components and APIs (View, Text, and StyleSheet from React Native).")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'Next, default export a function called "box."')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"For the JSX, return the View component with the Text component nested inside to display the text box."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet } from 'react-native'\n\nexport default function Box() {\n  return (\n    <View>\n      <Text>Box</Text>\n    </View>\n  )\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Next, add the styles to give this component the appearance of a box.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'The const Styles is equal to StyleSheet.create, and we pass in an object with a key called "box" that has a background color of white and a padding of 20 pixels.')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'Also, add another key called "text" with font size 24, font weight bold, and text align center.'))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet } from 'react-native'\n\nexport default function Box() {\n  return (\n    <View>\n      <Text>Box</Text>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  box: {\n    backgroundColor: '#fff',\n    padding: 20,\n  },\n  text: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    textAlign: 'center',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"On the View component, specify style is equal to Styles.box, and on the Text component, style is equal to Styles.text.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet } from 'react-native'\n\nexport default function Box() {\n  return (\n    <View style={styles.box}>\n      <Text style={styles.text}>Box</Text>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  box: {\n    backgroundColor: '#fff',\n    padding: 20,\n  },\n  text: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    textAlign: 'center',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"With this, our Box component is now ready.")),(0,o.kt)("h4",{id:"step-2-defining-the-flex-container-in-appjs"},"Step 2: Defining the Flex Container in App.js:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let's begin by making some changes in App.js.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Remove the StatusBar import, the Text component import, and clear the contents within the View component in the JSX.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"As for the container Styles, remove all the properties.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Finally, import the Box component and include it in the JSX."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\n\nexport default function App() {\n  return <View style={styles.container}></View>\n}\n\nconst styles = StyleSheet.create({\n  container: {},\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If you now take a look at the devices, we see our Box component on an Android device but not iPhone, and this is because ",(0,o.kt)("inlineCode",{parentName:"p"},"the Box text is hidden behind the notch"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"To fix this, on the container Styles, add a top margin of 64. ",(0,o.kt)("inlineCode",{parentName:"p"},"marginTop: '64',")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box></Box>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginTop: 64,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We should now see the Box text on both the devices.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"However, the UI doesn't look appealing, and it is difficult to identify where the container is and where the box is."))),(0,o.kt)("h4",{id:"step-3-adding-props-to-the-box-component"},"Step 3: Adding Props to the Box Component:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Let's add two props to the Box component: children and style.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet } from 'react-native'\n\nexport default function Box({ children, style }) {\n  return (\n    <View style={styles.box}>\n      <Text style={styles.text}>Box</Text>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  box: {\n    backgroundColor: '#fff',\n    padding: 20,\n  },\n  text: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    textAlign: 'center',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The children prop allows the parent to control the text rendered inside the box, and the style prop allows the parent component to extend the Styles applied to the Box component.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Now, instead of rendering the text box, let's render the children prop.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"On the View component, let's specify multiple styles using the array syntax, so Styles.box, comma Style.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Also, add a white font color to the Text component."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet } from 'react-native'\n\nexport default function Box({ children, style }) {\n  return (\n    <View style={[styles.box, style]}>\n      <Text style={styles.text}>{children}</Text>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  box: {\n    backgroundColor: '#fff',\n    padding: 20,\n  },\n  text: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    color: 'white',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Back in App.js, add seven items within the container.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Copy and paste the text box 1, Box 2, and so on, representing the children prop, and the background color is what we pass to the style prop."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginTop: 64,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"These will get merged with the box styles in Box.styles.")),(0,o.kt)("h4",{id:"final-step-adding-a-border-to-the-container"},"Final Step: Adding a Border to the Container:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"I'm going to add a border to clearly identify the container at any given point.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Border width 6 and border color red."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If you now go back to the devices, we can clearly see our container in red with the seven items nested inside with different colors.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We are now ready to start learning about the different properties in flexbox."))),(0,o.kt)("h3",{id:"-flex"},(0,o.kt)("strong",{parentName:"h3"},"=>")," flex"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-19"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The flex property plays a crucial role in defining how much of a view will fill the screen along the main axis.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"It accepts an integer value greater than or equal to zero indicating the fraction of the available space the component should occupy.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In react native The View component is automatically set to display Flex by default")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"so in our case the view container is already a flex container and the boxes inside are considered Flex items"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n=>\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("h4",{id:"example-1"},"Example 1"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Replace the entire View component with a simple View that has an inline Style.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Set the background color of the View component to Plum."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={{ backgroundColor: 'plum' }}></View>\n    // <View style={styles.container}>\n    //   <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n    //   <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n    //   <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n    //   <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n    //   <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n    //   <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n    //   <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box>\n    // </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The View component only occupies enough space to accommodate its children by default.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"To make the View occupy the entire available space, add the flex property and set it to a value of 1."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={{ flex: 1, backgroundColor: 'plum' }}></View>\n    // <View style={styles.container}>\n    //   <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n    //   <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n    //   <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n    //   <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n    //   <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n    //   <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n    //   <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box>\n    // </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"we can see the plum colored background now occupies the entire available space")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"and this is a common approach in react native apps")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"adding a view component and setting the flex property to 1 to occupy all available space"))),(0,o.kt)("h4",{id:"example-2"},"Example 2"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"for the second example let's work with the code that we set up in the previous video")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    // <View style={{ flex: 1, backgroundColor: 'plum' }}></View>\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"if we save the file and take a look at the devices, we can see the space occupied by the flex container it is indicated by the red border")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"To ensure the container occupies the entire available space, set the flex property of the container to 1."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    // <View style={{ flex: 1, backgroundColor: 'plum' }}></View>\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("h4",{id:"example-3"},"Example 3"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The flex property is not limited to the flex container; it is also applicable to flex items.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Add Flex 1 to the first box component."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    // <View style={{ flex: 1, backgroundColor: 'plum' }}></View>\n    <View style={styles.container}>\n      <Box style={{ flex: 1, backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The first box now occupies all the available space within the container.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The flex value indicates the fraction of available space the component should take up.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"When Flex 1 is set on the second box,"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    // <View style={{ flex: 1, backgroundColor: 'plum' }}></View>\n    <View style={styles.container}>\n      <Box style={{ flex: 1, backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ flex: 1, backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"both box 1 and box 2 equally share the available space between them, taking up 50 percent of the available space each.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"When Flex 1 is set on the third box,"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    // <View style={{ flex: 1, backgroundColor: 'plum' }}></View>\n    <View style={styles.container}>\n      <Box style={{ flex: 1, backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ flex: 1, backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ flex: 1, backgroundColor: '#1c4c56' }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"the first three boxes each take up 33 percent of the available space.")),(0,o.kt)("h4",{id:"example-4"},"Example 4"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Remove the flex property from the third box and instead set Flex 3 on box 2.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    // <View style={{ flex: 1, backgroundColor: 'plum' }}></View>\n    <View style={styles.container}>\n      <Box style={{ flex: 1, backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ flex: 3, backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The available space is divided into one plus three, which equals four parts.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Box 1 takes 1/4 (25 percent) of the space, and box 2 takes three by four (75 percent) of the available space.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Box 2 is three times larger than box one.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"boxes that don't have the flex property will continue to take up space as dictated by the Box model properties"))),(0,o.kt)("h4",{id:"summary-8"},"Summary"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In React Native, a View component has display Flex by default.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"When you set flex 1 on a container, it takes up the entire available space.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If you set Flex on an item, it takes up a fraction or percentage of the available space.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The flex property allows for the distribution of available space among components."))),(0,o.kt)("h3",{id:"-flex-direction"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Flex Direction"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-20"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The flex Direction property establishes the main axis, which determines how the flex items are placed within the container.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"By default, the main axis flows from top to bottom, causing the items to be displayed from top to bottom in the UI.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"There are four different values that Flex Direction can accept.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"for better visualization I will comment out boxes four to seven and keep the first three boxes only"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    // <View style={{ flex: 1, backgroundColor: 'plum' }}></View>\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      {/* <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box> */}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("h4",{id:"value-1-column"},"Value 1: Column"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Column is the default value for flexDirection.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"so on the flex container if I set ",(0,o.kt)("inlineCode",{parentName:"p"},"flexDirection: 'column',")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    // <View style={{ flex: 1, backgroundColor: 'plum' }}></View>\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      {/* <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box> */}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column',\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"we see no change in the UI.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"flexDirection")," with the value of ",(0,o.kt)("inlineCode",{parentName:"p"},"column")," sets the main axis from top to bottom"))),(0,o.kt)("h4",{id:"value-2-column-reverse"},"Value 2: column-reverse"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Sets the main axis direction from bottom to top, resulting in the flex items being placed from bottom to top.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    // <View style={{ flex: 1, backgroundColor: 'plum' }}></View>\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      {/* <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box> */}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'column-reverse',\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Boxes are arranged in reverse order.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Box 1 starts at the bottom of the container."))),(0,o.kt)("h4",{id:"value-3-row"},"Value 3: row"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Sets the main axis to flow from left to right.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    // <View style={{ flex: 1, backgroundColor: 'plum' }}></View>\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      {/* <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box> */}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Items are placed from left to right.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Boxes seem to stretch from top to bottom, and we will talk about this in a different video"))),(0,o.kt)("h4",{id:"value-4-row-reverse"},"Value 4: row-reverse"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Positions the items from right to left.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    // <View style={{ flex: 1, backgroundColor: 'plum' }}></View>\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      {/* <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box> */}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row-reverse',\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Item 1 is on the right, and item 3 is on the left.")),(0,o.kt)("h4",{id:"overflow"},"Overflow"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"When all seven items are present,")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    // <View style={{ flex: 1, backgroundColor: 'plum' }}></View>\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row-reverse',\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"they simply overflow.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"we have the four boxes but we don't see boxes five six and seven"))),(0,o.kt)("h4",{id:"summary-9"},"Summary"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The Flex Direction property controls how the items are placed within the container.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The possible values are ",(0,o.kt)("inlineCode",{parentName:"p"},"column"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"column-reverse"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"row"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"row-reverse"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The Flex Direction property sets the direction of the main axis."))),(0,o.kt)("h3",{id:"-justify-content"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Justify Content"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-21"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In this video, we will focus on the justify content property, which defines the alignment along the main axis.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"let's start with the previous code"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      {/* <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box> */}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("h4",{id:"setting-justify-content"},"Setting Justify Content"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Justify content is a property you set on the container to control the alignment of its items.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let's add ",(0,o.kt)("inlineCode",{parentName:"p"},"justifyContent")," to the container styles."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      {/* <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box> */}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: '',\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("h4",{id:"default-value"},"Default Value"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"By default, justify content is set to the value ",(0,o.kt)("inlineCode",{parentName:"p"},"flex-start")," .")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This places the flex items at the beginning of the main axis, which, in this case, is at the top of the view."))),(0,o.kt)("h4",{id:"flex-start"},"Flex Start"),(0,o.kt)("p",null,"When justify content is set to ",(0,o.kt)("inlineCode",{parentName:"p"},"flex-start")," , there is no difference in the placement of the items."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      {/* <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box> */}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'flex-start',\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"They are still placed at the top of the view.")),(0,o.kt)("h4",{id:"flex-end"},"Flex End"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Setting justify content to ",(0,o.kt)("inlineCode",{parentName:"li"},"flex-end")," causes the flex items to be placed at the end of the main axis.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      {/* <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box> */}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'flex-end',\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"In this case, the items are now placed at the bottom of the view.")),(0,o.kt)("h4",{id:"center"},"Center"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"To align the content at the center of the main axis, set the value to ",(0,o.kt)("inlineCode",{parentName:"li"},"center")," .")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      {/* <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box> */}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"This will place the content in the middle of the view.")),(0,o.kt)("h4",{id:"additional-values"},"Additional Values"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Flexbox provides additional values that control how the extra space is distributed within the container.")),(0,o.kt)("h4",{id:"space-between"},"Space Between"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"One such value is ",(0,o.kt)("inlineCode",{parentName:"li"},"space-between")," .")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      {/* <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box> */}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'space-between',\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"This evenly splits the extra space left out between the flex items.")),(0,o.kt)("h4",{id:"space-around"},"Space Around"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"For scenarios where you want space before the first item and after the last item, the value is ",(0,o.kt)("inlineCode",{parentName:"li"},"space-around")," .")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      {/* <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box> */}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'space-around',\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"This adds space at the beginning and end, equal to half of the space between the flex items.")),(0,o.kt)("h4",{id:"space-evenly"},"Space Evenly"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"If you want the same space at the start and end of the items as well, the value you are looking for is ",(0,o.kt)("inlineCode",{parentName:"li"},"space-evenly")," .")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      {/* <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box> */}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'space-evenly',\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"This equally distributes the extra space within the container.")),(0,o.kt)("h4",{id:"horizontal-alignment-with-flex-direction"},"Horizontal Alignment with Flex Direction"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"It's important to note that the justify content property aligns items based on the main axis.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If the flex direction is set to row (which changes the main axis from left to right),"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      {/* <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box> */}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    justifyContent: 'flex-start',\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"justify content deals with horizontal alignment.")),(0,o.kt)("h4",{id:"summary-10"},"Summary"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In summary, the justify content property is used to align items and distribute any extra space in the container.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The alignment is always along the main axis. The possible values are ",(0,o.kt)("inlineCode",{parentName:"p"},"flex-start")," , ",(0,o.kt)("inlineCode",{parentName:"p"},"flex-end")," , ",(0,o.kt)("inlineCode",{parentName:"p"},"center")," , ",(0,o.kt)("inlineCode",{parentName:"p"},"space-between")," , ",(0,o.kt)("inlineCode",{parentName:"p"},"space-around")," , and ",(0,o.kt)("inlineCode",{parentName:"p"},"space-evenly")," ."))),(0,o.kt)("h3",{id:"-alignitems"},(0,o.kt)("strong",{parentName:"h3"},"=>")," AlignItems"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-22"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"AlignItems")," defines the default behavior for laying out flex items along the container's cross axis.")),(0,o.kt)("h4",{id:"default-value-of-align-items"},"Default Value of Align Items"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"By default"),", the value of AlignItems is set to ",(0,o.kt)("inlineCode",{parentName:"li"},"stretch"),".")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      {/* <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box> */}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: '',\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"This means the flex items will stretch the entire length of the cross axis, which typically flows from left to right.")),(0,o.kt)("h4",{id:"stretch"},"Stretch"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Setting AlignItems to ",(0,o.kt)("inlineCode",{parentName:"li"},"stretch")," explicitly doesn't result in any visible change since stretch is the default value.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      {/* <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box> */}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'stretch',\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Each box stretches from the left to the right, following the direction of the cross axis.")),(0,o.kt)("h4",{id:"flex-start-1"},"Flex Start"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The value ",(0,o.kt)("inlineCode",{parentName:"li"},"flex-start")," pushes all the items to the start of the cross axis.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      {/* <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box> */}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'flex-start',\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("h4",{id:"flex-end-1"},"Flex End"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The value ",(0,o.kt)("inlineCode",{parentName:"li"},"flex-end")," pushes the items to the end of the cross axis.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      {/* <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box> */}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'flex-end',\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("h4",{id:"center-1"},"Center"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The value ",(0,o.kt)("inlineCode",{parentName:"li"},"center")," centers the content along the cross axis.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      {/* <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box> */}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("h4",{id:"baseline"},"Baseline"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"baseline")," value aligns flex items based on their content's baseline.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00', paddingVertical: 100 }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      {/* <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box> */}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'baseline',\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"This value ensures that the text content sits on the same baseline, regardless of the height or padding of each flex item.")),(0,o.kt)("h4",{id:"summary-11"},"Summary"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In summary, the align items property is used to align items along the cross axis.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The possible values are ",(0,o.kt)("inlineCode",{parentName:"p"},"flex-start"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"flex-end"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"center"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"baseline"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"stretch")," (which is the default value)."))),(0,o.kt)("h3",{id:"-alignself"},(0,o.kt)("strong",{parentName:"h3"},"=>")," AlignSelf"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-23"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Unlike alignItems, which is applied to the container and controls the alignment of all items within it, ",(0,o.kt)("inlineCode",{parentName:"li"},"alignSelf")," is applied to individual items, allowing us to control the alignment of each item independently.")),(0,o.kt)("h4",{id:"align-self-vs-align-items"},"Align Self vs Align Items"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"alignSelf ",(0,o.kt)("inlineCode",{parentName:"p"},"values")," are similar to those used in alignItems.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let's dive into VS Code to understand more."))),(0,o.kt)("h4",{id:"flex-start-2"},"Flex Start"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The value ",(0,o.kt)("inlineCode",{parentName:"p"},"flex-start")," aligns the items at the start of the cross axis.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"For Box 1, let's reset alignSelf to ",(0,o.kt)("inlineCode",{parentName:"p"},"flex-start"),","))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00', alignSelf: 'flex-start' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"and you can observe the item being pulled to the left where the cross axis begins.")),(0,o.kt)("h4",{id:"flex-end-2"},"Flex End"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The value ",(0,o.kt)("inlineCode",{parentName:"p"},"flex-end")," aligns the item with the end of the cross axis.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Box 2 has align self as ",(0,o.kt)("inlineCode",{parentName:"p"},"flex-end"),","))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00', alignSelf: 'flex-start' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f', alignSelf: 'flex-end' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"resulting in the item being pulled to the right where the cross axis ends.")),(0,o.kt)("h4",{id:"center-2"},"Center"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"let's try ",(0,o.kt)("inlineCode",{parentName:"li"},"Center")," as the third value.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00', alignSelf: 'flex-start' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f', alignSelf: 'flex-end' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"After saving the file, you can see that Box 3 is now centered.")),(0,o.kt)("h4",{id:"stretch-1"},"Stretch"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The value ",(0,o.kt)("inlineCode",{parentName:"li"},"stretch")," stretches the item from the start to the end of the cross axis.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00', alignSelf: 'flex-start' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f', alignSelf: 'flex-end' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56', alignSelf: 'center' }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156', alignSelf: 'stretch' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"After saving the file, you can see Box 4 gets stretched from the start to the end.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"However, Boxes 5 through 7 are also stretched."))),(0,o.kt)("h4",{id:"default-value-1"},"Default Value"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The default value for align self is ",(0,o.kt)("inlineCode",{parentName:"li"},"auto"),", and it inherits its value from the align items property of the parent flex container.")),(0,o.kt)("h4",{id:"inheritance-from-align-items"},"Inheritance from Align Items"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Boxes 5 through 7 are stretched because the container has alignItems stretch as its default value.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"When alignSelf is set to Auto, it takes the value of the parent's align items property, which in this case is stretch.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Hence, items 5, 6, and 7 inherit the value stretch and stretch from the left to the right in the UI."))),(0,o.kt)("h4",{id:"summary-12"},"Summary"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In summary, the alignSelf property is used to align items individually and accepts values like ",(0,o.kt)("inlineCode",{parentName:"p"},"auto"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"flex-start"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"flex-end"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"center"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"stretch"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"When specified, it always overrides the align items value of the flex container"),"."))),(0,o.kt)("h3",{id:"-flexwrap"},(0,o.kt)("strong",{parentName:"h3"},"=>")," FlexWrap"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-24"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"This property allows us to control how flex items behave when there is limited space within the container.")),(0,o.kt)("h4",{id:"default-value-of-flex-wrap"},"Default Value of Flex Wrap"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"By default, the flex-wrap property is set to ",(0,o.kt)("inlineCode",{parentName:"p"},"no-wrap"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This means that the items will remain in a single line, even if there is not enough space.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"to demonstrate this, comment out ",(0,o.kt)("inlineCode",{parentName:"p"},"flex: 1,")," and set a ",(0,o.kt)("inlineCode",{parentName:"p"},"height: 300"),","))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    // flex: 1,\n    height: 300,\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"and you can see when there is not enough space the items overflow the container")),(0,o.kt)("h4",{id:"using-flexwrap"},"Using flexWrap"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"to prevent this overflow and handle limited space more effectively we can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"flexWrap")," property")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"the flexWrap property can accept one of ",(0,o.kt)("inlineCode",{parentName:"p"},"three possible values")))),(0,o.kt)("h4",{id:"no-wrap"},"No Wrap"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"When the flexWrap property is set to ",(0,o.kt)("inlineCode",{parentName:"li"},"nowrap"),", there is no change in the UI, and the items remain in a single line.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    // flex: 1,\n    flexWrap: 'nowrap',\n    height: 300,\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"end this is the default value")),(0,o.kt)("h4",{id:"wrap"},"Wrap"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Setting the flex-wrap property to ",(0,o.kt)("inlineCode",{parentName:"li"},"wrap")," allows the items to wrap within the container.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    // flex: 1,\n    flexWrap: 'wrap',\n    height: 300,\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The wrapping takes place only when needed, and the items are wrapped into the next row or column.")),(0,o.kt)("h4",{id:"wrap-reverse"},"Wrap Reverse"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The value ",(0,o.kt)("inlineCode",{parentName:"li"},"wrap-reverse")," places the items starting at the end of the cross axis.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    // flex: 1,\n    flexWrap: 'wrap-reverse',\n    height: 300,\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Instead of wrapping to the right column, they wrap to the previous column.")),(0,o.kt)("h4",{id:"horizontal-wrapping"},"Horizontal Wrapping"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Horizontal wrapping of items is possible by changing the ",(0,o.kt)("inlineCode",{parentName:"p"},"flex-direction")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"row"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"With flexWrap set to ",(0,o.kt)("inlineCode",{parentName:"p"},"wrap"),", you can see the items wrapping to the next row."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    // flex: 1,\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    height: 300,\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Setting the value to ",(0,o.kt)("inlineCode",{parentName:"li"},"wrap-reverse"),",( uncomment ",(0,o.kt)("inlineCode",{parentName:"li"},"flex: 1,"),"and delete the ",(0,o.kt)("inlineCode",{parentName:"li"},"height"),"),")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    flexWrap: 'wrap-reverse',\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"places the items at the end of the cross axis and wraps them to the row above.")),(0,o.kt)("h4",{id:"summary-13"},"Summary"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In summary, the flex Wrap property is a valuable tool for controlling the wrapping behavior of flex items within the container.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The possible values are ",(0,o.kt)("inlineCode",{parentName:"p"},"nowrap")," (default), ",(0,o.kt)("inlineCode",{parentName:"p"},"wrap"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"wrap-reverse"),"."))),(0,o.kt)("h3",{id:"-align-content"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Align Content"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-25"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In this tutorial, we will cover the ",(0,o.kt)("strong",{parentName:"p"},"Align Content")," property in Flexbox.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This property is used to align lines of content along the cross axis within a container."))),(0,o.kt)("h4",{id:"align-content-property-overview"},"Align Content Property Overview"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"align-content")," property aligns lines of content along the cross axis, similar to how the ",(0,o.kt)("inlineCode",{parentName:"p"},"align-items")," property aligns individual items along the cross axis.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"However, a crucial condition is that multiple columns or rows must exist within the container."))),(0,o.kt)("h4",{id:"understanding-values"},"Understanding Values"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"To better understand the different possible values, let's make adjustments in our code using VS Code.")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Set a height on the container: ",(0,o.kt)("inlineCode",{parentName:"li"},"height: 300px;")),(0,o.kt)("li",{parentName:"ol"},"Enable wrapping: ",(0,o.kt)("inlineCode",{parentName:"li"},"flex-wrap: wrap;")),(0,o.kt)("li",{parentName:"ol"},"Comment out ",(0,o.kt)("inlineCode",{parentName:"li"},"flex: 1;")," to ensure wrapping into 2 columns.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    // flex: 1,\n    height: 300,\n    flexWrap: 'wrap',\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("h4",{id:"value-1-flex-start"},"Value 1: Flex Start"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The default value for ",(0,o.kt)("inlineCode",{parentName:"p"},"align-content")," is ",(0,o.kt)("inlineCode",{parentName:"p"},"flex-start"),", which places both columns at the start of the cross axis.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The cross axis runs from left to right."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    // flex: 1,\n    height: 300,\n    flexWrap: 'wrap',\n    alignContent: 'flex-start',\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("h4",{id:"value-2-flex-end"},"Value 2: Flex End"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Setting ",(0,o.kt)("inlineCode",{parentName:"li"},"align-content")," to ",(0,o.kt)("inlineCode",{parentName:"li"},"flex-end")," pushes the content to the end of the cross axis.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    // flex: 1,\n    height: 300,\n    flexWrap: 'wrap',\n    alignContent: 'flex-end',\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("h4",{id:"value-3-center"},"Value 3: Center"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Using a value of ",(0,o.kt)("inlineCode",{parentName:"li"},"center")," for ",(0,o.kt)("inlineCode",{parentName:"li"},"align-content")," centers the content along the cross axis.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    // flex: 1,\n    height: 300,\n    flexWrap: 'wrap',\n    alignContent: 'center',\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("h4",{id:"value-4-stretch"},"Value 4: Stretch"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"stretch")," value stretches the columns from the start to the end of the cross axis.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    // flex: 1,\n    height: 300,\n    flexWrap: 'wrap',\n    alignContent: 'stretch',\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"This makes both columns take up the entire horizontal space available.")),(0,o.kt)("h4",{id:"value-5-space-between"},"Value 5: Space Between"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"space-between")," takes extra space and places it between the lines.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    // flex: 1,\n    height: 300,\n    flexWrap: 'wrap',\n    alignContent: 'space-between',\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("h4",{id:"fixing-styles-for-space-between"},"Fixing Styles for Space Between"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"You might encounter styling issues when using ",(0,o.kt)("inlineCode",{parentName:"p"},"space-between"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"To resolve this, add a fixed width and height to the box component, e.g., ",(0,o.kt)("inlineCode",{parentName:"p"},"width: 50px;")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"height: 50px;"),"."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet } from 'react-native'\n\nexport default function Box({ children, style }) {\n  return (\n    <View style={[styles.box, style]}>\n      <Text style={styles.text}>{children}</Text>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  box: {\n    backgroundColor: '#fff',\n    padding: 20,\n    width: 50,\n    height: 50,\n  },\n  text: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    color: 'white',\n  },\n})\n")),(0,o.kt)("h4",{id:"value-6-space-around"},"Value 6: Space Around"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"space-around")," distributes space around the columns.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    // flex: 1,\n    height: 300,\n    flexWrap: 'wrap',\n    alignContent: 'space-around',\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The center portion has twice the space as the edges.")),(0,o.kt)("h4",{id:"summary-14"},"Summary"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In React Native, the ",(0,o.kt)("inlineCode",{parentName:"p"},"align-content")," property aligns lines of content along the cross axis and distributes any extra spacing in the parent container.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The possible values are:")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"flex-start")," (default)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"flex-end"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"center"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"stretch"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"space-between"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"space-around")))),(0,o.kt)("p",null,"By using these values, you can control how content is aligned and distributed within a flex container."),(0,o.kt)("h3",{id:"-gap"},(0,o.kt)("strong",{parentName:"h3"},"=>")," gap"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-26"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In this video, we will delve into the flex properties that allow us to manage spacing between rows and columns in React Native.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The three main properties we will cover are ",(0,o.kt)("inlineCode",{parentName:"p"},"rowGap"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"columnGap"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"gap"),"."))),(0,o.kt)("h4",{id:"getting-started-1"},"Getting Started"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Let's jump into VS Code and explore how these properties work.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Setting Up Rows and Columns:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"First, ensure that we have multiple rows and columns of items within the container.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"To achieve this, let's:"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Comment out ",(0,o.kt)("inlineCode",{parentName:"p"},"flex: 1"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Add a ",(0,o.kt)("inlineCode",{parentName:"p"},"height")," of 300")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Set ",(0,o.kt)("inlineCode",{parentName:"p"},"flexWrap")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"wrap")))))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    // flex: 1,\n    height: 300,\n    flexWrap: 'wrap',\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"also in Box.js, comment out the width and height to te box.abs")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet } from 'react-native'\n\nexport default function Box({ children, style }) {\n  return (\n    <View style={[styles.box, style]}>\n      <Text style={styles.text}>{children}</Text>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  box: {\n    backgroundColor: '#fff',\n    padding: 20,\n    // width: 50,\n    // height: 50,\n  },\n  text: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    color: 'white',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"With these styles applied, if we examine the UI, we can observe that items are organized in rows and columns.")),(0,o.kt)("h4",{id:"row-gap-property"},"Row Gap Property"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"rowGap")," property allows us to set the gap between rows.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"For instance, if we set ",(0,o.kt)("inlineCode",{parentName:"p"},"rowGap")," to 20 and save the file,"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    // flex: 1,\n    height: 300,\n    flexWrap: 'wrap',\n    rowGap: 20,\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"we will notice a gap introduced between the rows.")),(0,o.kt)("h4",{id:"column-gap-property"},"Column Gap Property"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Similarly, the ",(0,o.kt)("inlineCode",{parentName:"p"},"columnGap")," property sets the gap between columns.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"By setting it to 30 and saving the file,"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    // flex: 1,\n    height: 300,\n    flexWrap: 'wrap',\n    rowGap: 20,\n    columnGap: 30,\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"we will see spacing between the columns.")),(0,o.kt)("h4",{id:"shorthand-gap-property"},"Shorthand Gap Property"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"To specify the same gap for both rows and columns, you can utilize the ",(0,o.kt)("inlineCode",{parentName:"p"},"gap")," property.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Set ",(0,o.kt)("inlineCode",{parentName:"p"},"gap")," to 10,")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"comment out ",(0,o.kt)("inlineCode",{parentName:"p"},"rowGap")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"columnGap"),",")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"and save the file."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    // flex: 1,\n    height: 300,\n    flexWrap: 'wrap',\n    // rowGap: 20,\n    // columnGap: 30,\n    gap: 10,\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"This results in the same smaller gap between both rows and columns.")),(0,o.kt)("h4",{id:"summary-15"},"Summary"),(0,o.kt)("p",null,"In summary:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"To set the gap between columns, use the ",(0,o.kt)("inlineCode",{parentName:"p"},"columnGap")," property.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"To set the gap between rows, use the ",(0,o.kt)("inlineCode",{parentName:"p"},"rowGap")," property.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"For a consistent gap between both rows and columns, employ the shorthand ",(0,o.kt)("inlineCode",{parentName:"p"},"gap")," property."))),(0,o.kt)("p",null,"By leveraging these properties, you can precisely control the spacing between rows and columns in your React Native layouts."),(0,o.kt)("h3",{id:"-flexbasis"},(0,o.kt)("strong",{parentName:"h3"},"=>")," flexBasis"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-27"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In this video, we'll delve into the ",(0,o.kt)("strong",{parentName:"p"},"flexBasis")," property in React Native.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"flexBasis")," property determines the initial size of a flex item before any extra space in the container is distributed.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"It provides an alternative to using the height and width properties in Flex layouts."))),(0,o.kt)("h4",{id:"understanding-flex-basis"},"Understanding Flex Basis"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let's gain a better understanding with a UI example.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"By default, flex items have an initial height based on the Box model."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"As you can see, an item's height depends on its content size and padding in the vertical direction.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"However, what if you want a specific item to be intentionally taller? For such cases, the ",(0,o.kt)("inlineCode",{parentName:"p"},"flexBasis")," property comes to the rescue."))),(0,o.kt)("h4",{id:"using-flex-basis"},"Using Flex Basis"),(0,o.kt)("p",null,'In our JSX for "Box 3", let\'s set ',(0,o.kt)("inlineCode",{parentName:"p"},"flexBasis: 140")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56', flexBasis: 140 }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'Now, when we examine the UI, you can observe that "Box 3" appears twice as tall as the other boxes.')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"You might wonder why not just use the height property to set the initial height.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let's try adding ",(0,o.kt)("inlineCode",{parentName:"p"},"height: 140"),' to "Box 4" and look at the UI.'))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56', flexBasis: 140 }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156', height: 140 }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"As you can see, the result is quite similar.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'However, an important difference arises when we want both "Box 3" and "Box 4" to take up the available space in the container.')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We've learned to achieve this by adding ",(0,o.kt)("inlineCode",{parentName:"p"},"flex: 1"),"."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56', flexBasis: 140, flex: 1 }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156', height: 140, flex: 1 }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'If we save the file and review the UI, you\'ll notice that "Box 3" is taller than "Box 4".')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This is because the available space is distributed proportionally with respect to the flexBasis, but not the height property."))),(0,o.kt)("h4",{id:"flex-basis-for-width"},"Flex Basis for Width"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"It's also important to note that flexBasis sets the initial width of an item if the parent container's flex direction is row, instead of column.")),(0,o.kt)("h4",{id:"in-summary"},"In summary"),(0,o.kt)("p",null,"the flexBasis property is a valuable tool to set the initial size of a flex item, enabling you to create intentional variations in item dimensions within your Flex layouts."),(0,o.kt)("h3",{id:"-flex-shrink"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Flex Shrink"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-28"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In this video, we'll delve into the ",(0,o.kt)("strong",{parentName:"p"},"flexShrink")," property in React Native.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This property determines how children within a container shrink along the main axis when their combined size exceeds the container's size.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The flex shrink factor is relative to other items within the container."))),(0,o.kt)("h4",{id:"understanding-flex-shrink"},"Understanding Flex Shrink"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"To comprehend this concept better, let's look at an example UI.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("p",null,"For simplicity, let's make a few modifications:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Comment out 5 boxes and render only two boxes")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'Suffix each box text with "shrink"')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Change the flex direction of the container to row")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Set ",(0,o.kt)("inlineCode",{parentName:"p"},"alignItems")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"flex-start")," to arrange the two boxes horizontally")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Set the container's width to 300"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1 shrink</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2 shrink</Box>\n      {/* <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box> */}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    width: 300,\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"As a result, the two items will flow horizontally but overflow the container, which has a width of 300.")),(0,o.kt)("h4",{id:"controlling-shrinking-behavior"},"Controlling Shrinking Behavior"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Initially, note that every flex item has a default ",(0,o.kt)("inlineCode",{parentName:"p"},"flexShrink")," value of 0.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Consequently, the items overflow the container.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"However, we can control the shrinking behavior by setting a positive value for ",(0,o.kt)("inlineCode",{parentName:"p"},"flexShrink"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"For example, if we apply ",(0,o.kt)("inlineCode",{parentName:"p"},"flexShrink: 1")," to the second box,"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1 shrink</Box>\n      <Box style={{ backgroundColor: '#b65d1f', flexShrink: 1 }}>Box 2 shrink</Box>\n      {/* <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box> */}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    width: 300,\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"we'll observe that the second box shrinks to fit within the container.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"By setting ",(0,o.kt)("inlineCode",{parentName:"p"},"flexShrink")," on both boxes,"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00', flexShrink: 1 }}>Box 1 shrink</Box>\n      <Box style={{ backgroundColor: '#b65d1f', flexShrink: 1 }}>Box 2 shrink</Box>\n      {/* <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box> */}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    width: 300,\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"they'll shrink equally to fit in.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Furthermore, the shrink factor is relative to other items.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Setting ",(0,o.kt)("inlineCode",{parentName:"p"},"flexShrink: 2")," on the second box"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00', flexShrink: 1 }}>Box 1 shrink</Box>\n      <Box style={{ backgroundColor: '#b65d1f', flexShrink: 2 }}>Box 2 shrink</Box>\n      {/* <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box> */}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'flex-start',\n    width: 300,\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"causes it to shrink twice as much as the first box.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This difference in shrinkage can be seen in the width of the boxes."))),(0,o.kt)("h4",{id:"summary-16"},"Summary"),(0,o.kt)("p",null,"In summary:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"flexShrink")," property dictates how Flex items behave when their default size is larger than the flex container.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"By default, the value of ",(0,o.kt)("inlineCode",{parentName:"p"},"flexShrink")," is 0 on every Flex item, causing items to overflow.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Setting a positive value for ",(0,o.kt)("inlineCode",{parentName:"p"},"flexShrink")," will make items shrink when necessary, with the amount of shrinkage being relative to other items in the container."))),(0,o.kt)("p",null,"By understanding and utilizing the ",(0,o.kt)("inlineCode",{parentName:"p"},"flexShrink")," property, you can control how flex items react when there's not enough space in the container."),(0,o.kt)("h3",{id:"-flex-grow"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Flex Grow"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-29"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In this final section, we'll explore the ",(0,o.kt)("strong",{parentName:"p"},"FlexGrow")," property in React Native.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"flexGrow")," determines how much space an item should occupy inside a flex container when there's extra space available.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Similar to ",(0,o.kt)("inlineCode",{parentName:"p"},"flexShrink"),", the flex grow factor is always relative to other items within the container."))),(0,o.kt)("h4",{id:"exploring-flex-grow"},"Exploring Flex Grow"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let's gain clarity on how ",(0,o.kt)("inlineCode",{parentName:"p"},"flexGrow")," works with an example UI.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"By default, flex items only occupy the space required to fit their content."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This often leaves extra space within our container.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"However, in certain situations, we want flex items to grow and utilize the remaining space.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"By default, all flex items have a ",(0,o.kt)("inlineCode",{parentName:"p"},"flexGrow")," value of 0, preventing them from utilizing the extra space.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"To change this behavior, we can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"flexGrow")," property with a positive value."))),(0,o.kt)("p",null,"For instance:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Initially, we'll set ",(0,o.kt)("inlineCode",{parentName:"li"},"flexGrow"),' of "Item 5" to 0 (default).')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803', flexGrow: 0 }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"No change will be observed since 0 is the default value.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Changing the ",(0,o.kt)("inlineCode",{parentName:"p"},"flexGrow"),' value to 1 for "Item 5"'))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803', flexGrow: 1 }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"will cause it to grow and occupy the remaining space in the container.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Similarly, setting ",(0,o.kt)("inlineCode",{parentName:"p"},"flexGrow"),' to 1 for "Item 6"'))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803', flexGrow: 1 }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56', flexGrow: 1 }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"will distribute the additional space evenly between items 5 and 6.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'To experiment further, changing "Item 6"\'s ',(0,o.kt)("inlineCode",{parentName:"p"},"flexGrow")," value to 3 from 1"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803', flexGrow: 1 }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56', flexGrow: 3 }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},'will cause it to grow three times more than "Item 5".')),(0,o.kt)("h4",{id:"applying-flex-grow"},"Applying Flex Grow"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Instead of setting ",(0,o.kt)("inlineCode",{parentName:"li"},"flexGrow")," individually for each item,")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"we can add it to the common style (",(0,o.kt)("inlineCode",{parentName:"li"},"box"),") applied to every item.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet } from 'react-native'\n\nexport default function Box({ children, style }) {\n  return (\n    <View style={[styles.box, style]}>\n      <Text style={styles.text}>{children}</Text>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  box: {\n    backgroundColor: '#fff',\n    padding: 20,\n    flexGrow: 1,\n  },\n  text: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    color: 'white',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"This will result in all items evenly utilizing the leftover space.")),(0,o.kt)("h4",{id:"to-summarize-1"},"To summarize:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"flexGrow")," property determines how much available space an item should take up in the flex container.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The flexGrow factor is relative to other items in the container.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"A default value of 0 means items shouldn't grow.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Setting ",(0,o.kt)("inlineCode",{parentName:"p"},"flexGrow")," to 1 for all flex items will cause them to grow evenly when there's extra space."))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Note:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"You might wonder about the relationship between the ",(0,o.kt)("inlineCode",{parentName:"p"},"flex")," property and ",(0,o.kt)("inlineCode",{parentName:"p"},"flexGrow"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"When ",(0,o.kt)("inlineCode",{parentName:"p"},"flex")," is set to a positive number, it's equivalent to setting ",(0,o.kt)("inlineCode",{parentName:"p"},"flexGrow")," with the same number.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"However, ",(0,o.kt)("inlineCode",{parentName:"p"},"flex")," also implicitly sets ",(0,o.kt)("inlineCode",{parentName:"p"},"flexShrink")," to 1 and ",(0,o.kt)("inlineCode",{parentName:"p"},"flexBasis")," to 0.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In essence, ",(0,o.kt)("inlineCode",{parentName:"p"},"flex")," with a positive number is equivalent to ",(0,o.kt)("inlineCode",{parentName:"p"},"flexGrow")," set to the same positive number, ",(0,o.kt)("inlineCode",{parentName:"p"},"flexShrink")," set to 1, and ",(0,o.kt)("inlineCode",{parentName:"p"},"flexBasis")," set to 0.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This clarifies what the ",(0,o.kt)("inlineCode",{parentName:"p"},"flex")," property does under the hood."))),(0,o.kt)("p",null,"With a solid understanding of ",(0,o.kt)("inlineCode",{parentName:"p"},"flexBasis"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"flexShrink"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"flex-grow"),", you can fine-tune the behavior of flex items within your layouts."),(0,o.kt)("h3",{id:"-relative-and-absolute-layout"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Relative and Absolute Layout"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-30"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In this final video of the section, we will delve into two essential layout types in React Native: ",(0,o.kt)("strong",{parentName:"p"},"relative")," and ",(0,o.kt)("strong",{parentName:"p"},"absolute")," layouts.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"These layouts are based on the ",(0,o.kt)("inlineCode",{parentName:"p"},"position")," property, which defines how an element is positioned within its parent container.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The two possible values for the ",(0,o.kt)("inlineCode",{parentName:"p"},"position")," property are ",(0,o.kt)("inlineCode",{parentName:"p"},"relative")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"absolute"),"."))),(0,o.kt)("h4",{id:"understanding-relative-layout"},"Understanding Relative Layout"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let's begin by looking at the default layout, which is the relative layout.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In this layout, elements are positioned according to the normal flow of the layout.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"An element remains in its original position and can be offset from that position using the ",(0,o.kt)("inlineCode",{parentName:"p"},"top"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"right"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"bottom"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"left")," values.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Importantly, this offset does not affect the positioning of any sibling or parent elements."))),(0,o.kt)("h4",{id:"exploring-absolute-layout"},"Exploring Absolute Layout"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In contrast, the absolute layout makes an element not participate in the normal flow of the layout.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Instead, it is laid out independently of its siblings.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The position of the element is determined by the ",(0,o.kt)("inlineCode",{parentName:"p"},"top"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"right"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"bottom"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"left")," values, which specify specific coordinates relative to its parent container."))),(0,o.kt)("h4",{id:"visualizing-with-ui"},"Visualizing with UI"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Let's take a look at these layouts using the UI in VS Code.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00' }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156' }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"We'll begin by converting each box into a square with ",(0,o.kt)("inlineCode",{parentName:"li"},"width: 100")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"height: 100"),". This will create 7 square boxes in the UI.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet } from 'react-native'\n\nexport default function Box({ children, style }) {\n  return (\n    <View style={[styles.box, style]}>\n      <Text style={styles.text}>{children}</Text>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  box: {\n    backgroundColor: '#fff',\n    padding: 20,\n    width: 100,\n    height: 100,\n  },\n  text: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    textAlign: 'center',\n    color: 'white',\n  },\n})\n")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Relative Layout:"))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The default layout positions elements according to the normal flow.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"You can offset elements using ",(0,o.kt)("inlineCode",{parentName:"p"},"top"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"left"),", etc., values relative to their position.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"For instance, setting ",(0,o.kt)("inlineCode",{parentName:"p"},"top: 75")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"left: 75"),' on "Box 1" and "Box 4" will offset them.'))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00', top: 75, left: 75 }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      <Box style={{ backgroundColor: '#ab9156', top: 75, left: 75 }}>Box 4</Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"Absolute Positioning:"))),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Changing the ",(0,o.kt)("inlineCode",{parentName:"li"},"position")," to ",(0,o.kt)("inlineCode",{parentName:"li"},"absolute"),' on "Box 4" and setting ',(0,o.kt)("inlineCode",{parentName:"li"},"top: 100")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"left: 100"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport Box from './components/Box'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Box style={{ backgroundColor: '#8e9b00', top: 75, left: 75 }}>Box 1</Box>\n      <Box style={{ backgroundColor: '#b65d1f' }}>Box 2</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 3</Box>\n      <Box\n        style={{\n          backgroundColor: '#ab9156',\n          position: 'absolute',\n          top: 100,\n          left: 100,\n        }}>\n        Box 4\n      </Box>\n      <Box style={{ backgroundColor: '#6b0803' }}>Box 5</Box>\n      <Box style={{ backgroundColor: '#1c4c56' }}>Box 6</Box>\n      <Box style={{ backgroundColor: '#b95f21' }}>Box 7</Box>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    marginTop: 64,\n    borderWidth: 6,\n    borderColor: 'red',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"positions it using specific coordinates relative to its parent container.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'Notice that "Box 4" with absolute positioning is independent of the normal layout flow.'))),(0,o.kt)("h4",{id:"when-to-use-each-layout"},"When to Use Each Layout"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Relative Layout:"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Use this when responsiveness and adaptability are crucial.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"It offers a more maintainable and flexible approach for handling different screen sizes and orientations.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"Absolute Layout:"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Opt for this when you need precise control over position and size of UI components.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"It's also useful for building custom animations with fixed coordinates."))),(0,o.kt)("p",null,"With this, we conclude the section on layouts in React Native."),(0,o.kt)("p",null,"Throughout, we've learned how to use the flexbox model, understood various flexbox properties, and gained insights into the differences between relative and absolute layouts."),(0,o.kt)("h2",{id:"section-5-dynamic-user-interfaces"},"Section 5: Dynamic User Interfaces"),(0,o.kt)("blockquote",null),(0,o.kt)("h3",{id:"-dynamic-user-interfaces"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Dynamic User Interfaces"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-31"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Welcome to the fifth section of the course!")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In this section, we'll delve into creating ",(0,o.kt)("strong",{parentName:"p"},"Dynamic User Interfaces")," in React Native.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Up until now, we've covered how to style React Native components and design layouts using flexbox.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"While these aspects are vital, there's an essential piece missing.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"All our learning has revolved around iPhone 14 and Pixel 4 devices.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"However, it's crucial to remember that not all users of our apps will be using identical devices.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Device sizes can vary significantly, ranging from more compact phones to larger devices like iPads or Android tablets.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We must ensure that our app's interface remains responsive to these different device sizes while providing an optimal user experience.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"But that's not all! Even on the same device, users might prefer different orientations\u2014portrait or landscape.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Our UI needs to adeptly accommodate these varying user preferences."))),(0,o.kt)("h4",{id:"learning-objectives"},"Learning Objectives"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"In this section, we will dive into several APIs that React Native provides to gracefully adapt to these changes and create dynamic user interfaces.")),(0,o.kt)("h4",{id:"setting-up"},"Setting Up"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'For this section on Dynamic User Interfaces, I\'ve created a new Expo project named "DynamicUI"')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In the ",(0,o.kt)("inlineCode",{parentName:"p"},"App")," component:"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Remove the ",(0,o.kt)("inlineCode",{parentName:"p"},"StatusBar")," import")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Remove the ",(0,o.kt)("inlineCode",{parentName:"p"},"Text")," component import")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Clear all contents within the ",(0,o.kt)("inlineCode",{parentName:"p"},"View")," component")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Set the ",(0,o.kt)("inlineCode",{parentName:"p"},"backgroundColor")," of the container styles to plum"))))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\n\nexport default function App() {\n  return <View style={styles.container}></View>\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n})\n")),(0,o.kt)("p",null,"Upon executing these changes, the view component displays a plum-colored background."),(0,o.kt)("p",null,"Alright, let's proceed to the next video where we'll learn how to work with different device sizes."),(0,o.kt)("h3",{id:"-dimensions-api"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Dimensions API"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-32"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In this video, we will explore the Dimensions API in React Native to better understand this topic.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let's jump straight into the code with an example.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"To start, we will nest a ",(0,o.kt)("inlineCode",{parentName:"p"},"View")," component within the container")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"View")," component with the ",(0,o.kt)("inlineCode",{parentName:"p"},"style")," prop set to ",(0,o.kt)("inlineCode",{parentName:"p"},"Styles.box"),",")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"and then a ",(0,o.kt)("inlineCode",{parentName:"p"},"Text")," component with ",(0,o.kt)("inlineCode",{parentName:"p"},"style")," set to ",(0,o.kt)("inlineCode",{parentName:"p"},"Styles.text"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'For the text itself, a simple "Welcome!" is sufficient.')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let me also import the ",(0,o.kt)("inlineCode",{parentName:"p"},"Text")," component which I deleted in the previous video."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View, Text } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View style={styles.box}>\n        <Text style={styles.text}>Welcome!</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Now, let's define the corresponding styles we have applied to our ",(0,o.kt)("inlineCode",{parentName:"li"},"View")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"Text")," components:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View, Text } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View style={styles.box}>\n        <Text style={styles.text}>Welcome!</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  box: {\n    width: 300,\n    height: 300,\n    backgroundColor: 'lightblue',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  text: {\n    fontSize: 24,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If we save the file, the blue box and the welcome text will be displayed.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Everything looks great at this point. However, let's test the application on a larger device like an iPad.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"To do this, in VSCode terminal with the terminal in focus, press ",(0,o.kt)("inlineCode",{parentName:"p"},"Shift + I"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This will bring up a list of iOS devices.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'Select "iPad Pro 6th generation." If prompted, approve the installation of the app through Expo Go.')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Now the app is running on both an iPhone and an iPad, in addition to Android, of course.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"However, it's clear that the app doesn't look the best on iPad.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The box is really small, and the font is not easily readable.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"One potential solution to the box dimensions issue is to use percentages for width and height.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let's set width to 70 percent and height to 40 percent."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View, Text } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View style={styles.box}>\n        <Text style={styles.text}>Welcome!</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  box: {\n    width: '70%',\n    height: '40%',\n    backgroundColor: 'lightblue',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  text: {\n    fontSize: 24,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"While this is an improvement, it still doesn't feel right.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The problem is that the two devices have similar height but significantly different width.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Using percentage-based width and height is not sufficient.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Moreover, how do we handle the font size? We may want a larger font, but specifying a percentage won't work.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"What we need is a way to address responsive styles based on the device size.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This is where the ",(0,o.kt)("inlineCode",{parentName:"p"},"Dimensions API")," comes into play. Let's learn how to use it."))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Step 1:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Import the Dimensions API from React Native")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View, Text, Dimensions } from 'react-native'\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Step 2:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Obtain the device width and height using the API")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"So right after a component: ",(0,o.kt)("inlineCode",{parentName:"p"},"const windowWidth = Dimensions.get('')")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View, Text, Dimensions } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View style={styles.box}>\n        <Text style={styles.text}>Welcome!</Text>\n      </View>\n    </View>\n  )\n}\n\nconst windowWidth = Dimensions.get('')\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  box: {\n    width: '70%',\n    height: '40%',\n    backgroundColor: 'lightblue',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  text: {\n    fontSize: 24,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"get")," method accepts either ",(0,o.kt)("inlineCode",{parentName:"p"},"screen")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"window")," as an argument.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"screen")," refers to the entire physical display of the device, including areas that might be outside the visible viewport due to notches, status bars, or system nav bars.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"On the other hand, ",(0,o.kt)("inlineCode",{parentName:"p"},"window")," refers to the visible area of the screen occupied by your app's UI.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"For tasks involving UI elements within your application's visible area, you will want to use ",(0,o.kt)("inlineCode",{parentName:"p"},"window"),"."))),(0,o.kt)("p",null,"Similarly: ",(0,o.kt)("inlineCode",{parentName:"p"},"const windowHeight = Dimensions.get('window')")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"and then we access ",(0,o.kt)("inlineCode",{parentName:"li"},".width")," and ",(0,o.kt)("inlineCode",{parentName:"li"},".height"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View, Text, Dimensions } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View style={styles.box}>\n        <Text style={styles.text}>Welcome!</Text>\n      </View>\n    </View>\n  )\n}\n\nconst windowWidth = Dimensions.get('window').width\nconst windowHeight = Dimensions.get('window').height\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  box: {\n    width: '70%',\n    height: '40%',\n    backgroundColor: 'lightblue',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  text: {\n    fontSize: 24,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We can now use these device dimensions to dynamically adjust the styles based on the device size.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"For width, we're going to set: ",(0,o.kt)("inlineCode",{parentName:"p"},"width: windowWidth > 500 ? '70%' : '90%',"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"For height: ",(0,o.kt)("inlineCode",{parentName:"p"},"height: windowHeight > 600 ? '60%' : '90%',"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"For the font size: ",(0,o.kt)("inlineCode",{parentName:"p"},"fontSize: windowWidth > 500 ? 50 : 24,")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View, Text, Dimensions } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View style={styles.box}>\n        <Text style={styles.text}>Welcome!</Text>\n      </View>\n    </View>\n  )\n}\n\nconst windowWidth = Dimensions.get('window').width\nconst windowHeight = Dimensions.get('window').height\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  box: {\n    width: windowWidth > 500 ? '70%' : '90%',\n    height: windowHeight > 600 ? '60%' : '90%',\n    backgroundColor: 'lightblue',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  text: {\n    fontSize: windowWidth > 500 ? 50 : 24,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If we save the file, you can see this is much better.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The dimensions now closely follow the device size, and the font is much easier to read on an iPad."))),(0,o.kt)("h4",{id:"in-summary-1"},"In summary"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"the Dimensions API provides access to the device size.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"By using the device width or height, you can create responsive styles for your UI elements.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Now, although our styles seem to be working completely fine, the Dimensions API does have a drawback that prevents it from being the recommended approach for creating dynamic user interfaces.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let's understand what the drawback is in the next video."))),(0,o.kt)("h3",{id:"-dimensions-api-drawback"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Dimensions API Drawback"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-33"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In the previous video, we learned how to use the Dimensions API to define responsive styles for UI elements.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We successfully configured the height, width, and font size based on the device dimensions.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Although this works, we do have an issue: device dimensions can change when the screen orientation changes, and unfortunately, the Dimensions API doesn't dynamically update with these changes.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let me help you understand with an example."))),(0,o.kt)("h4",{id:"logging-device-dimensions"},"Logging Device Dimensions"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"I'll log the device height and width to the console.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View, Text, Dimensions } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View style={styles.box}>\n        <Text style={styles.text}>Welcome!</Text>\n      </View>\n    </View>\n  )\n}\n\nconst windowWidth = Dimensions.get('window').width\nconst windowHeight = Dimensions.get('window').height\n\nconsole.log({ windowHeight, windowWidth })\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  box: {\n    width: windowWidth > 500 ? '70%' : '90%',\n    height: windowHeight > 600 ? '60%' : '90%',\n    backgroundColor: 'lightblue',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  text: {\n    fontSize: windowWidth > 500 ? 50 : 24,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"When I save the file, you can see the different device dimensions are logged in the console.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The iPhone dimensions here are logged as 852 for height and 393 for width.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Now, let's rotate the iPhone device by 90 degrees using the rotate button.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Although the device switches from portrait to landscape mode, our app doesn't seem to adapt to the orientation changes as expected.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Ideally, the welcome text should also rotate similar to how one would read in portrait mode."))),(0,o.kt)("h4",{id:"adapting-to-landscape-mode"},"Adapting to Landscape Mode"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Our application doesn't adapt to landscape mode because of an Expo setting defined in ",(0,o.kt)("inlineCode",{parentName:"p"},"app.json"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"By default, the orientation setting is fixed to portrait mode."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'"orientation": "portrait",\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"As a result, our UI is tailored solely for portrait orientation.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let's adjust this to default."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'"orientation": "default",\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Now when I save the file, press ",(0,o.kt)("inlineCode",{parentName:"p"},"R")," to restart the server with the device orientation reset behind the scenes.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"You will see iPhone window height 852 and window width 393.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"But with the orientation now set to default, if I rotate the iPhone, the app adapts and the text becomes readable once again.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"However, the responsive styles don't seem to be working after rotating.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The iPhone's device width would become 852, and the device height would become 393.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This change in width and height should prompt the View component's width to change to 70 percent and the text font size to increase to 50.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Yet these changes aren't being reflected.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"The width remains at 90 percent, which can be clearly inferred, and the text font size is still 24 pixels"),", the same as the Android device in portrait mode."))),(0,o.kt)("h4",{id:"the-solution-using-hooks-and-inline-styles"},"The Solution: Using Hooks and Inline Styles"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"The only way to recalculate the dimensions is to restart our application."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"When I bring focus to the device and press ",(0,o.kt)("inlineCode",{parentName:"p"},"R")," to restart, you can see the width adjusts to 70 percent, and font size is now 50 pixels.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The updated dimensions are also logged to the console.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Height is now 393, and width is 852.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"But this is the drawback of the Dimensions API: ",(0,o.kt)("inlineCode",{parentName:"p"},"the values don't dynamically update when the window dimensions change"),", either due to orientation changes or more complex scenarios such as foldable phones.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Of course, we do have a solution to this problem.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let me walk you through the fix."))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Step 1:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Import ",(0,o.kt)("inlineCode",{parentName:"li"},"useState")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"useEffect")," hooks from React.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useState, useEffect } from 'react'\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Step 2:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Create a state variable that will store the device dimensions when the screen loads.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Use the ",(0,o.kt)("inlineCode",{parentName:"p"},"useState")," hook and pass in an object.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This object will have a key called ",(0,o.kt)("inlineCode",{parentName:"p"},"window"),", which is set to ",(0,o.kt)("inlineCode",{parentName:"p"},"Dimensions.get"),"."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useState, useEffect } from 'react'\nimport { StyleSheet, View, Text, Dimensions } from 'react-native'\n\nexport default function App() {\n  const [dimensions, setDimensions] = useState({\n    window: Dimensions.get('window'),\n  })\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.box}>\n        <Text style={styles.text}>Welcome!</Text>\n      </View>\n    </View>\n  )\n}\n\nconst windowWidth = Dimensions.get('window').width\nconst windowHeight = Dimensions.get('window').height\n\nconsole.log({ windowHeight, windowWidth })\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  box: {\n    width: windowWidth > 500 ? '70%' : '90%',\n    height: windowHeight > 600 ? '60%' : '90%',\n    backgroundColor: 'lightblue',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  text: {\n    fontSize: windowWidth > 500 ? 50 : 24,\n  },\n})\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Step 3:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Add an effect that listens to changes in the device dimensions and updates the dimensions state value.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Listen to dimension changes using the static method ",(0,o.kt)("inlineCode",{parentName:"p"},"addEventListener")," on the Dimensions API.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This will return a subscription.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"subscription")," constant is equal to ",(0,o.kt)("inlineCode",{parentName:"p"},"Dimensions.addEventListener"),"."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useState, useEffect } from 'react'\nimport { StyleSheet, View, Text, Dimensions } from 'react-native'\n\nexport default function App() {\n  const [dimensions, setDimensions] = useState({\n    window: Dimensions.get('window'),\n  })\n\n  useEffect(() => {\n    const subscription = Dimensions.addEventListener()\n  })\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.box}>\n        <Text style={styles.text}>Welcome!</Text>\n      </View>\n    </View>\n  )\n}\n\nconst windowWidth = Dimensions.get('window').width\nconst windowHeight = Dimensions.get('window').height\n\nconsole.log({ windowHeight, windowWidth })\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  box: {\n    width: windowWidth > 500 ? '70%' : '90%',\n    height: windowHeight > 600 ? '60%' : '90%',\n    backgroundColor: 'lightblue',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  text: {\n    fontSize: windowWidth > 500 ? 50 : 24,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We listen to ",(0,o.kt)("inlineCode",{parentName:"p"},"change")," in the dimensions and execute a callback function.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This function receives an object from which we destructure ",(0,o.kt)("inlineCode",{parentName:"p"},"window")," and call the ",(0,o.kt)("inlineCode",{parentName:"p"},"setDimensions")," setter function, passing in ",(0,o.kt)("inlineCode",{parentName:"p"},"window"),"."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useState, useEffect } from 'react'\nimport { StyleSheet, View, Text, Dimensions } from 'react-native'\n\n\n  return (\n    export default function App() {\n      const [dimensions, setDimensions] = useState({\n        window: Dimensions.get('window'),\n      })\n\n      useEffect(() => {\n        const subscription = Dimensions.addEventListener('change', ({ window }) => {\n          setDimensions({ window })\n        })\n      })\n\n    <View style={styles.container}>\n      <View style={styles.box}>\n        <Text style={styles.text}>Welcome!</Text>\n      </View>\n    </View>\n  )\n}\n\nconst windowWidth = Dimensions.get('window').width\nconst windowHeight = Dimensions.get('window').height\n\nconsole.log({ windowHeight, windowWidth })\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  box: {\n    width: windowWidth > 500 ? '70%' : '90%',\n    height: windowHeight > 600 ? '60%' : '90%',\n    backgroundColor: 'lightblue',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  text: {\n    fontSize: windowWidth > 500 ? 50 : 24,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"We will also clean up the subscription.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useState, useEffect } from 'react'\nimport { StyleSheet, View, Text, Dimensions } from 'react-native'\n\nexport default function App() {\n  const [dimensions, setDimensions] = useState({\n    window: Dimensions.get('window'),\n  })\n\n  useEffect(() => {\n    const subscription = Dimensions.addEventListener('change', ({ window }) => {\n      setDimensions({ window })\n    })\n    return () => subscription?.remove()\n  })\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.box}>\n        <Text style={styles.text}>Welcome!</Text>\n      </View>\n    </View>\n  )\n}\n\nconst windowWidth = Dimensions.get('window').width\nconst windowHeight = Dimensions.get('window').height\n\nconsole.log({ windowHeight, windowWidth })\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  box: {\n    width: windowWidth > 500 ? '70%' : '90%',\n    height: windowHeight > 600 ? '60%' : '90%',\n    backgroundColor: 'lightblue',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  text: {\n    fontSize: windowWidth > 500 ? 50 : 24,\n  },\n})\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Step 4:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Extract the device width and height from the dimensions state variable.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Create constants window from dimensions, ",(0,o.kt)("inlineCode",{parentName:"p"},"const { window } = Dimensions"),",")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"windowWidth equal to window.width, ",(0,o.kt)("inlineCode",{parentName:"p"},"const windowWidth = window.width"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"and windowHeight equal to window.height, ",(0,o.kt)("inlineCode",{parentName:"p"},"const windowHeight = window.height")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useState, useEffect } from 'react'\nimport { StyleSheet, View, Text, Dimensions } from 'react-native'\n\nexport default function App() {\n  const [dimensions, setDimensions] = useState({\n    window: Dimensions.get('window'),\n  })\n\n  useEffect(() => {\n    const subscription = Dimensions.addEventListener('change', ({ window }) => {\n      setDimensions({ window })\n    })\n    return () => subscription?.remove()\n  })\n\n  const { window } = dimensions\n  const windowWidth = window.width\n  const windowHeight = window.height\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.box}>\n        <Text style={styles.text}>Welcome!</Text>\n      </View>\n    </View>\n  )\n}\n\nconst windowWidth = Dimensions.get('window').width\nconst windowHeight = Dimensions.get('window').height\n\nconsole.log({ windowHeight, windowWidth })\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  box: {\n    width: windowWidth > 500 ? '70%' : '90%',\n    height: windowHeight > 600 ? '60%' : '90%',\n    backgroundColor: 'lightblue',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  text: {\n    fontSize: windowWidth > 500 ? 50 : 24,\n  },\n})\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Step 5:")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Add inline styles that dynamically change based on the device dimensions.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Comment out:"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"the two lines outside the component,")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"width and height calculation in the Stylesheet API,")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"and the entire text key as well"))))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useState, useEffect } from 'react'\nimport { StyleSheet, View, Text, Dimensions } from 'react-native'\n\nexport default function App() {\n  const [dimensions, setDimensions] = useState({\n    window: Dimensions.get('window'),\n  })\n\n  useEffect(() => {\n    const subscription = Dimensions.addEventListener('change', ({ window }) => {\n      setDimensions({ window })\n    })\n    return () => subscription?.remove()\n  })\n\n  const { window } = dimensions\n  const windowWidth = window.width\n  const windowHeight = window.height\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.box}>\n        <Text style={styles.text}>Welcome!</Text>\n      </View>\n    </View>\n  )\n}\n\n// const windowWidth = Dimensions.get('window').width\n// const windowHeight = Dimensions.get('window').height\n\nconsole.log({ windowHeight, windowWidth })\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  box: {\n    // width: windowWidth > 500 ? '70%' : '90%',\n    // height: windowHeight > 600 ? '60%' : '90%',\n    backgroundColor: 'lightblue',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  // text: {\n  //   fontSize: windowWidth > 500 ? 50 : 24,\n  // },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"on the text component, Replace the entire ",(0,o.kt)("inlineCode",{parentName:"li"},"Styles.text")," with an object where we set ",(0,o.kt)("inlineCode",{parentName:"li"},"fontSize:")," to ",(0,o.kt)("inlineCode",{parentName:"li"},"windowWidth > 500 ? 50 : 24"),".")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useState, useEffect } from 'react'\nimport { StyleSheet, View, Text, Dimensions } from 'react-native'\n\nexport default function App() {\n  const [dimensions, setDimensions] = useState({\n    window: Dimensions.get('window'),\n  })\n\n  useEffect(() => {\n    const subscription = Dimensions.addEventListener('change', ({ window }) => {\n      setDimensions({ window })\n    })\n    return () => subscription?.remove()\n  })\n\n  const { window } = dimensions\n  const windowWidth = window.width\n  const windowHeight = window.height\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.box}>\n        <Text style={{ fontSize: windowWidth > 500 ? 50 : 24 }}>Welcome!</Text>\n      </View>\n    </View>\n  )\n}\n\n// const windowWidth = Dimensions.get('window').width\n// const windowHeight = Dimensions.get('window').height\n\nconsole.log({ windowHeight, windowWidth })\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  box: {\n    // width: windowWidth > 500 ? '70%' : '90%',\n    // height: windowHeight > 600 ? '60%' : '90%',\n    backgroundColor: 'lightblue',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  // text: {\n  //   fontSize: windowWidth > 500 ? 50 : 24,\n  // },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"For the view container, use the array syntax to extend the styles,")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Also, specify width and height the same as before in the Stylesheet API.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let's also make sure to comment out the console log statement."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useState, useEffect } from 'react'\nimport { StyleSheet, View, Text, Dimensions } from 'react-native'\n\nexport default function App() {\n  const [dimensions, setDimensions] = useState({\n    window: Dimensions.get('window'),\n  })\n\n  useEffect(() => {\n    const subscription = Dimensions.addEventListener('change', ({ window }) => {\n      setDimensions({ window })\n    })\n    return () => subscription?.remove()\n  })\n\n  const { window } = dimensions\n  const windowWidth = window.width\n  const windowHeight = window.height\n\n  return (\n    <View style={styles.container}>\n      <View\n        style={[\n          styles.box,\n          {\n            width: windowWidth > 500 ? '70%' : '90%',\n            height: windowHeight > 600 ? '60%' : '90%',\n          },\n        ]}>\n        <Text style={{ fontSize: windowWidth > 500 ? 50 : 24 }}>Welcome!</Text>\n      </View>\n    </View>\n  )\n}\n\n// const windowWidth = Dimensions.get('window').width\n// const windowHeight = Dimensions.get('window').height\n\n// console.log({ windowHeight, windowWidth })\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  box: {\n    // width: windowWidth > 500 ? '70%' : '90%',\n    // height: windowHeight > 600 ? '60%' : '90%',\n    backgroundColor: 'lightblue',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  // text: {\n  //   fontSize: windowWidth > 500 ? 50 : 24,\n  // },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If we now save the file and go back to our iPhone device, you can see the default portrait orientation still works.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"But when we change to landscape, the width and font size are adjusted to 70 and 50 pixels.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We are able to add dynamic styles to our UI elements based on device dimensions.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If you take a look at the code, though, it does seem a little verbose, doesn't it?")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"What if there was an easier way that abstracts all of this?")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Well, there is, and that is what we will be learning in the next video."))),(0,o.kt)("h3",{id:"-usewindowdimensions"},(0,o.kt)("strong",{parentName:"h3"},"=>")," useWindowDimensions"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-34"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In the previous video, we discovered that the Dimensions API doesn't update when device dimensions change.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We had to implement a substantial amount of code to ensure our dynamic styles would be applied correctly when the device orientation changed."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useState, useEffect } from 'react'\nimport { StyleSheet, View, Text, Dimensions } from 'react-native'\n\nexport default function App() {\n  const [dimensions, setDimensions] = useState({\n    window: Dimensions.get('window'),\n  })\n\n  useEffect(() => {\n    const subscription = Dimensions.addEventListener('change', ({ window }) => {\n      setDimensions({ window })\n    })\n    return () => subscription?.remove()\n  })\n\n  const { window } = dimensions\n  const windowWidth = window.width\n  const windowHeight = window.height\n\n  return (\n    <View style={styles.container}>\n      <View\n        style={[\n          styles.box,\n          {\n            width: windowWidth > 500 ? '70%' : '90%',\n            height: windowHeight > 600 ? '60%' : '90%',\n          },\n        ]}>\n        <Text style={{ fontSize: windowWidth > 500 ? 50 : 24 }}>Welcome!</Text>\n      </View>\n    </View>\n  )\n}\n\n// const windowWidth = Dimensions.get('window').width\n// const windowHeight = Dimensions.get('window').height\n\n// console.log({ windowHeight, windowWidth })\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  box: {\n    // width: windowWidth > 500 ? '70%' : '90%',\n    // height: windowHeight > 600 ? '60%' : '90%',\n    backgroundColor: 'lightblue',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  // text: {\n  //   fontSize: windowWidth > 500 ? 50 : 24,\n  // },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"In this video, I'll demonstrate how we can simplify this process and achieve the same outcome using the ",(0,o.kt)("inlineCode",{parentName:"li"},"useWindowDimensions")," hook.")),(0,o.kt)("h4",{id:"step-1-eliminate-unnecessary-code"},"Step 1: Eliminate Unnecessary Code"),(0,o.kt)("p",null,"Let's start by eliminating the unnecessary code. This includes:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Removing the imports for ",(0,o.kt)("inlineCode",{parentName:"p"},"useState")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"useEffect"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Removing the import for the Dimensions API.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Removing the entire block of code related to ",(0,o.kt)("inlineCode",{parentName:"p"},"useState")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"useEffect"),"."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View, Text } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View\n        style={[\n          styles.box,\n          {\n            width: windowWidth > 500 ? '70%' : '90%',\n            height: windowHeight > 600 ? '60%' : '90%',\n          },\n        ]}>\n        <Text style={{ fontSize: windowWidth > 500 ? 50 : 24 }}>Welcome!</Text>\n      </View>\n    </View>\n  )\n}\n\n// const windowWidth = Dimensions.get('window').width\n// const windowHeight = Dimensions.get('window').height\n\n// console.log({ windowHeight, windowWidth })\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  box: {\n    // width: windowWidth > 500 ? '70%' : '90%',\n    // height: windowHeight > 600 ? '60%' : '90%',\n    backgroundColor: 'lightblue',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  // text: {\n  //   fontSize: windowWidth > 500 ? 50 : 24,\n  // },\n})\n")),(0,o.kt)("h4",{id:"step-2-import-usewindowdimensions"},"Step 2: Import ",(0,o.kt)("inlineCode",{parentName:"h4"},"useWindowDimensions")),(0,o.kt)("p",null,"Now, import ",(0,o.kt)("inlineCode",{parentName:"p"},"useWindowDimensions")," from React Native."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View, Text, useWindowDimensions } from 'react-native'\n")),(0,o.kt)("h4",{id:"step-3-implement-usewindowdimensions"},"Step 3: Implement ",(0,o.kt)("inlineCode",{parentName:"h4"},"useWindowDimensions")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Within the component:")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"const windowWidth = useWindowDimensions().width"),"\n",(0,o.kt)("inlineCode",{parentName:"p"},"const windowHeight = useWindowDimensions().height")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View, Text, useWindowDimensions } from 'react-native'\n\nexport default function App() {\n  const windowWidth = useWindowDimensions().width\n  const windowHeight = useWindowDimensions().height\n\n  return (\n    <View style={styles.container}>\n      <View\n        style={[\n          styles.box,\n          {\n            width: windowWidth > 500 ? '70%' : '90%',\n            height: windowHeight > 600 ? '60%' : '90%',\n          },\n        ]}>\n        <Text style={{ fontSize: windowWidth > 500 ? 50 : 24 }}>Welcome!</Text>\n      </View>\n    </View>\n  )\n}\n\n// const windowWidth = Dimensions.get('window').width\n// const windowHeight = Dimensions.get('window').height\n\n// console.log({ windowHeight, windowWidth })\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  box: {\n    // width: windowWidth > 500 ? '70%' : '90%',\n    // height: windowHeight > 600 ? '60%' : '90%',\n    backgroundColor: 'lightblue',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  // text: {\n  //   fontSize: windowWidth > 500 ? 50 : 24,\n  // },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"And that's all that is required.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Save the file and return to your device."))),(0,o.kt)("h4",{id:"testing-the-updated-approach"},"Testing the Updated Approach"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Rotate your device, and you'll notice that our dynamic styles continue to function as expected.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"It is important to note that useWindowDimensions is the recommended approach."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"By first explaining the Dimensions API, I wanted to ensure you understand the problem it addresses.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"useWindowDimensions should be a go-to approach for responsive styles."))),(0,o.kt)("h3",{id:"-safeareaview-component"},(0,o.kt)("strong",{parentName:"h3"},"=>")," SafeAreaView Component"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-35"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In this video, let's learn about the Safe Area View component in React Native.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"To save us some time, I'm going to copy-paste code for the ",(0,o.kt)("inlineCode",{parentName:"p"},"App")," component and walk you through the same."))),(0,o.kt)("h4",{id:"code-walkthrough"},"Code Walkthrough"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"First, we have the imports for ",(0,o.kt)("inlineCode",{parentName:"li"},"View"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"Text"),", and ",(0,o.kt)("inlineCode",{parentName:"li"},"StyleSheet"),":")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet } from 'react-native'\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Next, we have the App component as the default export:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    // JSX code here\n  );\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},'For the JSX, we have an outer view container, an inner view box, and a text component. The component displays "Welcome" as the text:')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View style={styles.box}>\n        <Text style={styles.text}>Welcome</Text>\n      </View>\n    </View>\n  )\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"For the container, we have flex set to 1 to make use of the full available space and the background color of Plum:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View style={styles.box}>\n        <Text style={styles.text}>Welcome</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"For the inner box, we have a simple padding of 20 pixels in all directions:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View style={styles.box}>\n        <Text style={styles.text}>Welcome</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n  },\n  box: {\n    padding: 20,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},'Finally, for the text, there is a font size of 24, font weight bold, and text align center to center-align the "Welcome" text:')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View style={styles.box}>\n        <Text style={styles.text}>Welcome</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n  },\n  box: {\n    padding: 20,\n  },\n  text: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    textAlign: 'center',\n  },\n})\n")),(0,o.kt)("h4",{id:"issue-and-solution"},"Issue and Solution"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If you followed the series until now, this code should seem familiar.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"However, when we view the app on iPhone 14 and Pixel 4 devices, we encounter a problem.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},'The "Welcome" text is visible on Android, but on iOS devices, it\'s not visible'),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The issue is that the text is hidden behind the notch on iOS devices."))),(0,o.kt)("p",null,"To fix this, we can add a top padding to the container:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View style={styles.box}>\n        <Text style={styles.text}>Welcome</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    paddingTop: 60,\n  },\n  box: {\n    padding: 20,\n  },\n  text: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    textAlign: 'center',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"But this solution is not ideal, as it introduces unnecessary space at the top for Android, and it might not work well on new devices with different notch placements.")),(0,o.kt)("h4",{id:"introducing-safe-area-view"},"Introducing Safe Area View"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"What we need is a way to figure out the safe area for a given device and render our application only within that view.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"That's where the ",(0,o.kt)("inlineCode",{parentName:"p"},"SafeAreaView")," component comes in.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Import it from React Native and wrap your entire JSX with it:"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet, SafeAreaView } from 'react-native'\n\nexport default function App() {\n  return (\n    <SafeAreaView>\n      <View style={styles.container}>\n        <View style={styles.box}>\n          <Text style={styles.text}>Welcome</Text>\n        </View>\n      </View>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    paddingTop: 60,\n  },\n  box: {\n    padding: 20,\n  },\n  text: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    textAlign: 'center',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"To ensure the view occupies the entire available space, add set flex to 1")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"and on the component style is equal to styles dot safeContainer"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet, SafeAreaView } from 'react-native'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.safeContainer}>\n      <View style={styles.container}>\n        <View style={styles.box}>\n          <Text style={styles.text}>Welcome</Text>\n        </View>\n      </View>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  safeContainer: {\n    flex: 1,\n  },\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    paddingTop: 60,\n  },\n  box: {\n    padding: 20,\n  },\n  text: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    textAlign: 'center',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The purpose of SafeAreaView is to render content within the safe area boundaries of a device.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"It applies padding to reflect the physical limitations of the screen, such as rounded corners or camera notches."))),(0,o.kt)("p",null,"To avoid the white spacing at the top and bottom, apply the same background color as your container to the SafeAreaView:"),(0,o.kt)("p",null,"let's also remove the ",(0,o.kt)("inlineCode",{parentName:"p"},"paddingTop")," which we don't need anymore"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet, SafeAreaView } from 'react-native'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.safeContainer}>\n      <View style={styles.container}>\n        <View style={styles.box}>\n          <Text style={styles.text}>Welcome</Text>\n        </View>\n      </View>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  safeContainer: {\n    flex: 1,\n    backgroundColor: 'plum',\n  },\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n  },\n  box: {\n    padding: 20,\n  },\n  text: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    textAlign: 'center',\n  },\n})\n")),(0,o.kt)("h4",{id:"conclusion-4"},"Conclusion"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Using SafeAreaView ensures that your application's content is rendered within the safe area of the device, accommodating notches and rounded corners.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This is an important aspect of adapting user interfaces based on the device. I hope you now understand the what, why, and how of SafeAreaView."))),(0,o.kt)("h3",{id:"-platform-specific-code"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Platform Specific Code"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-36"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"When developing a cross-platform app, maximizing code reuse is a priority.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"However, there are situations where it becomes necessary to tailor your code to specific platforms.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"React Native offers two approaches for organizing and separating platform-specific code.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let's learn both these approaches in this video."))),(0,o.kt)("h4",{id:"platform-module"},"Platform Module"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let's begin with the first approach: the ",(0,o.kt)("inlineCode",{parentName:"p"},"Platform")," module.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This module is imported from React Native and detects the platform on which the app is running."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet, SafeAreaView, Platform } from 'react-native'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.safeContainer}>\n      <View style={styles.container}>\n        <View style={styles.box}>\n          <Text style={styles.text}>Welcome</Text>\n        </View>\n      </View>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  safeContainer: {\n    flex: 1,\n    backgroundColor: 'plum',\n  },\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n  },\n  box: {\n    padding: 20,\n  },\n  text: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    textAlign: 'center',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"You can use the detection logic to implement platform-specific code.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"For instance, consider our welcome text.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"On iPhone, it is appropriately positioned within a safe area view, but on Pixel, it is too close to the status bar.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"using the Platform module we can set a top padding only on Android: ",(0,o.kt)("inlineCode",{parentName:"p"},"paddingTop: Platform.OS === 'android' ? 25 : 0,")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet, SafeAreaView, Platform } from 'react-native'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.safeContainer}>\n      <View style={styles.container}>\n        <View style={styles.box}>\n          <Text style={styles.text}>Welcome</Text>\n        </View>\n      </View>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  safeContainer: {\n    flex: 1,\n    backgroundColor: 'plum',\n  },\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    paddingTop: Platform.OS === 'android' ? 25 : 0,\n  },\n  box: {\n    padding: 20,\n  },\n  text: {\n    fontSize: 24,\n    fontWeight: 'bold',\n    textAlign: 'center',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This way, you can set a top padding only on Android:")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"you can similarly check against iOS to apply Styles specifically to iOS ",(0,o.kt)("inlineCode",{parentName:"p"},"paddingTop: Platform.OS === 'android' ? 25 : 0,")))),(0,o.kt)("h4",{id:"platformselect"},"Platform.select"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"While Platform.OS is suitable for small changes, a better option for more comprehensive platform-specific styles is to use ",(0,o.kt)("inlineCode",{parentName:"p"},"Platform.select"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let's show an example where we completely change the text styles for iOS and Android.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We'll change the font color and font size across the two platforms.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"for that within text key we're going to spread pPlatform.select and curly braces: ",(0,o.kt)("inlineCode",{parentName:"p"},"text: {...Platform.select({})}"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"within this object, we can specify ",(0,o.kt)("inlineCode",{parentName:"p"},"ios: {}")," as a key to apply iOS specific Styles")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"and ",(0,o.kt)("inlineCode",{parentName:"p"},"android: {}")," as a key to apply Android specific styles"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet, SafeAreaView, Platform } from 'react-native'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.safeContainer}>\n      <View style={styles.container}>\n        <View style={styles.box}>\n          <Text style={styles.text}>Welcome</Text>\n        </View>\n      </View>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  safeContainer: {\n    flex: 1,\n    backgroundColor: 'plum',\n  },\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    paddingTop: Platform.OS === 'android' ? 25 : 0,\n  },\n  box: {\n    padding: 20,\n  },\n  text: {\n    ...Platform.select({\n      ios: {\n        color: 'purple',\n        fontSize: 24,\n        fontStyle: 'italic',\n      },\n      android: {\n        color: 'blue',\n        fontSize: 30,\n      },\n    }),\n    fontWeight: 'bold',\n    textAlign: 'center',\n  },\n})\n")),(0,o.kt)("h4",{id:"platform-specific-extensions"},"Platform-Specific Extensions"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"For more complex platform-specific scenarios, you should rely on the second approach: ",(0,o.kt)("inlineCode",{parentName:"p"},"platform-specific extensions"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In this approach, you split your code into separate files with ",(0,o.kt)("inlineCode",{parentName:"p"},".iOS.js")," and ",(0,o.kt)("inlineCode",{parentName:"p"},".Android.js")," extensions before the file's main extension.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"React Native detects the extension and loads the relevant platform file when required by other components."))),(0,o.kt)("h4",{id:"example"},"example"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},"Within the project folder, create a ",(0,o.kt)("inlineCode",{parentName:"li"},"components")," folder and inside create a ",(0,o.kt)("inlineCode",{parentName:"li"},"CustomButton")," folder"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("ol",{parentName:"li",start:2},(0,o.kt)("li",{parentName:"ol"},"create two files: ",(0,o.kt)("inlineCode",{parentName:"li"},"CustomButton.ios.js"))))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { Pressable, Text } from 'react-native'\n\nconst CustomButton = ({ onPress, title }) => (\n  <Pressable\n    onPress={onPress}\n    style={{\n      justifyContent: 'center',\n      alignItems: 'center',\n      backgroundColor: 'lightblue',\n      borderRadius: 20,\n      padding: 10,\n    }}>\n    <Text style={{ color: 'purple', fontSize: 18 }}>{title}</Text>\n  </Pressable>\n)\n\nexport default CustomButton\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"and ",(0,o.kt)("inlineCode",{parentName:"li"},"CustomButton.android.js"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import React from 'react'\nimport { Pressable, Text } from 'react-native'\n\nconst CustomButton = ({ onPress, title }) => (\n  <Pressable\n    onPress={onPress}\n    style={{\n      justifyContent: 'center',\n      alignItems: 'center',\n      backgroundColor: 'lightblue',\n      borderRadius: 5,\n      padding: 10,\n    }}>\n    <Text style={{ color: 'blue', fontSize: 18 }}>{title}</Text>\n  </Pressable>\n)\n\nexport default CustomButton\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"each containing the platform-specific code for the custom button component.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("ol",{parentName:"li",start:3},(0,o.kt)("li",{parentName:"ol"},"back in App.js import the folder")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet, SafeAreaView, Platform } from 'react-native'\nimport CustomButton from './components/CustomButton/CustomButton'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.safeContainer}>\n      <View style={styles.container}>\n        <View style={styles.box}>\n          <Text style={styles.text}>Welcome</Text>\n        </View>\n      </View>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  safeContainer: {\n    flex: 1,\n    backgroundColor: 'plum',\n  },\n  container: {\n    flex: 1,\n    backgroundColor: 'plum',\n    paddingTop: Platform.OS === 'android' ? 25 : 0,\n  },\n  box: {\n    padding: 20,\n  },\n  text: {\n    ...Platform.select({\n      ios: {\n        color: 'purple',\n        fontSize: 24,\n        fontStyle: 'italic',\n      },\n      android: {\n        color: 'blue',\n        fontSize: 30,\n      },\n    }),\n    fontWeight: 'bold',\n    textAlign: 'center',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("ol",{parentName:"li",start:4},(0,o.kt)("li",{parentName:"ol"},"and then invoke the component"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"By organizing your code this way, React Native will automatically select the appropriate version of the component based on the executing platform."))),(0,o.kt)("h4",{id:"in-summary-2"},"In summary"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"React Native allows you to run platform-specific code using the platform module and platform file extensions.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"You can use Platform.OS or Platform.select for minor style differences.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"However, for more complex components that need distinct appearances or behaviors across the two platforms, using .iOS.js and .Android.js file extensions is recommended.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"With that, we conclude this section on Dynamic UI in React Native.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We've learned how to adapt the application's user interface based on device dimensions using the dimensions API, explored its drawbacks, and understood how the useWindowDimensions hook simplifies working with dimensions and responsive styles.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We've also learned about the SafeAreaView component for iOS, which ensures the application's UI adapts to hardware limitations like notches and rounded corners.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Finally, we looked at running platform-specific code, which can be quite useful as iOS and Android at times require tailor-made user experiences."))),(0,o.kt)("h2",{id:"section-6-exercise-one"},"Section 6: Exercise One"),(0,o.kt)("blockquote",null),(0,o.kt)("h3",{id:"-build-a-pokemon-card-1"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Build a Pokemon Card 1"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-37"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Welcome back! Throughout the series, we have gained a solid understanding of some of the fundamental concepts in React Native.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We have covered core components, creating custom components, styling elements, crafting layouts, and even designing responsive styles based on device dimensions.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In this sixth section of the course, we will put all this knowledge into practice by building a list of Pokemon cards in our application.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Here is what we are aiming to create:")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"a scrollable view displaying four Pokemon cards.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Each card has text content, an image, and styling. It is a great exercise to apply what you've learned so far.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let's type in some code and begin.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"For this section, I have set up a new project called ",(0,o.kt)("inlineCode",{parentName:"p"},"ExerciseOne"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Please feel free to choose any project name you prefer.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"To create a new React Native Expo project, use the command:"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npx create-expo-app ExerciseOne\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Once you have your project set up, let's proceed to build the UI step by step.")),(0,o.kt)("h4",{id:"step-1-modify-appjs"},"Step 1: Modify app.js"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Remove the import for StatusBar and the Text component.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Also, remove the two corresponding components from the JSX.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"For the styles, keep flex as it is and change the background color to #F5F5F5.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Remove the alignItems and justifyContent properties.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"With these changes in place, if we take a look at our devices,"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\n\nexport default function App() {\n  return <View style={styles.container}></View>\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"we will see a gray-colored View.")),(0,o.kt)("h4",{id:"step-2-add-images"},"Step 2: Add Images"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Copy and paste a few images into the assets folder.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"These images will represent the four Pokemon cards.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"You can find these images in my GitHub repository.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("a",{parentName:"p",href:"https://github.com/gopinav/React-Native-Tutorials/tree/main/ExerciseOne/assets"},"https://github.com/gopinav/React-Native-Tutorials/tree/main/ExerciseOne/assets"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"[Please pause the video to download them.]"))),(0,o.kt)("h4",{id:"step-3-create-a-components-folder"},"Step 3: Create a Components Folder"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Create a new folder called ",(0,o.kt)("inlineCode",{parentName:"p"},"components")," within your project folder.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Inside this folder, create a new file named ",(0,o.kt)("inlineCode",{parentName:"p"},"PokemonCard.js"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Within this file, define a simple React Native component."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text } from 'react-native'\n\nexport default function PokemonCard() {\n  return (\n    <View>\n      <Text>Pokemon Card</Text>\n    </View>\n  )\n}\n")),(0,o.kt)("h4",{id:"step-4-import-the-component"},"Step 4: Import the Component"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Import the PokemonCard component in app.js.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport PokemonCard from './components/PokemonCard'\n\nexport default function App() {\n  return <View style={styles.container}></View>\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Invoke this component within the JSX.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, View } from 'react-native'\nimport PokemonCard from './components/PokemonCard'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <PokemonCard />\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'If we save the file and take a look at the devices, you should see the text "Pokemon Card" being rendered.')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"But the placement of the card isn't great."))),(0,o.kt)("h4",{id:"step-5-improve-card-placement"},"Step 5: Improve Card Placement"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Replace the View component import with ",(0,o.kt)("inlineCode",{parentName:"p"},"SafeAreaView"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Update the JSX as well."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, SafeAreaView } from 'react-native'\nimport PokemonCard from './components/PokemonCard'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.container}>\n      <PokemonCard />\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"SafeAreaView")," does not affect Android so let's Add top padding specific to Android devices.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"import ",(0,o.kt)("inlineCode",{parentName:"p"},"Platform")," module from react native")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"and then on the container styles: padding top if platform dot operating system is equal to Android it's going to be 25 pixels else zero")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"(",(0,o.kt)("inlineCode",{parentName:"p"},"paddingTop: Platform.OS === 'android' ? 25 : 0,"),")"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, SafeAreaView, Platform } from 'react-native'\nimport PokemonCard from './components/PokemonCard'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.container}>\n      <PokemonCard />\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5',\n    paddingTop: Platform.OS === 'android' ? 25 : 0,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Now the component is placed in a much better position on iPhones.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"On Android, the ",(0,o.kt)("inlineCode",{parentName:"p"},"SafeAreaView")," adds padding to ensure the card is placed correctly, slightly away from the status bar.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We've made significant progress in this part.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Make sure your code matches mine before moving forward. I'll see you in part two!"))),(0,o.kt)("h3",{id:"-build-a-pokemon-card-2"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Build a Pokemon Card 2"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-38"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In Part 1, we set up our container, added a background color, utilized SafeAreaView for iOS, and applied top padding for Android using the Platform module.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Now, in this video, our focus shifts towards styling our card component. Let's pick up where we left off and move on to Step 6."))),(0,o.kt)("h4",{id:"step-6-styling-with-stylesheet-api"},"Step 6: Styling with Stylesheet API"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"in ",(0,o.kt)("inlineCode",{parentName:"p"},"PokemonCard.js"),", Import the Stylesheet API from React Native.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Use the ",(0,o.kt)("inlineCode",{parentName:"p"},".create()")," method to define styles and assign them to the ",(0,o.kt)("inlineCode",{parentName:"p"},"styles")," constant."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet } from 'react-native'\n\nexport default function PokemonCard() {\n  return (\n    <View>\n      <Text>Pokemon Card</Text>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({})\n")),(0,o.kt)("h4",{id:"add-card-styling"},"Add Card Styling"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Create a new key called ",(0,o.kt)("inlineCode",{parentName:"p"},"card")," within the ",(0,o.kt)("inlineCode",{parentName:"p"},"styles")," object.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Apply styling to the View component using the defined ",(0,o.kt)("inlineCode",{parentName:"p"},"card")," style."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet } from 'react-native'\n\nexport default function PokemonCard() {\n  return (\n    <View style={styles.card}>\n      <Text>Pokemon Card</Text>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  card: {},\n})\n")),(0,o.kt)("h4",{id:"define-card-styles"},"Define Card Styles"),(0,o.kt)("p",null,"For the card, let's start with these styles:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Background color: white,")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Border radius: 16,")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"borderWidth: 2,")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Padding: 16, (for creating spacing within the card)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Margin: 16, (for spacing between the cards)"))),(0,o.kt)("h4",{id:"adding-shadow-effect"},"Adding Shadow Effect"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"for the card Shadow effect we rely on the ",(0,o.kt)("inlineCode",{parentName:"p"},"Platform")," module")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Import the ",(0,o.kt)("inlineCode",{parentName:"p"},"Platform")," module from React Native.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Utilize (spread)",(0,o.kt)("inlineCode",{parentName:"p"},"...Platform.select()")," to apply platform-specific shadow properties."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet, Platform } from 'react-native'\n\nexport default function PokemonCard() {\n  return (\n    <View style={styles.card}>\n      <Text>Pokemon Card</Text>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    backgroundColor: 'white',\n    borderRadius: 16,\n    borderWidth: 2,\n    padding: 16,\n    margin: 16,\n    ...Platform.select({\n      ios: {},\n      android: {},\n    }),\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Define shadow properties for both ",(0,o.kt)("inlineCode",{parentName:"li"},"ios")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"Android")," within the ",(0,o.kt)("inlineCode",{parentName:"li"},"card")," style.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet, Platform } from 'react-native'\n\nexport default function PokemonCard() {\n  return (\n    <View style={styles.card}>\n      <Text>Pokemon Card</Text>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    backgroundColor: 'white',\n    borderRadius: 16,\n    borderWidth: 2,\n    padding: 16,\n    margin: 16,\n    ...Platform.select({\n      ios: {\n        shadowOffset: { width: 2, height: 2 },\n        shadowColor: '333',\n        shadowOpacity: 0.3,\n        shadowRadius: 4,\n      },\n      android: {\n        elevation: 5,\n      },\n    }),\n  },\n})\n")),(0,o.kt)("p",null,"And that's it! Taking a look at our UI, the card component should now have a visually appealing appearance."),(0,o.kt)("h3",{id:"-build-a-pokemon-card-3"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Build a Pokemon Card 3"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-39"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Welcome to Part Three of building a Pok\xe9mon card in React Native.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In Part 2, we successfully styled our card component to resemble an actual card.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In this video, our focus will shift towards crafting the content of the card component.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let's pick up where we left off and proceed with Step 7."))),(0,o.kt)("h4",{id:"step-7-defining-pok\xe9mon-properties"},"Step 7: Defining Pok\xe9mon Properties:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In ",(0,o.kt)("inlineCode",{parentName:"p"},"App.js"),", define the properties of the Pok\xe9mon that need to be rendered in the card component.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"For instance, let's consider Charmander:"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Name: Charmander")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Image: Require from ",(0,o.kt)("inlineCode",{parentName:"p"},"assets/charmander.png"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Type: Fire")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"HP: 39")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Moves: Scratch, Ember, etc.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Weaknesses: Water and rock type Pok\xe9mon"))))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, SafeAreaView, Platform } from 'react-native'\nimport PokemonCard from './components/PokemonCard'\n\nexport default function App() {\n  const charmanderData = {\n    name: 'Charmander',\n    image: require('./assets/charmander.png'),\n    type: 'Fire',\n    hp: 39,\n    moves: ['Scratch', 'Ember', 'Growl', 'Leer'],\n    weaknesses: ['Water', 'Rock'],\n  }\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <PokemonCard />\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5',\n    paddingTop: Platform.OS === 'android' ? 25 : 0,\n  },\n})\n")),(0,o.kt)("h4",{id:"step-72--passing-properties-as-props"},"Step 7/2 : Passing Properties as Props:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Pass all these properties as props to the ",(0,o.kt)("inlineCode",{parentName:"p"},"PokemonCard")," component using the spread operator.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"For instance:"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, SafeAreaView, Platform } from 'react-native'\nimport PokemonCard from './components/PokemonCard'\n\nexport default function App() {\n  const charmanderData = {\n    name: 'Charmander',\n    image: require('./assets/charmander.png'),\n    type: 'Fire',\n    hp: 39,\n    moves: ['Scratch', 'Ember', 'Growl', 'Leer'],\n    weaknesses: ['Water', 'Rock'],\n  }\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <PokemonCard {...charmanderData} />\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5',\n    paddingTop: Platform.OS === 'android' ? 25 : 0,\n  },\n})\n")),(0,o.kt)("h4",{id:"step-8-destructuring-props"},"Step 8: Destructuring Props:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In ",(0,o.kt)("inlineCode",{parentName:"p"},"PokemonCard.js"),", destructure the properties from the component props.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We have:"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"name")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"image")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"type")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"hp")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"moves")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"weaknesses"))))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet, Platform } from 'react-native'\n\nexport default function PokemonCard({ name, image, type, hp, moves, weaknesses }) {\n  return (\n    <View style={styles.card}>\n      <Text>Pokemon Card</Text>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    backgroundColor: 'white',\n    borderRadius: 16,\n    borderWidth: 2,\n    padding: 16,\n    margin: 16,\n    ...Platform.select({\n      ios: {\n        shadowOffset: { width: 2, height: 2 },\n        shadowColor: '333',\n        shadowOpacity: 0.3,\n        shadowRadius: 4,\n      },\n      android: {\n        elevation: 5,\n      },\n    }),\n  },\n})\n")),(0,o.kt)("h4",{id:"rendering-content"},"Rendering Content:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Render all these props using the appropriate core components from React Native.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"A card component will have five blocks:"),(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},"Name and HP"),(0,o.kt)("li",{parentName:"ol"},"Pok\xe9mon image"),(0,o.kt)("li",{parentName:"ol"},"Pok\xe9mon type"),(0,o.kt)("li",{parentName:"ol"},"Moves"),(0,o.kt)("li",{parentName:"ol"},"Weaknesses")))),(0,o.kt)("h4",{id:"step-9-block-one---name-and-hp"},"Step 9: Block One - Name and HP:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Render a View with name and HP text nested inside.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"import { View, Text, StyleSheet, Platform } from 'react-native'\n\nexport default function PokemonCard({ name, image, type, hp, moves, weaknesses }) {\n  return (\n    <View style={styles.card}>\n      <View>\n        <Text>{name}</Text>\n        <Text>{hp}</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    backgroundColor: 'white',\n    borderRadius: 16,\n    borderWidth: 2,\n    padding: 16,\n    margin: 16,\n    ...Platform.select({\n      ios: {\n        shadowOffset: { width: 2, height: 2 },\n        shadowColor: '333',\n        shadowOpacity: 0.3,\n        shadowRadius: 4,\n      },\n      android: {\n        elevation: 5,\n      },\n    }),\n  },\n})\n")),(0,o.kt)("h4",{id:"step-10-block-two---pok\xe9mon-image"},"Step 10: Block Two - Pok\xe9mon Image:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Utilize the Image component to display the Pok\xe9mon image. Add an ",(0,o.kt)("inlineCode",{parentName:"li"},"accessibilityLabel")," for best practice.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet, Platform, Image } from 'react-native'\n\nexport default function PokemonCard({ name, image, type, hp, moves, weaknesses }) {\n  return (\n    <View style={styles.card}>\n      <View>\n        <Text>{name}</Text>\n        <Text>{hp}</Text>\n      </View>\n\n      <Image\n        source={image}\n        accessibilityLabel={`${name} pokemon`}\n      />\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    backgroundColor: 'white',\n    borderRadius: 16,\n    borderWidth: 2,\n    padding: 16,\n    margin: 16,\n    ...Platform.select({\n      ios: {\n        shadowOffset: { width: 2, height: 2 },\n        shadowColor: '333',\n        shadowOpacity: 0.3,\n        shadowRadius: 4,\n      },\n      android: {\n        elevation: 5,\n      },\n    }),\n  },\n})\n")),(0,o.kt)("h4",{id:"step-11-block-three---pok\xe9mon-type"},"Step 11: Block Three - Pok\xe9mon Type:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Display the Pok\xe9mon type using the Text component.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet, Platform, Image } from 'react-native'\n\nexport default function PokemonCard({ name, image, type, hp, moves, weaknesses }) {\n  return (\n    <View style={styles.card}>\n      <View>\n        <Text>{name}</Text>\n        <Text>{hp}</Text>\n      </View>\n\n      <Image\n        source={image}\n        accessibilityLabel={`${name} pokemon`}\n      />\n\n      <View>\n        <Text>{type}</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    backgroundColor: 'white',\n    borderRadius: 16,\n    borderWidth: 2,\n    padding: 16,\n    margin: 16,\n    ...Platform.select({\n      ios: {\n        shadowOffset: { width: 2, height: 2 },\n        shadowColor: '333',\n        shadowOpacity: 0.3,\n        shadowRadius: 4,\n      },\n      android: {\n        elevation: 5,\n      },\n    }),\n  },\n})\n")),(0,o.kt)("h4",{id:"step-12-block-four---moves"},"Step 12: Block Four - Moves:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Render a list of comma-separated moves.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet, Platform, Image } from 'react-native'\n\nexport default function PokemonCard({ name, image, type, hp, moves, weaknesses }) {\n  return (\n    <View style={styles.card}>\n      <View>\n        <Text>{name}</Text>\n        <Text>{hp}</Text>\n      </View>\n\n      <Image\n        source={image}\n        accessibilityLabel={`${name} pokemon`}\n      />\n\n      <View>\n        <Text>{type}</Text>\n      </View>\n\n      <View>\n        <Text>Moves: {moves.join(', ')}</Text>\n      </View>\n    </View>\n  )\n}\n")),(0,o.kt)("h4",{id:"step-13-block-five---weaknesses"},"Step 13: Block Five - Weaknesses:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Display a list of comma-separated weaknesses.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet, Platform, Image } from 'react-native'\n\nexport default function PokemonCard({ name, image, type, hp, moves, weaknesses }) {\n  return (\n    <View style={styles.card}>\n      <View>\n        <Text>{name}</Text>\n        <Text>{hp}</Text>\n      </View>\n\n      <Image\n        source={image}\n        accessibilityLabel={`${name} pokemon`}\n      />\n\n      <View>\n        <Text>{type}</Text>\n      </View>\n\n      <View>\n        <Text>Moves: {moves.join(', ')}</Text>\n      </View>\n      <View>\n        <Text>Weakness: {weaknesses.join(', ')}</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    backgroundColor: 'white',\n    borderRadius: 16,\n    borderWidth: 2,\n    padding: 16,\n    margin: 16,\n    ...Platform.select({\n      ios: {\n        shadowOffset: { width: 2, height: 2 },\n        shadowColor: '333',\n        shadowOpacity: 0.3,\n        shadowRadius: 4,\n      },\n      android: {\n        elevation: 5,\n      },\n    }),\n  },\n})\n")),(0,o.kt)("h4",{id:"previewing-the-ui"},"Previewing the UI:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Save the file and preview the UI.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If you find the image appearing too large, don't worry; we'll address that shortly.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"For now, you can comment it out to ensure other props are rendering correctly."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet, Platform, Image } from 'react-native'\n\nexport default function PokemonCard({ name, image, type, hp, moves, weaknesses }) {\n  return (\n    <View style={styles.card}>\n      <View>\n        <Text>{name}</Text>\n        <Text>{hp}</Text>\n      </View>\n\n      {/* <Image\n        source={image}\n        accessibilityLabel={`${name} pokemon`}\n      /> */}\n\n      <View>\n        <Text>{type}</Text>\n      </View>\n\n      <View>\n        <Text>Moves: {moves.join(', ')}</Text>\n      </View>\n      <View>\n        <Text>Weakness: {weaknesses.join(', ')}</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    backgroundColor: 'white',\n    borderRadius: 16,\n    borderWidth: 2,\n    padding: 16,\n    margin: 16,\n    ...Platform.select({\n      ios: {\n        shadowOffset: { width: 2, height: 2 },\n        shadowColor: '333',\n        shadowOpacity: 0.3,\n        shadowRadius: 4,\n      },\n      android: {\n        elevation: 5,\n      },\n    }),\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Observe the UI, and you will now see the remaining content displayed, including name, HP, type, moves, and weaknesses.")),(0,o.kt)("p",null,"This concludes Part 3 of our tutorial. In the next video, we will delve into styling the content within this card component."),(0,o.kt)("h3",{id:"-build-a-pokemon-card-4"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Build a Pokemon Card 4"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-40"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Welcome to Part 4 of building a Pok\xe9mon card in React Native.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In Part 3, we focused on the card component's content.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In this video, let's shift our concentration to styling the content.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Once again, we're picking up where we left off."))),(0,o.kt)("h4",{id:"step-14-styling-the-name-and-hp-block"},"Step 14: Styling the Name and HP Block"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Start with the first block that renders the name and HP.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Apply styles to each of the elements in this block."),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"style")," prop for the wrapping view: ",(0,o.kt)("inlineCode",{parentName:"p"},"Styles.nameContainer"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"style")," prop for the name text element: ",(0,o.kt)("inlineCode",{parentName:"p"},"Styles.name"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"style")," prop for HP text element: ",(0,o.kt)("inlineCode",{parentName:"p"},"Styles.hp"),"."))))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet, Platform, Image } from 'react-native'\n\nexport default function PokemonCard({ name, image, type, hp, moves, weaknesses }) {\n  return (\n    <View style={styles.card}>\n      <View style={styles.nameContainer}>\n        <Text style={styles.name}>{name}</Text>\n        <Text style={styles.hp}>{hp}</Text>\n      </View>\n\n      {/* <Image\n        source={image}\n        accessibilityLabel={`${name} pokemon`}\n      /> */}\n\n      <View>\n        <Text>{type}</Text>\n      </View>\n\n      <View>\n        <Text>Moves: {moves.join(', ')}</Text>\n      </View>\n      <View>\n        <Text>Weakness: {weaknesses.join(', ')}</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    backgroundColor: 'white',\n    borderRadius: 16,\n    borderWidth: 2,\n    padding: 16,\n    margin: 16,\n    ...Platform.select({\n      ios: {\n        shadowOffset: { width: 2, height: 2 },\n        shadowColor: '333',\n        shadowOpacity: 0.3,\n        shadowRadius: 4,\n      },\n      android: {\n        elevation: 5,\n      },\n    }),\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Now Define these styles in the stylesheet object.")),(0,o.kt)("h4",{id:"namecontainer-style"},"nameContainer Style:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Set ",(0,o.kt)("inlineCode",{parentName:"p"},"flexDirection")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"row")," to align the name and HP horizontally.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Add spacing between the text items with ",(0,o.kt)("inlineCode",{parentName:"p"},"justifyContent: 'space-between'"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Set a bottom margin for spacing with the next block."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet, Platform, Image } from 'react-native'\n\nexport default function PokemonCard({ name, image, type, hp, moves, weaknesses }) {\n  return (\n    <View style={styles.card}>\n      <View style={styles.nameContainer}>\n        <Text style={styles.name}>{name}</Text>\n        <Text style={styles.hp}>{hp}</Text>\n      </View>\n\n      {/* <Image\n        source={image}\n        accessibilityLabel={`${name} pokemon`}\n      /> */}\n\n      <View>\n        <Text>{type}</Text>\n      </View>\n\n      <View>\n        <Text>Moves: {moves.join(', ')}</Text>\n      </View>\n      <View>\n        <Text>Weakness: {weaknesses.join(', ')}</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    backgroundColor: 'white',\n    borderRadius: 16,\n    borderWidth: 2,\n    padding: 16,\n    margin: 16,\n    ...Platform.select({\n      ios: {\n        shadowOffset: { width: 2, height: 2 },\n        shadowColor: '333',\n        shadowOpacity: 0.3,\n        shadowRadius: 4,\n      },\n      android: {\n        elevation: 5,\n      },\n    }),\n  },\n  nameContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 32,\n  },\n})\n")),(0,o.kt)("h4",{id:"name-text-style"},"Name Text Style:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Increase font size.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Set font weight to bold."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet, Platform, Image } from 'react-native'\n\nexport default function PokemonCard({ name, image, type, hp, moves, weaknesses }) {\n  return (\n    <View style={styles.card}>\n      <View style={styles.nameContainer}>\n        <Text style={styles.name}>{name}</Text>\n        <Text style={styles.hp}>{hp}</Text>\n      </View>\n\n      {/* <Image\n        source={image}\n        accessibilityLabel={`${name} pokemon`}\n      /> */}\n\n      <View>\n        <Text>{type}</Text>\n      </View>\n\n      <View>\n        <Text>Moves: {moves.join(', ')}</Text>\n      </View>\n      <View>\n        <Text>Weakness: {weaknesses.join(', ')}</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    backgroundColor: 'white',\n    borderRadius: 16,\n    borderWidth: 2,\n    padding: 16,\n    margin: 16,\n    ...Platform.select({\n      ios: {\n        shadowOffset: { width: 2, height: 2 },\n        shadowColor: '333',\n        shadowOpacity: 0.3,\n        shadowRadius: 4,\n      },\n      android: {\n        elevation: 5,\n      },\n    }),\n  },\n  nameContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 32,\n  },\n  name: {\n    fontSize: 30,\n    fontWeight: 'bold',\n  },\n})\n")),(0,o.kt)("h4",{id:"hp-text-style"},"HP Text Style:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Set font size to 22.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Add a heart emoji in the jsx to represent HP."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet, Platform, Image } from 'react-native'\n\nexport default function PokemonCard({ name, image, type, hp, moves, weaknesses }) {\n  return (\n    <View style={styles.card}>\n      <View style={styles.nameContainer}>\n        <Text style={styles.name}>{name}</Text>\n        <Text style={styles.hp}>\u2764\ufe0f{hp}</Text>\n      </View>\n\n      {/* <Image\n        source={image}\n        accessibilityLabel={`${name} pokemon`}\n      /> */}\n\n      <View>\n        <Text>{type}</Text>\n      </View>\n\n      <View>\n        <Text>Moves: {moves.join(', ')}</Text>\n      </View>\n      <View>\n        <Text>Weakness: {weaknesses.join(', ')}</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    backgroundColor: 'white',\n    borderRadius: 16,\n    borderWidth: 2,\n    padding: 16,\n    margin: 16,\n    ...Platform.select({\n      ios: {\n        shadowOffset: { width: 2, height: 2 },\n        shadowColor: '333',\n        shadowOpacity: 0.3,\n        shadowRadius: 4,\n      },\n      android: {\n        elevation: 5,\n      },\n    }),\n  },\n  nameContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 32,\n  },\n  name: {\n    fontSize: 30,\n    fontWeight: 'bold',\n  },\n  hp: {\n    fontSize: 22,\n  },\n})\n")),(0,o.kt)("h4",{id:"step-15-styling-the-image-block"},"Step 15: Styling the Image Block"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"For the second block (image), add ",(0,o.kt)("inlineCode",{parentName:"li"},"style")," prop: ",(0,o.kt)("inlineCode",{parentName:"li"},"Styles.image"),".")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet, Platform, Image } from 'react-native'\n\nexport default function PokemonCard({ name, image, type, hp, moves, weaknesses }) {\n  return (\n    <View style={styles.card}>\n      <View style={styles.nameContainer}>\n        <Text style={styles.name}>{name}</Text>\n        <Text style={styles.hp}>\u2764\ufe0f{hp}</Text>\n      </View>\n\n      <Image\n        style={styles.image}\n        source={image}\n        accessibilityLabel={`${name} pokemon`}\n      />\n\n      <View>\n        <Text>{type}</Text>\n      </View>\n\n      <View>\n        <Text>Moves: {moves.join(', ')}</Text>\n      </View>\n      <View>\n        <Text>Weakness: {weaknesses.join(', ')}</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    backgroundColor: 'white',\n    borderRadius: 16,\n    borderWidth: 2,\n    padding: 16,\n    margin: 16,\n    ...Platform.select({\n      ios: {\n        shadowOffset: { width: 2, height: 2 },\n        shadowColor: '333',\n        shadowOpacity: 0.3,\n        shadowRadius: 4,\n      },\n      android: {\n        elevation: 5,\n      },\n    }),\n  },\n  nameContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 32,\n  },\n  name: {\n    fontSize: 30,\n    fontWeight: 'bold',\n  },\n  hp: {\n    fontSize: 22,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Define this style in the stylesheet object."),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Set width to 100%.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Set height to 200.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Add margin bottom for spacing."))))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet, Platform, Image } from 'react-native'\n\nexport default function PokemonCard({ name, image, type, hp, moves, weaknesses }) {\n  return (\n    <View style={styles.card}>\n      <View style={styles.nameContainer}>\n        <Text style={styles.name}>{name}</Text>\n        <Text style={styles.hp}>\u2764\ufe0f{hp}</Text>\n      </View>\n\n      <Image\n        style={styles.image}\n        source={image}\n        accessibilityLabel={`${name} pokemon`}\n      />\n\n      <View>\n        <Text>{type}</Text>\n      </View>\n\n      <View>\n        <Text>Moves: {moves.join(', ')}</Text>\n      </View>\n      <View>\n        <Text>Weakness: {weaknesses.join(', ')}</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    backgroundColor: 'white',\n    borderRadius: 16,\n    borderWidth: 2,\n    padding: 16,\n    margin: 16,\n    ...Platform.select({\n      ios: {\n        shadowOffset: { width: 2, height: 2 },\n        shadowColor: '333',\n        shadowOpacity: 0.3,\n        shadowRadius: 4,\n      },\n      android: {\n        elevation: 5,\n      },\n    }),\n  },\n  nameContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 32,\n  },\n  name: {\n    fontSize: 30,\n    fontWeight: 'bold',\n  },\n  hp: {\n    fontSize: 22,\n  },\n  image: {\n    width: '100%',\n    height: 200,\n    marginBottom: 16,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"To fix cropping, add ",(0,o.kt)("inlineCode",{parentName:"li"},"resizeMode")," prop to the image component and set it to ",(0,o.kt)("inlineCode",{parentName:"li"},"contain"),".")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet, Platform, Image } from 'react-native'\n\nexport default function PokemonCard({ name, image, type, hp, moves, weaknesses }) {\n  return (\n    <View style={styles.card}>\n      <View style={styles.nameContainer}>\n        <Text style={styles.name}>{name}</Text>\n        <Text style={styles.hp}>\u2764\ufe0f{hp}</Text>\n      </View>\n\n      <Image\n        style={styles.image}\n        source={image}\n        accessibilityLabel={`${name} pokemon`}\n        resizeMode='contain'\n      />\n\n      <View>\n        <Text>{type}</Text>\n      </View>\n\n      <View>\n        <Text>Moves: {moves.join(', ')}</Text>\n      </View>\n      <View>\n        <Text>Weakness: {weaknesses.join(', ')}</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    backgroundColor: 'white',\n    borderRadius: 16,\n    borderWidth: 2,\n    padding: 16,\n    margin: 16,\n    ...Platform.select({\n      ios: {\n        shadowOffset: { width: 2, height: 2 },\n        shadowColor: '333',\n        shadowOpacity: 0.3,\n        shadowRadius: 4,\n      },\n      android: {\n        elevation: 5,\n      },\n    }),\n  },\n  nameContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 32,\n  },\n  name: {\n    fontSize: 30,\n    fontWeight: 'bold',\n  },\n  hp: {\n    fontSize: 22,\n  },\n  image: {\n    width: '100%',\n    height: 200,\n    marginBottom: 16,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Now the image block is perfectly positioned.")),(0,o.kt)("h4",{id:"conclusion-5"},"Conclusion:"),(0,o.kt)("p",null,"I'll stop here as we're halfway through the styling process. Let's continue with the remaining styles in Part 5."),(0,o.kt)("h3",{id:"-build-a-pokemon-card-5"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Build a Pokemon Card 5"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-41"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Welcome to Part 5 of building a Pok\xe9mon card in React Native.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In Part 4, we concentrated on styling the first two blocks within our card component.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In this video, let's shift our attention to the remaining three blocks.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Once again, we will pick up where we left off."))),(0,o.kt)("h4",{id:"step-16-styling-the-pok\xe9mon-type-block"},"Step 16: Styling the Pok\xe9mon type Block"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Apply styles to the third block that displays the Pok\xe9mon ",(0,o.kt)("inlineCode",{parentName:"p"},"type"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We'll render the type in a badge along with an emoji representing the Pok\xe9mon type.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Include a function that returns badge styles based on the Pok\xe9mon type."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet, Platform, Image } from 'react-native'\n\nconst getTypeDetails = type => {\n  switch (type.toLowerCase()) {\n    case 'electric':\n      return { borderColor: '#FFD700', emoji: '\u26a1\ufe0f' }\n    case 'water':\n      return { borderColor: '#6493EA', emoji: '\ud83d\udca7' }\n    case 'fire':\n      return { borderColor: '#FF5733', emoji: '\ud83d\udd25' }\n    case 'grass':\n      return { borderColor: '#66CC66', emoji: '\ud83c\udf3f' }\n    default:\n      return { borderColor: '#A0A0A0', emoji: '\u2753' }\n  }\n}\n\nexport default function PokemonCard({ name, image, type, hp, moves, weaknesses }) {\n  return (\n    <View style={styles.card}>\n      <View style={styles.nameContainer}>\n        <Text style={styles.name}>{name}</Text>\n        <Text style={styles.hp}>\u2764\ufe0f{hp}</Text>\n      </View>\n\n      <Image\n        style={styles.image}\n        source={image}\n        accessibilityLabel={`${name} pokemon`}\n        resizeMode='contain'\n      />\n\n      <View>\n        <Text>{type}</Text>\n      </View>\n\n      <View>\n        <Text>Moves: {moves.join(', ')}</Text>\n      </View>\n      <View>\n        <Text>Weakness: {weaknesses.join(', ')}</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    backgroundColor: 'white',\n    borderRadius: 16,\n    borderWidth: 2,\n    padding: 16,\n    margin: 16,\n    ...Platform.select({\n      ios: {\n        shadowOffset: { width: 2, height: 2 },\n        shadowColor: '333',\n        shadowOpacity: 0.3,\n        shadowRadius: 4,\n      },\n      android: {\n        elevation: 5,\n      },\n    }),\n  },\n  nameContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 32,\n  },\n  name: {\n    fontSize: 30,\n    fontWeight: 'bold',\n  },\n  hp: {\n    fontSize: 22,\n  },\n  image: {\n    width: '100%',\n    height: 200,\n    marginBottom: 16,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"this function ",(0,o.kt)("inlineCode",{parentName:"p"},"getTypeDetails")," returns a border color and an emoji based on the"),(0,o.kt)("p",{parentName:"li"},"Pokemon type")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Invoke this function to get ",(0,o.kt)("inlineCode",{parentName:"p"},"borderColor")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"emoji")," based on the type."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet, Platform, Image } from 'react-native'\n\nconst getTypeDetails = type => {\n  switch (type.toLowerCase()) {\n    case 'electric':\n      return { borderColor: '#FFD700', emoji: '\u26a1\ufe0f' }\n    case 'water':\n      return { borderColor: '#6493EA', emoji: '\ud83d\udca7' }\n    case 'fire':\n      return { borderColor: '#FF5733', emoji: '\ud83d\udd25' }\n    case 'grass':\n      return { borderColor: '#66CC66', emoji: '\ud83c\udf3f' }\n    default:\n      return { borderColor: '#A0A0A0', emoji: '\u2753' }\n  }\n}\n\nexport default function PokemonCard({ name, image, type, hp, moves, weaknesses }) {\n  const { borderColor, emoji } = getTypeDetails(type)\n\n  return (\n    <View style={styles.card}>\n      <View style={styles.nameContainer}>\n        <Text style={styles.name}>{name}</Text>\n        <Text style={styles.hp}>\u2764\ufe0f{hp}</Text>\n      </View>\n\n      <Image\n        style={styles.image}\n        source={image}\n        accessibilityLabel={`${name} pokemon`}\n        resizeMode='contain'\n      />\n\n      <View>\n        <Text>{type}</Text>\n      </View>\n\n      <View>\n        <Text>Moves: {moves.join(', ')}</Text>\n      </View>\n      <View>\n        <Text>Weakness: {weaknesses.join(', ')}</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    backgroundColor: 'white',\n    borderRadius: 16,\n    borderWidth: 2,\n    padding: 16,\n    margin: 16,\n    ...Platform.select({\n      ios: {\n        shadowOffset: { width: 2, height: 2 },\n        shadowColor: '333',\n        shadowOpacity: 0.3,\n        shadowRadius: 4,\n      },\n      android: {\n        elevation: 5,\n      },\n    }),\n  },\n  nameContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 32,\n  },\n  name: {\n    fontSize: 30,\n    fontWeight: 'bold',\n  },\n  hp: {\n    fontSize: 22,\n  },\n  image: {\n    width: '100%',\n    height: 200,\n    marginBottom: 16,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Apply styles to the type block:"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Wrap the text element with a View representing the badge.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Create another View to Display the corresponding emoji within the badge view by")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"duplicating the line and binding ",(0,o.kt)("inlineCode",{parentName:"p"},"{emoji}"),", which we have destructured from ",(0,o.kt)("inlineCode",{parentName:"p"},"getTypeDetails")," function"))))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet, Platform, Image } from 'react-native'\n\nconst getTypeDetails = type => {\n  switch (type.toLowerCase()) {\n    case 'electric':\n      return { borderColor: '#FFD700', emoji: '\u26a1\ufe0f' }\n    case 'water':\n      return { borderColor: '#6493EA', emoji: '\ud83d\udca7' }\n    case 'fire':\n      return { borderColor: '#FF5733', emoji: '\ud83d\udd25' }\n    case 'grass':\n      return { borderColor: '#66CC66', emoji: '\ud83c\udf3f' }\n    default:\n      return { borderColor: '#A0A0A0', emoji: '\u2753' }\n  }\n}\n\nexport default function PokemonCard({ name, image, type, hp, moves, weaknesses }) {\n  const { borderColor, emoji } = getTypeDetails(type)\n\n  return (\n    <View style={styles.card}>\n      <View style={styles.nameContainer}>\n        <Text style={styles.name}>{name}</Text>\n        <Text style={styles.hp}>\u2764\ufe0f{hp}</Text>\n      </View>\n\n      <Image\n        style={styles.image}\n        source={image}\n        accessibilityLabel={`${name} pokemon`}\n        resizeMode='contain'\n      />\n\n      <View>\n        <View>\n          <Text>{emoji}</Text>\n          <Text>{type}</Text>\n        </View>\n      </View>\n\n      <View>\n        <Text>Moves: {moves.join(', ')}</Text>\n      </View>\n      <View>\n        <Text>Weakness: {weaknesses.join(', ')}</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    backgroundColor: 'white',\n    borderRadius: 16,\n    borderWidth: 2,\n    padding: 16,\n    margin: 16,\n    ...Platform.select({\n      ios: {\n        shadowOffset: { width: 2, height: 2 },\n        shadowColor: '333',\n        shadowOpacity: 0.3,\n        shadowRadius: 4,\n      },\n      android: {\n        elevation: 5,\n      },\n    }),\n  },\n  nameContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 32,\n  },\n  name: {\n    fontSize: 30,\n    fontWeight: 'bold',\n  },\n  hp: {\n    fontSize: 22,\n  },\n  image: {\n    width: '100%',\n    height: 200,\n    marginBottom: 16,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Apply styles to each element: ",(0,o.kt)("inlineCode",{parentName:"p"},"styles.typeContainer"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"styles.badge"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"styles.typeEmoji"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"styles.typeText"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"so for the outer container style is equal to ",(0,o.kt)("inlineCode",{parentName:"p"},"styles.typeContainer"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"for the inner view component style is equal to an array ",(0,o.kt)("inlineCode",{parentName:"p"},"[]"),", where we apply ",(0,o.kt)("inlineCode",{parentName:"p"},"styles.badge"),", which we are going to Define, and we also said ",(0,o.kt)("inlineCode",{parentName:"p"},"borderColor`` to the Border color destructured from "),"getTypeDetails`")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"next on the Emoji text style is equal to ",(0,o.kt)("inlineCode",{parentName:"p"},"styles.typeEmoji")))),(0,o.kt)("p",null,"-and then style is equal to ",(0,o.kt)("inlineCode",{parentName:"p"},"styles.typeText")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet, Platform, Image } from 'react-native'\n\nconst getTypeDetails = type => {\n  switch (type.toLowerCase()) {\n    case 'electric':\n      return { borderColor: '#FFD700', emoji: '\u26a1\ufe0f' }\n    case 'water':\n      return { borderColor: '#6493EA', emoji: '\ud83d\udca7' }\n    case 'fire':\n      return { borderColor: '#FF5733', emoji: '\ud83d\udd25' }\n    case 'grass':\n      return { borderColor: '#66CC66', emoji: '\ud83c\udf3f' }\n    default:\n      return { borderColor: '#A0A0A0', emoji: '\u2753' }\n  }\n}\n\nexport default function PokemonCard({ name, image, type, hp, moves, weaknesses }) {\n  const { borderColor, emoji } = getTypeDetails(type)\n\n  return (\n    <View style={styles.card}>\n      <View style={styles.nameContainer}>\n        <Text style={styles.name}>{name}</Text>\n        <Text style={styles.hp}>\u2764\ufe0f{hp}</Text>\n      </View>\n\n      <Image\n        style={styles.image}\n        source={image}\n        accessibilityLabel={`${name} pokemon`}\n        resizeMode='contain'\n      />\n\n      <View style={styles.typeContainer}>\n        <View style={[styles.badge, { borderColor }]}>\n          <Text style={styles.typeEmoji}>{emoji}</Text>\n          <Text style={styles.typeText}>{type}</Text>\n        </View>\n      </View>\n\n      <View>\n        <Text>Moves: {moves.join(', ')}</Text>\n      </View>\n      <View>\n        <Text>Weakness: {weaknesses.join(', ')}</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    backgroundColor: 'white',\n    borderRadius: 16,\n    borderWidth: 2,\n    padding: 16,\n    margin: 16,\n    ...Platform.select({\n      ios: {\n        shadowOffset: { width: 2, height: 2 },\n        shadowColor: '333',\n        shadowOpacity: 0.3,\n        shadowRadius: 4,\n      },\n      android: {\n        elevation: 5,\n      },\n    }),\n  },\n  nameContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    marginBottom: 32,\n  },\n  name: {\n    fontSize: 30,\n    fontWeight: 'bold',\n  },\n  hp: {\n    fontSize: 22,\n  },\n  image: {\n    width: '100%',\n    height: 200,\n    marginBottom: 16,\n  },\n})\n")),(0,o.kt)("h4",{id:"define-the-key-value-pairs-for-each-of-these-styles"},"Define the key value pairs for each of these styles"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"typeContainer:")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"badge:")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"typeEmoji:")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"typeText:"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet, Platform, Image } from 'react-native'\n\nconst getTypeDetails = type => {\n  switch (type.toLowerCase()) {\n    case 'electric':\n      return { borderColor: '#FFD700', emoji: '\u26a1\ufe0f' }\n    case 'water':\n      return { borderColor: '#6493EA', emoji: '\ud83d\udca7' }\n    case 'fire':\n      return { borderColor: '#FF5733', emoji: '\ud83d\udd25' }\n    case 'grass':\n      return { borderColor: '#66CC66', emoji: '\ud83c\udf3f' }\n    default:\n      return { borderColor: '#A0A0A0', emoji: '\u2753' }\n  }\n}\n\nexport default function PokemonCard({ name, image, type, hp, moves, weaknesses }) {\n  const { borderColor, emoji } = getTypeDetails(type)\n\n  return (\n    <View style={styles.card}>\n      <View style={styles.nameContainer}>\n        <Text style={styles.name}>{name}</Text>\n        <Text style={styles.hp}>\u2764\ufe0f{hp}</Text>\n      </View>\n\n      <Image\n        style={styles.image}\n        source={image}\n        accessibilityLabel={`${name} pokemon`}\n        resizeMode='contain'\n      />\n\n      <View style={styles.typeContainer}>\n        <View style={[styles.badge, { borderColor }]}>\n          <Text style={styles.typeEmoji}>{emoji}</Text>\n          <Text style={styles.typeText}>{type}</Text>\n        </View>\n      </View>\n\n      <View>\n        <Text>Moves: {moves.join(', ')}</Text>\n      </View>\n      <View>\n        <Text>Weakness: {weaknesses.join(', ')}</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    backgroundColor: 'white',\n    borderRadius: 16,\n    borderWidth: 2,\n    padding: 16,\n    margin: 16,\n    ...Platform.select({\n      ios: {\n        shadowOffset: { width: 2, height: 2 },\n        shadowColor: '#333',\n        shadowOpacity: 0.3,\n        shadowRadius: 4,\n      },\n      android: {\n        elevation: 5,\n      },\n    }),\n  },\n  nameContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    width: '100%',\n    marginBottom: 32,\n  },\n  name: {\n    fontSize: 30,\n    fontWeight: 'bold',\n  },\n  hp: {\n    fontSize: 22,\n  },\n  image: {\n    width: '100%',\n    height: 200,\n    marginBottom: 16,\n  },\n  typeContainer: {\n    alignItems: 'center',\n    marginBottom: 40,\n  },\n  badge: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: 6,\n    paddingHorizontal: 12,\n    borderRadius: 20,\n    borderWidth: 4,\n  },\n  typeEmoji: {\n    fontSize: 30,\n    marginRight: 12,\n  },\n  typeText: {\n    fontSize: 22,\n    fontWeight: 'bold',\n  },\n})\n")),(0,o.kt)("h4",{id:"step-17-styling-the-moves-block"},"Step 17: Styling the Moves Block"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Display the list of moves in the JSX.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Apply styles to the moves jsx block: ",(0,o.kt)("inlineCode",{parentName:"p"},"Styles.movesContainer")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Styles.movesText"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"And let's define the key value pairs for the styles"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet, Platform, Image } from 'react-native'\n\nconst getTypeDetails = type => {\n  switch (type.toLowerCase()) {\n    case 'electric':\n      return { borderColor: '#FFD700', emoji: '\u26a1\ufe0f' }\n    case 'water':\n      return { borderColor: '#6493EA', emoji: '\ud83d\udca7' }\n    case 'fire':\n      return { borderColor: '#FF5733', emoji: '\ud83d\udd25' }\n    case 'grass':\n      return { borderColor: '#66CC66', emoji: '\ud83c\udf3f' }\n    default:\n      return { borderColor: '#A0A0A0', emoji: '\u2753' }\n  }\n}\n\nexport default function PokemonCard({ name, image, type, hp, moves, weaknesses }) {\n  const { borderColor, emoji } = getTypeDetails(type)\n\n  return (\n    <View style={styles.card}>\n      <View style={styles.nameContainer}>\n        <Text style={styles.name}>{name}</Text>\n        <Text style={styles.hp}>\u2764\ufe0f{hp}</Text>\n      </View>\n\n      <Image\n        style={styles.image}\n        source={image}\n        accessibilityLabel={`${name} pokemon`}\n        resizeMode='contain'\n      />\n\n      <View style={styles.typeContainer}>\n        <View style={[styles.badge, { borderColor }]}>\n          <Text style={styles.typeEmoji}>{emoji}</Text>\n          <Text style={styles.typeText}>{type}</Text>\n        </View>\n      </View>\n\n      <View style={styles.movesContainer}>\n        <Text style={styles.movesText}>Moves: {moves.join(', ')}</Text>\n      </View>\n      <View>\n        <Text>Weakness: {weaknesses.join(', ')}</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    backgroundColor: 'white',\n    borderRadius: 16,\n    borderWidth: 2,\n    padding: 16,\n    margin: 16,\n    ...Platform.select({\n      ios: {\n        shadowOffset: { width: 2, height: 2 },\n        shadowColor: '#333',\n        shadowOpacity: 0.3,\n        shadowRadius: 4,\n      },\n      android: {\n        elevation: 5,\n      },\n    }),\n  },\n  nameContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    width: '100%',\n    marginBottom: 32,\n  },\n  name: {\n    fontSize: 30,\n    fontWeight: 'bold',\n  },\n  hp: {\n    fontSize: 22,\n  },\n  image: {\n    width: '100%',\n    height: 200,\n    marginBottom: 16,\n  },\n  typeContainer: {\n    alignItems: 'center',\n    marginBottom: 40,\n  },\n  badge: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: 6,\n    paddingHorizontal: 12,\n    borderRadius: 20,\n    borderWidth: 4,\n  },\n  typeEmoji: {\n    fontSize: 30,\n    marginRight: 12,\n  },\n  typeText: {\n    fontSize: 22,\n    fontWeight: 'bold',\n  },\n  movesContainer: {\n    marginBottom: 16,\n  },\n  movesText: {\n    fontSize: 22,\n    fontWeight: 'bold',\n  },\n})\n")),(0,o.kt)("h4",{id:"step-18-styling-the-weakness-block"},"Step 18: Styling the Weakness Block"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Style the weakness block similar to the moves block.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Apply styles to the weakness block: ",(0,o.kt)("inlineCode",{parentName:"p"},"Styles.weaknessContainer")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"styles.weaknessText"),"."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, StyleSheet, Platform, Image } from 'react-native'\n\nconst getTypeDetails = type => {\n  switch (type.toLowerCase()) {\n    case 'electric':\n      return { borderColor: '#FFD700', emoji: '\u26a1\ufe0f' }\n    case 'water':\n      return { borderColor: '#6493EA', emoji: '\ud83d\udca7' }\n    case 'fire':\n      return { borderColor: '#FF5733', emoji: '\ud83d\udd25' }\n    case 'grass':\n      return { borderColor: '#66CC66', emoji: '\ud83c\udf3f' }\n    default:\n      return { borderColor: '#A0A0A0', emoji: '\u2753' }\n  }\n}\n\nexport default function PokemonCard({ name, image, type, hp, moves, weaknesses }) {\n  const { borderColor, emoji } = getTypeDetails(type)\n\n  return (\n    <View style={styles.card}>\n      <View style={styles.nameContainer}>\n        <Text style={styles.name}>{name}</Text>\n        <Text style={styles.hp}>\u2764\ufe0f{hp}</Text>\n      </View>\n\n      <Image\n        style={styles.image}\n        source={image}\n        accessibilityLabel={`${name} pokemon`}\n        resizeMode='contain'\n      />\n\n      <View style={styles.typeContainer}>\n        <View style={[styles.badge, { borderColor }]}>\n          <Text style={styles.typeEmoji}>{emoji}</Text>\n          <Text style={styles.typeText}>{type}</Text>\n        </View>\n      </View>\n\n      <View style={styles.movesContainer}>\n        <Text style={styles.movesText}>Moves: {moves.join(', ')}</Text>\n      </View>\n\n      <View style={styles.weaknessContainer}>\n        <Text style={styles.weaknessText}>Weakness: {weaknesses.join(', ')}</Text>\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  card: {\n    backgroundColor: 'white',\n    borderRadius: 16,\n    borderWidth: 2,\n    padding: 16,\n    margin: 16,\n    ...Platform.select({\n      ios: {\n        shadowOffset: { width: 2, height: 2 },\n        shadowColor: '#333',\n        shadowOpacity: 0.3,\n        shadowRadius: 4,\n      },\n      android: {\n        elevation: 5,\n      },\n    }),\n  },\n  nameContainer: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    width: '100%',\n    marginBottom: 32,\n  },\n  name: {\n    fontSize: 30,\n    fontWeight: 'bold',\n  },\n  hp: {\n    fontSize: 22,\n  },\n  image: {\n    width: '100%',\n    height: 200,\n    marginBottom: 16,\n  },\n  typeContainer: {\n    alignItems: 'center',\n    marginBottom: 40,\n  },\n  badge: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    paddingVertical: 6,\n    paddingHorizontal: 12,\n    borderRadius: 20,\n    borderWidth: 4,\n  },\n  typeEmoji: {\n    fontSize: 30,\n    marginRight: 12,\n  },\n  typeText: {\n    fontSize: 22,\n    fontWeight: 'bold',\n  },\n  movesContainer: {\n    marginBottom: 16,\n  },\n  movesText: {\n    fontSize: 22,\n    fontWeight: 'bold',\n  },\n  weaknessContainer: {\n    marginBottom: 8,\n  },\n  weaknessText: {\n    fontSize: 22,\n    fontWeight: 'bold',\n  },\n})\n")),(0,o.kt)("h4",{id:"conclusion-6"},"Conclusion:"),(0,o.kt)("p",null,"With this, we have successfully completed styling our Pok\xe9mon card component. In the sixth and final part, we will add multiple Pok\xe9mon cards to our view."),(0,o.kt)("h3",{id:"-build-a-pokemon-card-6"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Build a Pokemon Card 6"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-42"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Welcome to the final part of building a Pok\xe9mon card in React Native.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In this video, let's render multiple Pok\xe9mon cards.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Once again, we will pick up where we left off."))),(0,o.kt)("h4",{id:"step-19-defining-pok\xe9mon-details"},"Step 19: Defining Pok\xe9mon Details"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"In App.js, Define the Pok\xe9mon details for three other Pok\xe9mon (Squirtle, Bulbasaur, and Pikachu).")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, SafeAreaView, Platform } from 'react-native'\nimport PokemonCard from './components/PokemonCard'\n\nexport default function App() {\n  const charmanderData = {\n    name: 'Charmander',\n    image: require('./assets/charmander.png'),\n    type: 'Fire',\n    hp: 39,\n    moves: ['Scratch', 'Ember', 'Growl', 'Leer'],\n    weaknesses: ['Water', 'Rock'],\n  }\n\n  const squirtleData = {\n    name: 'Squirtle',\n    image: require('./assets/squirtle.png'), // Replace with the actual image path\n    type: 'Water',\n    hp: 44,\n    moves: ['Tackle', 'Water Gun', 'Tail Whip', 'Withdraw'],\n    weaknesses: ['Electric', 'Grass'],\n  }\n\n  const bulbasaurData = {\n    name: 'Bulbasaur',\n    image: require('./assets/bulbasaur.png'), // Replace with the actual image path\n    type: 'Grass',\n    hp: 45,\n    moves: ['Tackle', 'Vine Whip', 'Growl', 'Leech Seed'],\n    weaknesses: ['Fire', 'Ice', 'Flying', 'Psychic'],\n  }\n\n  const pikachuData = {\n    name: 'Pikachu',\n    image: require('./assets/pikachu.png'), // Replace with the actual image path\n    type: 'Electric',\n    hp: 35,\n    moves: ['Quick Attack', 'Thunderbolt', 'Tail Whip', 'Growl'],\n    weaknesses: ['Ground'],\n  }\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <PokemonCard {...charmanderData} />\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5',\n    paddingTop: Platform.OS === 'android' ? 25 : 0,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Invoke the ",(0,o.kt)("inlineCode",{parentName:"li"},"PokemonCard")," component three more times and pass the newly defined objects as props.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"<PokemonCard {...SquirtleData} />\n<PokemonCard {...BulbasaurData} />\n<PokemonCard {...PikachuData} />\n")),(0,o.kt)("h4",{id:"step-20-adding-a-scrollview"},"Step 20: Adding a ScrollView"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Import the ",(0,o.kt)("inlineCode",{parentName:"p"},"ScrollView")," component from React Native.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Add the ",(0,o.kt)("inlineCode",{parentName:"p"},"ScrollView")," component to make the view scrollable."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, SafeAreaView, Platform, ScrollView } from 'react-native'\nimport PokemonCard from './components/PokemonCard'\n\nexport default function App() {\n  const charmanderData = {\n    name: 'Charmander',\n    image: require('./assets/charmander.png'),\n    type: 'Fire',\n    hp: 39,\n    moves: ['Scratch', 'Ember', 'Growl', 'Leer'],\n    weaknesses: ['Water', 'Rock'],\n  }\n\n  const squirtleData = {\n    name: 'Squirtle',\n    image: require('./assets/squirtle.png'), // Replace with the actual image path\n    type: 'Water',\n    hp: 44,\n    moves: ['Tackle', 'Water Gun', 'Tail Whip', 'Withdraw'],\n    weaknesses: ['Electric', 'Grass'],\n  }\n\n  const bulbasaurData = {\n    name: 'Bulbasaur',\n    image: require('./assets/bulbasaur.png'), // Replace with the actual image path\n    type: 'Grass',\n    hp: 45,\n    moves: ['Tackle', 'Vine Whip', 'Growl', 'Leech Seed'],\n    weaknesses: ['Fire', 'Ice', 'Flying', 'Psychic'],\n  }\n\n  const pikachuData = {\n    name: 'Pikachu',\n    image: require('./assets/pikachu.png'), // Replace with the actual image path\n    type: 'Electric',\n    hp: 35,\n    moves: ['Quick Attack', 'Thunderbolt', 'Tail Whip', 'Growl'],\n    weaknesses: ['Ground'],\n  }\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <ScrollView>\n        <PokemonCard {...charmanderData} />\n        <PokemonCard {...squirtleData} />\n        <PokemonCard {...bulbasaurData} />\n        <PokemonCard {...pikachuData} />\n      </ScrollView>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5',\n    paddingTop: Platform.OS === 'android' ? 25 : 0,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Ensure that all the cards are visible and scrollable in the UI.")),(0,o.kt)("h4",{id:"final-checks"},"Final Checks:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Test the app with different device dimensions and orientations to ensure it functions properly.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In the terminal, press Shift + I and select different device profiles to verify the UI's responsiveness.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Edit ",(0,o.kt)("inlineCode",{parentName:"p"},"app.json"),' to set the orientation to "default" for better adaptability.')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Restart the application and rotate the device to ensure all four cards render as expected without issues."))),(0,o.kt)("h4",{id:"conclusion-7"},"Conclusion:"),(0,o.kt)("p",null,"I hope this exercise has helped you apply all the concepts you've learned so far in the series."),(0,o.kt)("hr",null),(0,o.kt)("p",null,"With this, we have completed building the Pok\xe9mon card application in React Native."),(0,o.kt)("h2",{id:"section-7-how-to-render-list"},"Section 7: How to render list"),(0,o.kt)("blockquote",null),(0,o.kt)("h3",{id:"-lists"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Lists"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-43"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Rendering lists is an essential aspect of mobile application development.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Whether it's a list of contacts, products, or any other collection of items, lists are a fundamental UI component.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In this seventh section of the course, we will explore how to render lists in React Native."))),(0,o.kt)("h4",{id:"setting-up-the-project-1"},"Setting Up the Project:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"For this section on lists, I have created a new Expo project called ",(0,o.kt)("inlineCode",{parentName:"p"},"RNList"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"You can create a similar project using the command: ",(0,o.kt)("inlineCode",{parentName:"p"},"npx create-expo-app RNList")))),(0,o.kt)("h4",{id:"step-1-creating-mock-data"},"Step 1: Creating Mock Data"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We'll start by creating a mock data set that represents a list of Pok\xe9mon.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Each Pok\xe9mon will have properties like ID, type, and name.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Create a file called ",(0,o.kt)("inlineCode",{parentName:"p"},"data.json")," within the project folder.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Copy and paste a list of 100 Pok\xe9mon into ",(0,o.kt)("inlineCode",{parentName:"p"},"data.json"),"."))),(0,o.kt)("h4",{id:"step-2-importing-the-data"},"Step 2: Importing the Data"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Import the Pok\xe9mon list from ",(0,o.kt)("inlineCode",{parentName:"li"},"data.json")," in your JavaScript file.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StatusBar } from 'expo-status-bar'\nimport { StyleSheet, Text, View } from 'react-native'\nimport pokemonList from './data.json'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <Text>Open up App.js to start working on your app!</Text>\n      <StatusBar style='auto' />\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n})\n")),(0,o.kt)("h4",{id:"step-3-rendering-the-list"},"Step 3: Rendering the List"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"To render the list, we can use the ",(0,o.kt)("inlineCode",{parentName:"p"},"map")," method.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Within the ",(0,o.kt)("inlineCode",{parentName:"p"},"View")," container, use curly braces and ",(0,o.kt)("inlineCode",{parentName:"p"},"map")," over the ",(0,o.kt)("inlineCode",{parentName:"p"},"PokemonList")," array."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"mport { StatusBar } from 'expo-status-bar'\nimport { StyleSheet, Text, View } from 'react-native'\nimport pokemonList from './data.json'\n\nexport default function App() {\n  return <View style={styles.container}>{pokemonList.map()}</View>\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n})\n\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"For each Pok\xe9mon, return a ",(0,o.kt)("inlineCode",{parentName:"p"},"View")," component that renders the Pok\xe9mon type and name.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Remember to specify a unique ",(0,o.kt)("inlineCode",{parentName:"p"},"key")," prop for each item, in this case, use ",(0,o.kt)("inlineCode",{parentName:"p"},"Pokemon.id"),"."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StatusBar } from 'expo-status-bar'\nimport { StyleSheet, Text, View } from 'react-native'\nimport pokemonList from './data.json'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      {pokemonList.map(pokemon => {\n        return (\n          <View key={pokemon.id}>\n            <Text>{pokemon.typeList[0]}</Text>\n            <Text>{pokemon.name}</Text>\n          </View>\n        )\n      })}\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n})\n")),(0,o.kt)("h4",{id:"step-4-making-the-list-scrollable"},"Step 4: Making the List Scrollable"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"By default, the ",(0,o.kt)("inlineCode",{parentName:"p"},"View")," component is not scrollable.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"To fix this, import the ",(0,o.kt)("inlineCode",{parentName:"p"},"ScrollView")," component from React Native.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Wrap your list with the ",(0,o.kt)("inlineCode",{parentName:"p"},"ScrollView")," component to make it scrollable."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StatusBar } from 'expo-status-bar'\nimport { StyleSheet, Text, View, ScrollView } from 'react-native'\nimport pokemonList from './data.json'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <ScrollView>\n        {pokemonList.map(pokemon => {\n          return (\n            <View key={pokemon.id}>\n              <Text>{pokemon.typeList[0]}</Text>\n              <Text>{pokemon.name}</Text>\n            </View>\n          )\n        })}\n      </ScrollView>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n})\n")),(0,o.kt)("h4",{id:"step-5-styling-improvements"},"Step 5: Styling Improvements"),(0,o.kt)("h4",{id:"1-add-safe-area-view"},"1: Add Safe Area View"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Import ",(0,o.kt)("inlineCode",{parentName:"p"},"SafeAreaView")," and replace the outermost ",(0,o.kt)("inlineCode",{parentName:"p"},"View")," container with ",(0,o.kt)("inlineCode",{parentName:"p"},"SafeAreaView"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This adds top padding on iOS devices."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StatusBar } from 'expo-status-bar'\nimport { StyleSheet, Text, View, ScrollView, SafeAreaView } from 'react-native'\nimport pokemonList from './data.json'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.container}>\n      <ScrollView>\n        {pokemonList.map(pokemon => {\n          return (\n            <View key={pokemon.id}>\n              <Text>{pokemon.typeList[0]}</Text>\n              <Text>{pokemon.name}</Text>\n            </View>\n          )\n        })}\n      </ScrollView>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"To accommodate Android devices, import ",(0,o.kt)("inlineCode",{parentName:"li"},"StatusBar")," (from react native instead of Expo) and set ",(0,o.kt)("inlineCode",{parentName:"li"},"paddingTop")," to ",(0,o.kt)("inlineCode",{parentName:"li"},"StatusBar.currentHeight"),".")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, ScrollView, SafeAreaView, StatusBar } from 'react-native'\nimport pokemonList from './data.json'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.container}>\n      <ScrollView>\n        {pokemonList.map(pokemon => {\n          return (\n            <View key={pokemon.id}>\n              <Text>{pokemon.typeList[0]}</Text>\n              <Text>{pokemon.name}</Text>\n            </View>\n          )\n        })}\n      </ScrollView>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center',\n    paddingTop: StatusBar.currentHeight,\n  },\n})\n")),(0,o.kt)("h4",{id:"add-some-styles"},"Add some styles"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"let's also change the background color to ",(0,o.kt)("inlineCode",{parentName:"p"},"#F5F5F5"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"and remove ",(0,o.kt)("inlineCode",{parentName:"p"},"alignItems")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"justifyContent")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, ScrollView, SafeAreaView, StatusBar } from 'react-native'\nimport pokemonList from './data.json'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.container}>\n      <ScrollView>\n        {pokemonList.map(pokemon => {\n          return (\n            <View key={pokemon.id}>\n              <Text>{pokemon.typeList[0]}</Text>\n              <Text>{pokemon.name}</Text>\n            </View>\n          )\n        })}\n      </ScrollView>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5',\n    paddingTop: StatusBar.currentHeight,\n  },\n})\n")),(0,o.kt)("h4",{id:"2-add-styling-to-the-scrollview"},"2: Add Styling to the ScrollView"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Create a style for the ",(0,o.kt)("inlineCode",{parentName:"p"},"ScrollView")," by adding a ",(0,o.kt)("inlineCode",{parentName:"p"},"scrollView")," key to the ",(0,o.kt)("inlineCode",{parentName:"p"},"Styles")," object and set a horizontal padding to 16.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Apply this style to the ",(0,o.kt)("inlineCode",{parentName:"p"},"ScrollView")," component."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, ScrollView, SafeAreaView, StatusBar } from 'react-native'\nimport pokemonList from './data.json'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.container}>\n      <ScrollView style={styles.scrollView}>\n        {pokemonList.map(pokemon => {\n          return (\n            <View key={pokemon.id}>\n              <Text>{pokemon.typeList[0]}</Text>\n              <Text>{pokemon.name}</Text>\n            </View>\n          )\n        })}\n      </ScrollView>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5',\n    paddingTop: StatusBar.currentHeight,\n  },\n  scrollView: {\n    paddingHorizontal: 16,\n  },\n})\n")),(0,o.kt)("h4",{id:"3-create-a-card-style"},"3: Create a card Style"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Create a style for each list item (card).")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Set a white background color, padding, border radius, border width, and margin bottom.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Apply this style to the ",(0,o.kt)("inlineCode",{parentName:"p"},"View")," component for each Pok\xe9mon."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, ScrollView, SafeAreaView, StatusBar } from 'react-native'\nimport pokemonList from './data.json'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.container}>\n      <ScrollView style={styles.scrollView}>\n        {pokemonList.map(pokemon => {\n          return (\n            <View\n              style={styles.card}\n              key={pokemon.id}>\n              <Text>{pokemon.typeList[0]}</Text>\n              <Text>{pokemon.name}</Text>\n            </View>\n          )\n        })}\n      </ScrollView>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5',\n    paddingTop: StatusBar.currentHeight,\n  },\n  scrollView: {\n    paddingHorizontal: 16,\n  },\n  card: {\n    backgroundColor: 'white',\n    padding: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    marginBottom: 16,\n  },\n})\n")),(0,o.kt)("h4",{id:"4-create-a-text-style"},"4: Create a Text Style"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Create a style for the text content inside the card. so ",(0,o.kt)("inlineCode",{parentName:"p"},"cardText:"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Increase the font size for better readability.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Apply this style to both text components."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, ScrollView, SafeAreaView, StatusBar } from 'react-native'\nimport pokemonList from './data.json'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.container}>\n      <ScrollView style={styles.scrollView}>\n        {pokemonList.map(pokemon => {\n          return (\n            <View\n              style={styles.card}\n              key={pokemon.id}>\n              <Text style={styles.cardText}>{pokemon.typeList[0]}</Text>\n              <Text style={styles.cardText}>{pokemon.name}</Text>\n            </View>\n          )\n        })}\n      </ScrollView>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5',\n    paddingTop: StatusBar.currentHeight,\n  },\n  scrollView: {\n    paddingHorizontal: 16,\n  },\n  card: {\n    backgroundColor: 'white',\n    padding: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    marginBottom: 16,\n  },\n  cardText: {\n    fontSize: 30,\n  },\n})\n")),(0,o.kt)("h4",{id:"conclusion-8"},"Conclusion:"),(0,o.kt)("p",null,"While our current code works fine, rendering lists using the ",(0,o.kt)("inlineCode",{parentName:"p"},"ScrollView")," component and the ",(0,o.kt)("inlineCode",{parentName:"p"},"map")," method is not the preferred technique. In the next video, we will explore why this is the case and learn about the recommended approach."),(0,o.kt)("h3",{id:"-flatlist"},(0,o.kt)("strong",{parentName:"h3"},"=>")," FlatList"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-44"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In the previous video We learned how to render a list in React Native using the ",(0,o.kt)("inlineCode",{parentName:"p"},"ScrollView")," component and the ",(0,o.kt)("inlineCode",{parentName:"p"},"map")," method.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"However, with this method, all items are rendered even if they're not in the viewport.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"While rendering all list items might not be an issue for small lists, for larger data sets consisting of thousands of items, it can lead to performance problems."))),(0,o.kt)("h4",{id:"the-recommended-approach"},"The recommended approach"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"In React Native to rendering lists is to use the ",(0,o.kt)("inlineCode",{parentName:"li"},"FlatList")," component, which ",(0,o.kt)("strong",{parentName:"li"},"renders only the items currently in view, making it highly performant for long lists."))),(0,o.kt)("p",null,"Let's see it in action:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Comment out the ",(0,o.kt)("inlineCode",{parentName:"li"},"ScrollView")," component code."),(0,o.kt)("li",{parentName:"ol"},"Import the ",(0,o.kt)("inlineCode",{parentName:"li"},"FlatList")," component from React Native."),(0,o.kt)("li",{parentName:"ol"},"Replace the map method code with the ",(0,o.kt)("inlineCode",{parentName:"li"},"FlatList")," component code.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, ScrollView, SafeAreaView, StatusBar, FlatList } from 'react-native'\nimport pokemonList from './data.json'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.container}>\n      {/* <ScrollView style={styles.scrollView}>\n        {pokemonList.map(pokemon => {\n          return (\n            <View\n              style={styles.card}\n              key={pokemon.id}>\n              <Text style={styles.cardText}>{pokemon.type}</Text>\n              <Text style={styles.cardText}>{pokemon.name}</Text>\n            </View>\n          )\n        })}\n      </ScrollView> */}\n      <FlatList />\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5',\n    paddingTop: StatusBar.currentHeight,\n  },\n  scrollView: {\n    paddingHorizontal: 16,\n  },\n  card: {\n    backgroundColor: 'white',\n    padding: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    marginBottom: 16,\n  },\n  cardText: {\n    fontSize: 30,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The Flat List is a self-closing component and has two mandatory props:")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"data={}"),": The ",(0,o.kt)("inlineCode",{parentName:"li"},"data")," prop is used to pass the array of items that you want to render in the list.")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"In our case, it is the ",(0,o.kt)("inlineCode",{parentName:"li"},"pokemonlist"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, ScrollView, SafeAreaView, StatusBar, FlatList } from 'react-native'\nimport pokemonList from './data.json'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.container}>\n      {/* <ScrollView style={styles.scrollView}>\n        {pokemonList.map(pokemon => {\n          return (\n            <View\n              style={styles.card}\n              key={pokemon.id}>\n              <Text style={styles.cardText}>{pokemon.type}</Text>\n              <Text style={styles.cardText}>{pokemon.name}</Text>\n            </View>\n          )\n        })}\n      </ScrollView> */}\n      <FlatList data={pokemonList} />\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5',\n    paddingTop: StatusBar.currentHeight,\n  },\n  scrollView: {\n    paddingHorizontal: 16,\n  },\n  card: {\n    backgroundColor: 'white',\n    padding: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    marginBottom: 16,\n  },\n  cardText: {\n    fontSize: 30,\n  },\n})\n")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"renderItem={}"),": The ",(0,o.kt)("inlineCode",{parentName:"li"},"renderItem")," prop is a function that returns the JSX for rendering each item in the list.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, ScrollView, SafeAreaView, StatusBar, FlatList } from 'react-native'\nimport pokemonList from './data.json'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.container}>\n      {/* <ScrollView style={styles.scrollView}>\n        {pokemonList.map(pokemon => {\n          return (\n            <View\n              style={styles.card}\n              key={pokemon.id}>\n              <Text style={styles.cardText}>{pokemon.type}</Text>\n              <Text style={styles.cardText}>{pokemon.name}</Text>\n            </View>\n          )\n        })}\n      </ScrollView> */}\n      <FlatList\n        data={pokemonList}\n        renderItem={() => {}}\n      />\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5',\n    paddingTop: StatusBar.currentHeight,\n  },\n  scrollView: {\n    paddingHorizontal: 16,\n  },\n  card: {\n    backgroundColor: 'white',\n    padding: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    marginBottom: 16,\n  },\n  cardText: {\n    fontSize: 30,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The function receives an object containing the current ",(0,o.kt)("inlineCode",{parentName:"p"},"item"),", and you can define how each item should be rendered.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This is the same as what we return from the ",(0,o.kt)("inlineCode",{parentName:"p"},"map")," method.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"So, copy the return statement and paste it.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'We do have to change "pokemon" to "item".'))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, ScrollView, SafeAreaView, StatusBar, FlatList } from 'react-native'\nimport pokemonList from './data.json'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.container}>\n      {/* <ScrollView style={styles.scrollView}>\n        {pokemonList.map(pokemon => {\n          return (\n            <View\n              style={styles.card}\n              key={pokemon.id}>\n              <Text style={styles.cardText}>{pokemon.type}</Text>\n              <Text style={styles.cardText}>{pokemon.name}</Text>\n            </View>\n          )\n        })}\n      </ScrollView> */}\n      <FlatList\n        data={pokemonList}\n        renderItem={({ item }) => {\n          return (\n            <View\n              style={styles.card}\n              key={item.id}>\n              <Text style={styles.cardText}>{item.type}</Text>\n              <Text style={styles.cardText}>{item.name}</Text>\n            </View>\n          )\n        }}\n      />\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5',\n    paddingTop: StatusBar.currentHeight,\n  },\n  scrollView: {\n    paddingHorizontal: 16,\n  },\n  card: {\n    backgroundColor: 'white',\n    padding: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    marginBottom: 16,\n  },\n  cardText: {\n    fontSize: 30,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"if we now take a look at the UI. We can still see our list, and we can scroll down to the bottom, but this list is more performant.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let's verify that by logging the item ID to the console:"))),(0,o.kt)("p",null,"Within the render item function, ",(0,o.kt)("inlineCode",{parentName:"p"},"console.log(item.ID)"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, ScrollView, SafeAreaView, StatusBar, FlatList } from 'react-native'\nimport pokemonList from './data.json'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.container}>\n      {/* <ScrollView style={styles.scrollView}>\n        {pokemonList.map(pokemon => {\n          return (\n            <View\n              style={styles.card}\n              key={pokemon.id}>\n              <Text style={styles.cardText}>{pokemon.type}</Text>\n              <Text style={styles.cardText}>{pokemon.name}</Text>\n            </View>\n          )\n        })}\n      </ScrollView> */}\n      <FlatList\n        data={pokemonList}\n        renderItem={({ item }) => {\n          console.log(item.id)\n          return (\n            <View\n              style={styles.card}\n              key={item.id}>\n              <Text style={styles.cardText}>{item.type}</Text>\n              <Text style={styles.cardText}>{item.name}</Text>\n            </View>\n          )\n        }}\n      />\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5',\n    paddingTop: StatusBar.currentHeight,\n  },\n  scrollView: {\n    paddingHorizontal: 16,\n  },\n  card: {\n    backgroundColor: 'white',\n    padding: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    marginBottom: 16,\n  },\n  cardText: {\n    fontSize: 30,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"take a look at the terminal. We can see the first 64 IDs instead of 100.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Now you might think that this is incorrect. We see six or seven items in the viewport but we see 64 in the terminal. How is that right?")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Well, the thing is, ",(0,o.kt)("inlineCode",{parentName:"p"},"the FlatList component ensures it generates a few devices length of content in advance to ensure smooth scrolling"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"But now that the initial number of cards have been rendered, if we scroll down a bit, you can see the additional IDs being logged in the console.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"They are lazily loaded to ensure smooth scrolling."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If you were to try this experiment with an array of 50 Pokemon, you would see all 50 in the logs and would assume FlatList has no performance benefits.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"I wanted to make sure you don't walk away with that wrong idea, and hence the long list of items."))),(0,o.kt)("h4",{id:"horizontal-prop"},"horizontal prop"),(0,o.kt)("p",null,"On a side note, if you want ",(0,o.kt)("strong",{parentName:"p"},"to render the list horizontally"),", you can add the ",(0,o.kt)("inlineCode",{parentName:"p"},"horizontal={}")," prop and set it to ",(0,o.kt)("inlineCode",{parentName:"p"},"true")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, ScrollView, SafeAreaView, StatusBar, FlatList } from 'react-native'\nimport pokemonList from './data.json'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.container}>\n      {/* <ScrollView style={styles.scrollView}>\n        {pokemonList.map(pokemon => {\n          return (\n            <View\n              style={styles.card}\n              key={pokemon.id}>\n              <Text style={styles.cardText}>{pokemon.type}</Text>\n              <Text style={styles.cardText}>{pokemon.name}</Text>\n            </View>\n          )\n        })}\n      </ScrollView> */}\n      <FlatList\n        data={pokemonList}\n        renderItem={({ item }) => {\n          console.log(item.id)\n          return (\n            <View\n              style={styles.card}\n              key={item.id}>\n              <Text style={styles.cardText}>{item.type}</Text>\n              <Text style={styles.cardText}>{item.name}</Text>\n            </View>\n          )\n        }}\n        horizontal={true}\n      />\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5',\n    paddingTop: StatusBar.currentHeight,\n  },\n  scrollView: {\n    paddingHorizontal: 16,\n  },\n  card: {\n    backgroundColor: 'white',\n    padding: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    marginBottom: 16,\n  },\n  cardText: {\n    fontSize: 30,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"You can see the cards are now rendered horizontally.")),(0,o.kt)("h4",{id:"keyextractor-prop"},"keyExtractor prop"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If this is clear, let me highlight one more prop before we proceed to the next video:")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The prop is ",(0,o.kt)("inlineCode",{parentName:"p"},"keyExtractor={}"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"This prop is a function that takes an item from the data array and returns a unique key for that item."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"It is used to identify the unique items in the list, similar to the key prop when using the map method.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"By default, it returns ",(0,o.kt)("inlineCode",{parentName:"p"},"keyExtractor={item.key}"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"and if that is not present, it returns ",(0,o.kt)("inlineCode",{parentName:"p"},"keyExtractor={item.id}"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If that as well is not present, it uses the item ",(0,o.kt)("inlineCode",{parentName:"p"},"index")," as key.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Index, by the way, is available as the second argument to the callback function, where the first argument is the ",(0,o.kt)("inlineCode",{parentName:"p"},"item")," itself. ",(0,o.kt)("inlineCode",{parentName:"p"},"keyExtractor={(item, index) => }"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In our case, we do have an ",(0,o.kt)("inlineCode",{parentName:"p"},"Id")," property for every item, and the same is used by default.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"However, you can define it yourself. So ",(0,o.kt)("inlineCode",{parentName:"p"},"item")," returns ",(0,o.kt)("inlineCode",{parentName:"p"},"item.Id")," and we convert this to a string, as the function should return a string, (but I believe there is implicit conversion for a numeric type)."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, ScrollView, SafeAreaView, StatusBar, FlatList } from 'react-native'\nimport pokemonList from './data.json'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.container}>\n      {/* <ScrollView style={styles.scrollView}>\n        {pokemonList.map(pokemon => {\n          return (\n            <View\n              style={styles.card}\n              key={pokemon.id}>\n              <Text style={styles.cardText}>{pokemon.type}</Text>\n              <Text style={styles.cardText}>{pokemon.name}</Text>\n            </View>\n          )\n        })}\n      </ScrollView> */}\n      <FlatList\n        data={pokemonList}\n        renderItem={({ item }) => {\n          console.log(item.id)\n          return (\n            <View\n              style={styles.card}\n              key={item.id}>\n              <Text style={styles.cardText}>{item.type}</Text>\n              <Text style={styles.cardText}>{item.name}</Text>\n            </View>\n          )\n        }}\n        keyExtractor={item => item.id.toString()}\n        // horizontal={true}\n      />\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5',\n    paddingTop: StatusBar.currentHeight,\n  },\n  scrollView: {\n    paddingHorizontal: 16,\n  },\n  card: {\n    backgroundColor: 'white',\n    padding: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    marginBottom: 16,\n  },\n  cardText: {\n    fontSize: 30,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"If we save the file, our UI should still be working as expected.")),(0,o.kt)("h4",{id:"adding-horizontal-padding"},"Adding horizontal padding"),(0,o.kt)("p",null,"Now we are missing the horizontal padding, so you can wrap the ",(0,o.kt)("inlineCode",{parentName:"p"},"FlatList")," component with a ",(0,o.kt)("inlineCode",{parentName:"p"},"View")," component and add ",(0,o.kt)("inlineCode",{parentName:"p"},"style")," equal to ",(0,o.kt)("inlineCode",{parentName:"p"},"styles.scrollView"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, ScrollView, SafeAreaView, StatusBar, FlatList } from 'react-native'\nimport pokemonList from './data.json'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.container}>\n      {/* <ScrollView style={styles.scrollView}>\n        {pokemonList.map(pokemon => {\n          return (\n            <View\n              style={styles.card}\n              key={pokemon.id}>\n              <Text style={styles.cardText}>{pokemon.type}</Text>\n              <Text style={styles.cardText}>{pokemon.name}</Text>\n            </View>\n          )\n        })}\n      </ScrollView> */}\n      <View style={styles.scrollView}>\n        <FlatList\n          data={pokemonList}\n          renderItem={({ item }) => {\n            console.log(item.id)\n            return (\n              <View\n                style={styles.card}\n                key={item.id}>\n                <Text style={styles.cardText}>{item.type}</Text>\n                <Text style={styles.cardText}>{item.name}</Text>\n              </View>\n            )\n          }}\n          keyExtractor={item => item.id.toString()}\n          // horizontal={true}\n        />\n      </View>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5',\n    paddingTop: StatusBar.currentHeight,\n  },\n  scrollView: {\n    paddingHorizontal: 16,\n  },\n  card: {\n    backgroundColor: 'white',\n    padding: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    marginBottom: 16,\n  },\n  cardText: {\n    fontSize: 30,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"If we save the file, a list of Pokemon should look much better.")),(0,o.kt)("p",null,"Apart from ",(0,o.kt)("inlineCode",{parentName:"p"},"data"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"renderItem"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"horizontal"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"keyExtractor"),", there are quite a few props that can be used to customize the behavior and appearance of the Flat List. Let's see what they are in the upcoming videos."),(0,o.kt)("h4",{id:"to-summarize-2"},"to summarize"),(0,o.kt)("p",null,"But to summarize what we have learned in this video:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"A ",(0,o.kt)("inlineCode",{parentName:"p"},"ScrollView")," renders all its React child components at once and has a performance downside.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"FlatList"),", on the other hand, renders items easily when they're about to appear and removes items that scroll way off the screen to save memory and processing time.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Using ",(0,o.kt)("inlineCode",{parentName:"p"},"FlatList")," is a recommended approach to render lists in React Native."))),(0,o.kt)("h3",{id:"-itemseparator"},(0,o.kt)("strong",{parentName:"h3"},"=>")," ItemSeparator"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-45"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In the previous video, we learned about the FlatList component in React Native.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We explored essential props like ",(0,o.kt)("inlineCode",{parentName:"p"},"data"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"renderItem"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"keyExtractor"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Now, let's delve into some additional props commonly used with the FlatList component."))),(0,o.kt)("h4",{id:"itemseparatorcomponent"},"ItemSeparatorComponent"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In this video, we will focus on the ",(0,o.kt)("inlineCode",{parentName:"p"},"ItemSeparatorComponent"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"This prop accepts a React component, rendering it between each item in the list but excluding the top and the bottom."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In our case, it's the perfect prop to replace the bottom margin we have on the card component.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"While these 16 pixels serve as a useful separator between the cards, it also introduces unnecessary spacing at the bottom of the list.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"By specifying a ",(0,o.kt)("inlineCode",{parentName:"p"},"View")," component with a ",(0,o.kt)("inlineCode",{parentName:"p"},"16-pixel heigh"),"t as the item separator component and commenting out the margin-bottom property,"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, ScrollView, SafeAreaView, StatusBar, FlatList } from 'react-native'\nimport pokemonList from './data.json'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.container}>\n      {/* <ScrollView style={styles.scrollView}>\n        {pokemonList.map(pokemon => {\n          return (\n            <View\n              style={styles.card}\n              key={pokemon.id}>\n              <Text style={styles.cardText}>{pokemon.type}</Text>\n              <Text style={styles.cardText}>{pokemon.name}</Text>\n            </View>\n          )\n        })}\n      </ScrollView> */}\n      <View style={styles.scrollView}>\n        <FlatList\n          data={pokemonList}\n          renderItem={({ item }) => {\n            console.log(item.id)\n            return (\n              <View\n                style={styles.card}\n                key={item.id}>\n                <Text style={styles.cardText}>{item.type}</Text>\n                <Text style={styles.cardText}>{item.name}</Text>\n              </View>\n            )\n          }}\n          keyExtractor={item => item.id.toString()}\n          ItemSeparatorComponent={<View style={{ height: 16 }} />}\n          // horizontal={true}\n        />\n      </View>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5',\n    paddingTop: StatusBar.currentHeight,\n  },\n  scrollView: {\n    paddingHorizontal: 16,\n  },\n  card: {\n    backgroundColor: 'white',\n    padding: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    // marginBottom: 16,\n  },\n  cardText: {\n    fontSize: 30,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"you'll notice that the spacing between the cards is still maintained, but the extra space at the end of the list is eliminated.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Generally, spacing is the most elegant way to separate list items, but you are free to customize the separator component to align with your design preferences."))),(0,o.kt)("h4",{id:"in-summary-3"},"In summary"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"the ",(0,o.kt)("inlineCode",{parentName:"p"},"item separator component")," inserts a component between each item in the list, excluding the top and bottom.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"You can assign any React component or even a function that returns a React component.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The function can receive specific props, allowing for more intricate styling of the component, but I will leave that for you to explore further when you have the time."))),(0,o.kt)("h3",{id:"-listempty"},(0,o.kt)("strong",{parentName:"h3"},"=>")," listEmpty"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-46"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The next prop we will explore is the ",(0,o.kt)("inlineCode",{parentName:"p"},"listEmptyComponent"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"This prop accepts a React component and renders it when the list is empty."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let's specify a simple ",(0,o.kt)("inlineCode",{parentName:"p"},"Text")," component: ",(0,o.kt)("inlineCode",{parentName:"p"},'"No items found."'))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If we now specify the ",(0,o.kt)("inlineCode",{parentName:"p"},"data")," prop as an empty array (",(0,o.kt)("inlineCode",{parentName:"p"},"[]"),") and take a look at the UI,"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, ScrollView, SafeAreaView, StatusBar, FlatList } from 'react-native'\nimport pokemonList from './data.json'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.container}>\n      {/* <ScrollView style={styles.scrollView}>\n        {pokemonList.map(pokemon => {\n          return (\n            <View\n              style={styles.card}\n              key={pokemon.id}>\n              <Text style={styles.cardText}>{pokemon.type}</Text>\n              <Text style={styles.cardText}>{pokemon.name}</Text>\n            </View>\n          )\n        })}\n      </ScrollView> */}\n      <View style={styles.scrollView}>\n        <FlatList\n          data={[]}\n          renderItem={({ item }) => {\n            console.log(item.id)\n            return (\n              <View\n                style={styles.card}\n                key={item.id}>\n                <Text style={styles.cardText}>{item.type}</Text>\n                <Text style={styles.cardText}>{item.name}</Text>\n              </View>\n            )\n          }}\n          keyExtractor={item => item.id.toString()}\n          ItemSeparatorComponent={<View style={{ height: 16 }} />}\n          ListEmptyComponent={<Text>No items found</Text>}\n          // horizontal={true}\n        />\n      </View>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#f5f5f5',\n    paddingTop: StatusBar.currentHeight,\n  },\n  scrollView: {\n    paddingHorizontal: 16,\n  },\n  card: {\n    backgroundColor: 'white',\n    padding: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    // marginBottom: 16,\n  },\n  cardText: {\n    fontSize: 30,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"we can see the text ",(0,o.kt)("inlineCode",{parentName:"p"},'"No items found."'))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The text is the component assigned to the ",(0,o.kt)("inlineCode",{parentName:"p"},"list empty component")," prop.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We have already covered styling and layout, so I won't dive into making this component look pretty.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"I will leave that to you as a practice exercise.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Try increasing the font size and centering this text in the UI."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, ScrollView, SafeAreaView, StatusBar, FlatList } from 'react-native'\nimport pokemonList from './data.json'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.container}>\n      {/* <ScrollView style={styles.scrollView}>\n        {pokemonList.map(pokemon => {\n          return (\n            <View\n              style={styles.card}\n              key={pokemon.id}>\n              <Text style={styles.cardText}>{pokemon.type}</Text>\n              <Text style={styles.cardText}>{pokemon.name}</Text>\n            </View>\n          )\n        })}\n      </ScrollView> */}\n      <View style={styles.scrollView}>\n        <FlatList\n          data={[]}\n          renderItem={({ item }) => {\n            console.log(item.id)\n            return (\n              <View\n                style={styles.card}\n                key={item.id}>\n                <Text style={styles.cardText}>{item.type}</Text>\n                <Text style={styles.cardText}>{item.name}</Text>\n              </View>\n            )\n          }}\n          keyExtractor={item => item.id.toString()}\n          ItemSeparatorComponent={<View style={{ height: 16 }} />}\n           ListEmptyComponent={\n            <Text style={{ fontSize: 35, textAlign: 'center' }}>No items found</Text>\n          }\n          }\n          // horizontal={true}\n        />\n      </View>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#f5f5f5',\n    paddingTop: StatusBar.currentHeight,\n  },\n  scrollView: {\n    paddingHorizontal: 16,\n  },\n  card: {\n    flex: 1,\n    backgroundColor: 'white',\n    padding: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    // marginBottom: 16,\n  },\n  cardText: {\n    fontSize: 30,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let me know how it goes in the comment section.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"As you can see, the ",(0,o.kt)("inlineCode",{parentName:"p"},"list empty component")," prop is straightforward and incredibly useful, especially when you fetch data from an API, and the data might be empty.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Instead of handling the logic yourself, you can use this prop to manage empty states efficiently."))),(0,o.kt)("h3",{id:"-list-header-and-footer"},(0,o.kt)("strong",{parentName:"h3"},"=>")," List Header and Footer"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-47"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"two more props supported by FlatList component the ",(0,o.kt)("inlineCode",{parentName:"p"},"ListHeaderComponent")," and the ",(0,o.kt)("inlineCode",{parentName:"p"},"ListFooterComponent"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"they allow you to add custom header and footer components to your lists"))),(0,o.kt)("h4",{id:"listheadercomponent"},"ListHeaderComponent"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"This prop allows you to add a custom header component to the top of the list."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"It accepts a React component and renders it at the top of the list.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"Perfect for adding titles, descriptions, or any other content you want to display above your list items."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'Example: Add a simple text component that says "Pok\xe9mon List" with the style set to ',(0,o.kt)("inlineCode",{parentName:"p"},"styles.header_text"),"."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, ScrollView, SafeAreaView, StatusBar, FlatList } from 'react-native'\nimport pokemonList from './data.json'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.container}>\n      {/* <ScrollView style={styles.scrollView}>\n        {pokemonList.map(pokemon => {\n          return (\n            <View\n              style={styles.card}\n              key={pokemon.id}>\n              <Text style={styles.cardText}>{pokemon.type}</Text>\n              <Text style={styles.cardText}>{pokemon.name}</Text>\n            </View>\n          )\n        })}\n      </ScrollView> */}\n      <View style={styles.scrollView}>\n        <FlatList\n          data={[]}\n          renderItem={({ item }) => {\n            console.log(item.id)\n            return (\n              <View\n                style={styles.card}\n                key={item.id}>\n                <Text style={styles.cardText}>{item.type}</Text>\n                <Text style={styles.cardText}>{item.name}</Text>\n              </View>\n            )\n          }}\n          keyExtractor={item => item.id.toString()}\n          ItemSeparatorComponent={<View style={{ height: 16 }} />}\n          ListEmptyComponent={\n            <View style={{ justifyContent: 'center', alignItems: 'center' }}>\n              <Text style={{ fontSize: 35 }}>No items found</Text>\n            </View>\n          }\n          ListHeaderComponent={<Text style={styles.headerText}>Pokemon List</Text>}\n          // horizontal={true}\n        />\n      </View>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#f5f5f5',\n    paddingTop: StatusBar.currentHeight,\n  },\n  scrollView: {\n    paddingHorizontal: 16,\n  },\n  card: {\n    flex: 1,\n    backgroundColor: 'white',\n    padding: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    // marginBottom: 16,\n  },\n  cardText: {\n    fontSize: 30,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In the Styles section, define the styles with a font size of 24, text-align center, and a bottom margin of 12.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'When you change the header to "Pok\xe9mon List" and view the UI,'))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, ScrollView, SafeAreaView, StatusBar, FlatList } from 'react-native'\nimport pokemonList from './data.json'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.container}>\n      {/* <ScrollView style={styles.scrollView}>\n        {pokemonList.map(pokemon => {\n          return (\n            <View\n              style={styles.card}\n              key={pokemon.id}>\n              <Text style={styles.cardText}>{pokemon.type}</Text>\n              <Text style={styles.cardText}>{pokemon.name}</Text>\n            </View>\n          )\n        })}\n      </ScrollView> */}\n      <View style={styles.scrollView}>\n        <FlatList\n          data={pokemonList}\n          renderItem={({ item }) => {\n            console.log(item.id)\n            return (\n              <View\n                style={styles.card}\n                key={item.id}>\n                <Text style={styles.cardText}>{item.type}</Text>\n                <Text style={styles.cardText}>{item.name}</Text>\n              </View>\n            )\n          }}\n          keyExtractor={item => item.id.toString()}\n          ItemSeparatorComponent={<View style={{ height: 16 }} />}\n          ListEmptyComponent={\n            <Text style={{ fontSize: 35, textAlign: 'center' }}>No items found</Text>\n          }\n          ListHeaderComponent={<Text style={styles.headerText}>Pokemon List</Text>}\n          // horizontal={true}\n        />\n      </View>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#f5f5f5',\n    paddingTop: StatusBar.currentHeight,\n  },\n  scrollView: {\n    paddingHorizontal: 16,\n  },\n  card: {\n    flex: 1,\n    backgroundColor: 'white',\n    padding: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    // marginBottom: 16,\n  },\n  cardText: {\n    fontSize: 30,\n  },\n  headerText: {\n    fontSize: 24,\n    textAlign: 'center',\n    marginBottom: 12,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},'you can see the text "Pok\xe9mon List" at the top.')),(0,o.kt)("h4",{id:"list-footer-component"},"List Footer Component"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"This prop allows you to add a custom footer component to the bottom of the list."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"It accepts a React component and renders it at the bottom of the list."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Useful for adding footnotes, pagination controls, or indicating the end of the list.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'Example: Add a text component that says "End of List" with the style set to ',(0,o.kt)("inlineCode",{parentName:"p"},"styles.footer_text"),"."),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"In the Styles section, define the styles with a font size of 24, text-align center, and a margin-top of 12.")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, ScrollView, SafeAreaView, StatusBar, FlatList } from 'react-native'\nimport pokemonList from './data.json'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.container}>\n      {/* <ScrollView style={styles.scrollView}>\n        {pokemonList.map(pokemon => {\n          return (\n            <View\n              style={styles.card}\n              key={pokemon.id}>\n              <Text style={styles.cardText}>{pokemon.type}</Text>\n              <Text style={styles.cardText}>{pokemon.name}</Text>\n            </View>\n          )\n        })}\n      </ScrollView> */}\n      <View style={styles.scrollView}>\n        <FlatList\n          data={pokemonList}\n          renderItem={({ item }) => {\n            console.log(item.id)\n            return (\n              <View\n                style={styles.card}\n                key={item.id}>\n                <Text style={styles.cardText}>{item.type}</Text>\n                <Text style={styles.cardText}>{item.name}</Text>\n              </View>\n            )\n          }}\n          keyExtractor={item => item.id.toString()}\n          ItemSeparatorComponent={<View style={{ height: 16 }} />}\n          ListEmptyComponent={\n            <Text style={{ fontSize: 35, textAlign: 'center' }}>No items found</Text>\n          }\n          ListHeaderComponent={<Text style={styles.headerText}>Pokemon List</Text>}\n          ListFooterComponent={<Text style={styles.footerText}>End if list</Text>}\n          // horizontal={true}\n        />\n      </View>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#f5f5f5',\n    paddingTop: StatusBar.currentHeight,\n  },\n  scrollView: {\n    paddingHorizontal: 16,\n  },\n  card: {\n    flex: 1,\n    backgroundColor: 'white',\n    padding: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    // marginBottom: 16,\n  },\n  cardText: {\n    fontSize: 30,\n  },\n  headerText: {\n    fontSize: 24,\n    textAlign: 'center',\n    marginBottom: 12,\n  },\n  footerText: {\n    fontSize: 24,\n    textAlign: 'center',\n    marginTop: 12,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},'When you scroll all the way to the bottom of the list, you can see the text "End of List."')),(0,o.kt)("p",null,"Whether you're displaying a catalog of products, a collection of articles, or a list of Pok\xe9mon, both these props can help you create more engaging and user-friendly interfaces."),(0,o.kt)("h2",{id:"sectionlist"},"SectionList"),(0,o.kt)("blockquote",null),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-48"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In this final video of the section on lists in React Native, we will explore the ",(0,o.kt)("inlineCode",{parentName:"p"},"SectionList")," component")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"As the name suggests, ",(0,o.kt)("strong",{parentName:"p"},"it is a performant component designed for rendering sectioned lists."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We will render a list of Pok\xe9mon categorized by ",(0,o.kt)("inlineCode",{parentName:"p"},"type"),", with sections for different types.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Begin by creating a mock data set representing a list of Pokemon by type")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"within the project folder I will create a file ",(0,o.kt)("inlineCode",{parentName:"p"},"grouped-data.Json"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"in this file I'll paste Json data which you can find on my GitHub repo"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "type": "Grass",\n    "data": ["Bulbasaur", "Ivysaur", "Venusaur"]\n  },\n  {\n    "type": "Fire",\n    "data": ["Charmander", "Charmeleon", "Charizard"]\n  },\n  {\n    "type": "Water",\n    "data": ["Squirtle", "Wartortle", "Blastoise"]\n  },\n  { "type": "Electric", "data": ["Pikachu", "Raichu"] }\n]\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"it consists of an array of four objects")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"and each object contains two key value pairs ",(0,o.kt)("inlineCode",{parentName:"p"},"type")," representing the Pokemon type and ",(0,o.kt)("inlineCode",{parentName:"p"},"data")," representing the list of Pokemon for that type")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"it is crucial to name this property ",(0,o.kt)("inlineCode",{parentName:"strong"},"data")," as that is what the ",(0,o.kt)("inlineCode",{parentName:"strong"},"SectionList")," component expects"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"if your API data set for example doesn't have the ",(0,o.kt)("inlineCode",{parentName:"p"},"data")," property you would have to transform your data")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"the other property though can be named anything and I've chosen to call it ",(0,o.kt)("inlineCode",{parentName:"p"},"type")," as it seems logical"))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Step 1")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Comment out the FlatList component from before.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We still need the wrapping View component for horizontal padding."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, ScrollView, SafeAreaView, StatusBar, FlatList } from 'react-native'\nimport pokemonList from './data.json'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.container}>\n      {/* <ScrollView style={styles.scrollView}>\n        {pokemonList.map(pokemon => {\n          return (\n            <View\n              style={styles.card}\n              key={pokemon.id}>\n              <Text style={styles.cardText}>{pokemon.type}</Text>\n              <Text style={styles.cardText}>{pokemon.name}</Text>\n            </View>\n          )\n        })}\n      </ScrollView> */}\n      <View style={styles.scrollView}>\n        {/* <FlatList\n          data={pokemonList}\n          renderItem={({ item }) => {\n            console.log(item.id)\n            return (\n              <View\n                style={styles.card}\n                key={item.id}>\n                <Text style={styles.cardText}>{item.type}</Text>\n                <Text style={styles.cardText}>{item.name}</Text>\n              </View>\n            )\n          }}\n          keyExtractor={item => item.id.toString()}\n          ItemSeparatorComponent={<View style={{ height: 16 }} />}\n          ListEmptyComponent={\n            <Text style={{ fontSize: 35, textAlign: 'center' }}>No items found</Text>\n          }\n          ListHeaderComponent={<Text style={styles.headerText}>Pokemon List</Text>}\n          ListFooterComponent={<Text style={styles.footerText}>End if list</Text>}\n          // horizontal={true}\n        /> */}\n      </View>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#f5f5f5',\n    paddingTop: StatusBar.currentHeight,\n  },\n  scrollView: {\n    paddingHorizontal: 16,\n  },\n  card: {\n    flex: 1,\n    backgroundColor: 'white',\n    padding: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    // marginBottom: 16,\n  },\n  cardText: {\n    fontSize: 30,\n  },\n  headerText: {\n    fontSize: 24,\n    textAlign: 'center',\n    marginBottom: 12,\n  },\n  footerText: {\n    fontSize: 24,\n    textAlign: 'center',\n    marginTop: 12,\n  },\n})\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Step 2")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Import the ",(0,o.kt)("inlineCode",{parentName:"p"},"SectionList")," component from React Native.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Import the JSON data from ",(0,o.kt)("inlineCode",{parentName:"p"},"grouped-data.json"),"."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import {\n  StyleSheet,\n  Text,\n  View,\n  ScrollView,\n  SafeAreaView,\n  StatusBar,\n  FlatList,\n  SectionList,\n} from 'react-native'\nimport pokemonList from './data.json'\nimport groupedPokemonList from './grouped-data.json'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.container}>\n      {/* <ScrollView style={styles.scrollView}>\n        {pokemonList.map(pokemon => {\n          return (\n            <View\n              style={styles.card}\n              key={pokemon.id}>\n              <Text style={styles.cardText}>{pokemon.type}</Text>\n              <Text style={styles.cardText}>{pokemon.name}</Text>\n            </View>\n          )\n        })}\n      </ScrollView> */}\n      <View style={styles.scrollView}>\n        {/* <FlatList\n          data={pokemonList}\n          renderItem={({ item }) => {\n            console.log(item.id)\n            return (\n              <View\n                style={styles.card}\n                key={item.id}>\n                <Text style={styles.cardText}>{item.type}</Text>\n                <Text style={styles.cardText}>{item.name}</Text>\n              </View>\n            )\n          }}\n          keyExtractor={item => item.id.toString()}\n          ItemSeparatorComponent={<View style={{ height: 16 }} />}\n          ListEmptyComponent={\n            <Text style={{ fontSize: 35, textAlign: 'center' }}>No items found</Text>\n          }\n          ListHeaderComponent={<Text style={styles.headerText}>Pokemon List</Text>}\n          ListFooterComponent={<Text style={styles.footerText}>End if list</Text>}\n          // horizontal={true}\n        /> */}\n      </View>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#f5f5f5',\n    paddingTop: StatusBar.currentHeight,\n  },\n  scrollView: {\n    paddingHorizontal: 16,\n  },\n  card: {\n    flex: 1,\n    backgroundColor: 'white',\n    padding: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    // marginBottom: 16,\n  },\n  cardText: {\n    fontSize: 30,\n  },\n  headerText: {\n    fontSize: 24,\n    textAlign: 'center',\n    marginBottom: 12,\n  },\n  footerText: {\n    fontSize: 24,\n    textAlign: 'center',\n    marginTop: 12,\n  },\n})\n")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Step 3")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Invoke the ",(0,o.kt)("inlineCode",{parentName:"p"},"SectionList")," component with the required props.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The Section List component has two mandatory props:"),(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"sections"),":")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"It is the source of information for the Section List.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In our case, it is ",(0,o.kt)("inlineCode",{parentName:"p"},"groupedPokemonList"),"."))),(0,o.kt)("ol",{parentName:"li",start:2},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("strong",{parentName:"li"},"renderItem"),":")),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This prop is a function that returns the JSX for rendering each item in the list.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"It receives an object containing the current ",(0,o.kt)("inlineCode",{parentName:"p"},"item"),", and you can define how each item should be rendered.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This is similar to what we return for the ",(0,o.kt)("inlineCode",{parentName:"p"},"FlatList")," component but without the Pok\xe9mon type."))))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import {\n  StyleSheet,\n  Text,\n  View,\n  ScrollView,\n  SafeAreaView,\n  StatusBar,\n  FlatList,\n  SectionList,\n} from 'react-native'\nimport pokemonList from './data.json'\nimport groupedPokemonList from './grouped-data.json'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.container}>\n      {/* <ScrollView style={styles.scrollView}>\n        {pokemonList.map(pokemon => {\n          return (\n            <View\n              style={styles.card}\n              key={pokemon.id}>\n              <Text style={styles.cardText}>{pokemon.type}</Text>\n              <Text style={styles.cardText}>{pokemon.name}</Text>\n            </View>\n          )\n        })}\n      </ScrollView> */}\n      <View style={styles.scrollView}>\n        {/* <FlatList\n          data={pokemonList}\n          renderItem={({ item }) => {\n            console.log(item.id)\n            return (\n              <View\n                style={styles.card}\n                key={item.id}>\n                <Text style={styles.cardText}>{item.type}</Text>\n                <Text style={styles.cardText}>{item.name}</Text>\n              </View>\n            )\n          }}\n          keyExtractor={item => item.id.toString()}\n          ItemSeparatorComponent={<View style={{ height: 16 }} />}\n          ListEmptyComponent={\n            <Text style={{ fontSize: 35, textAlign: 'center' }}>No items found</Text>\n          }\n          ListHeaderComponent={<Text style={styles.headerText}>Pokemon List</Text>}\n          ListFooterComponent={<Text style={styles.footerText}>End if list</Text>}\n          // horizontal={true}\n        /> */}\n        <SectionList\n          sections={groupedPokemonList}\n          renderItem={({ item }) => {\n            return (\n              <View style={styles.card}>\n                <Text style={styles.cardText}>{item}</Text>\n              </View>\n            )\n          }}\n        />\n      </View>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#f5f5f5',\n    paddingTop: StatusBar.currentHeight,\n  },\n  scrollView: {\n    paddingHorizontal: 16,\n  },\n  card: {\n    flex: 1,\n    backgroundColor: 'white',\n    padding: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    // marginBottom: 16,\n  },\n  cardText: {\n    fontSize: 30,\n  },\n  headerText: {\n    fontSize: 24,\n    textAlign: 'center',\n    marginBottom: 12,\n  },\n  footerText: {\n    fontSize: 24,\n    textAlign: 'center',\n    marginTop: 12,\n  },\n})\n")),(0,o.kt)("h4",{id:"grouping-by-pok\xe9mon-type"},"Grouping by Pok\xe9mon Type"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"To group the list by Pok\xe9mon type, add a prop called ",(0,o.kt)("strong",{parentName:"p"},"renderSectionHeader"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},"This prop is a function that returns the JSX for rendering each section header in the list."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"It receives an object containing the current ",(0,o.kt)("inlineCode",{parentName:"p"},"section"),", and you can define how each section header should be rendered.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We render ",(0,o.kt)("inlineCode",{parentName:"p"},"section.type")," and add some simple styling."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import {\n  StyleSheet,\n  Text,\n  View,\n  ScrollView,\n  SafeAreaView,\n  StatusBar,\n  FlatList,\n  SectionList,\n} from 'react-native'\nimport pokemonList from './data.json'\nimport groupedPokemonList from './grouped-data.json'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.container}>\n      {/* <ScrollView style={styles.scrollView}>\n        {pokemonList.map(pokemon => {\n          return (\n            <View\n              style={styles.card}\n              key={pokemon.id}>\n              <Text style={styles.cardText}>{pokemon.type}</Text>\n              <Text style={styles.cardText}>{pokemon.name}</Text>\n            </View>\n          )\n        })}\n      </ScrollView> */}\n      <View style={styles.scrollView}>\n        {/* <FlatList\n          data={pokemonList}\n          renderItem={({ item }) => {\n            console.log(item.id)\n            return (\n              <View\n                style={styles.card}\n                key={item.id}>\n                <Text style={styles.cardText}>{item.type}</Text>\n                <Text style={styles.cardText}>{item.name}</Text>\n              </View>\n            )\n          }}\n          keyExtractor={item => item.id.toString()}\n          ItemSeparatorComponent={<View style={{ height: 16 }} />}\n          ListEmptyComponent={\n            <Text style={{ fontSize: 35, textAlign: 'center' }}>No items found</Text>\n          }\n          ListHeaderComponent={<Text style={styles.headerText}>Pokemon List</Text>}\n          ListFooterComponent={<Text style={styles.footerText}>End if list</Text>}\n          // horizontal={true}\n        /> */}\n        <SectionList\n          sections={groupedPokemonList}\n          renderItem={({ item }) => {\n            return (\n              <View style={styles.card}>\n                <Text style={styles.cardText}>{item}</Text>\n              </View>\n            )\n          }}\n          renderSectionHeader={({ section }) => {\n            return <Text style={styles.sectionHeaderText}>{section.type}</Text>\n          }}\n        />\n      </View>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#f5f5f5',\n    paddingTop: StatusBar.currentHeight,\n  },\n  scrollView: {\n    paddingHorizontal: 16,\n  },\n  card: {\n    flex: 1,\n    backgroundColor: 'white',\n    padding: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    // marginBottom: 16,\n  },\n  cardText: {\n    fontSize: 30,\n  },\n  headerText: {\n    fontSize: 24,\n    textAlign: 'center',\n    marginBottom: 12,\n  },\n  footerText: {\n    fontSize: 24,\n    textAlign: 'center',\n    marginTop: 12,\n  },\n})\n")),(0,o.kt)("h4",{id:"styling-section-headers"},"Styling Section Headers"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Define styles for section headers.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Styles include a white background color, font size 24, and font weight bold."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import {\n  StyleSheet,\n  Text,\n  View,\n  ScrollView,\n  SafeAreaView,\n  StatusBar,\n  FlatList,\n  SectionList,\n} from 'react-native'\nimport pokemonList from './data.json'\nimport groupedPokemonList from './grouped-data.json'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.container}>\n      {/* <ScrollView style={styles.scrollView}>\n        {pokemonList.map(pokemon => {\n          return (\n            <View\n              style={styles.card}\n              key={pokemon.id}>\n              <Text style={styles.cardText}>{pokemon.type}</Text>\n              <Text style={styles.cardText}>{pokemon.name}</Text>\n            </View>\n          )\n        })}\n      </ScrollView> */}\n      <View style={styles.scrollView}>\n        {/* <FlatList\n          data={pokemonList}\n          renderItem={({ item }) => {\n            console.log(item.id)\n            return (\n              <View\n                style={styles.card}\n                key={item.id}>\n                <Text style={styles.cardText}>{item.type}</Text>\n                <Text style={styles.cardText}>{item.name}</Text>\n              </View>\n            )\n          }}\n          keyExtractor={item => item.id.toString()}\n          ItemSeparatorComponent={<View style={{ height: 16 }} />}\n          ListEmptyComponent={\n            <Text style={{ fontSize: 35, textAlign: 'center' }}>No items found</Text>\n          }\n          ListHeaderComponent={<Text style={styles.headerText}>Pokemon List</Text>}\n          ListFooterComponent={<Text style={styles.footerText}>End if list</Text>}\n          // horizontal={true}\n        /> */}\n        <SectionList\n          sections={groupedPokemonList}\n          renderItem={({ item }) => {\n            return (\n              <View style={styles.card}>\n                <Text style={styles.cardText}>{item}</Text>\n              </View>\n            )\n          }}\n          renderSectionHeader={({ section }) => {\n            return <Text style={styles.sectionHeaderText}>{section.type}</Text>\n          }}\n        />\n      </View>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#f5f5f5',\n    paddingTop: StatusBar.currentHeight,\n  },\n  scrollView: {\n    paddingHorizontal: 16,\n  },\n  card: {\n    flex: 1,\n    backgroundColor: 'white',\n    padding: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    // marginBottom: 16,\n  },\n  cardText: {\n    fontSize: 30,\n  },\n  headerText: {\n    fontSize: 24,\n    textAlign: 'center',\n    marginBottom: 12,\n  },\n  footerText: {\n    fontSize: 24,\n    textAlign: 'center',\n    marginTop: 12,\n  },\n  sectionHeaderText: {\n    backgroundColor: 'white',\n    fontSize: 24,\n    fontWeight: 'bold',\n  },\n})\n")),(0,o.kt)("h4",{id:"itemseparatorcomponent-1"},"ItemSeparatorComponent"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"SectionList")," component accepts many of the same props as ",(0,o.kt)("inlineCode",{parentName:"li"},"FlatList"),", including ",(0,o.kt)("inlineCode",{parentName:"li"},"ItemSeparatorComponent"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import {\n  StyleSheet,\n  Text,\n  View,\n  ScrollView,\n  SafeAreaView,\n  StatusBar,\n  FlatList,\n  SectionList,\n} from 'react-native'\nimport pokemonList from './data.json'\nimport groupedPokemonList from './grouped-data.json'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.container}>\n      {/* <ScrollView style={styles.scrollView}>\n        {pokemonList.map(pokemon => {\n          return (\n            <View\n              style={styles.card}\n              key={pokemon.id}>\n              <Text style={styles.cardText}>{pokemon.type}</Text>\n              <Text style={styles.cardText}>{pokemon.name}</Text>\n            </View>\n          )\n        })}\n      </ScrollView> */}\n      <View style={styles.scrollView}>\n        {/* <FlatList\n          data={pokemonList}\n          renderItem={({ item }) => {\n            console.log(item.id)\n            return (\n              <View\n                style={styles.card}\n                key={item.id}>\n                <Text style={styles.cardText}>{item.type}</Text>\n                <Text style={styles.cardText}>{item.name}</Text>\n              </View>\n            )\n          }}\n          keyExtractor={item => item.id.toString()}\n          ItemSeparatorComponent={<View style={{ height: 16 }} />}\n          ListEmptyComponent={\n            <Text style={{ fontSize: 35, textAlign: 'center' }}>No items found</Text>\n          }\n          ListHeaderComponent={<Text style={styles.headerText}>Pokemon List</Text>}\n          ListFooterComponent={<Text style={styles.footerText}>End if list</Text>}\n          // horizontal={true}\n        /> */}\n        <SectionList\n          sections={groupedPokemonList}\n          renderItem={({ item }) => {\n            return (\n              <View style={styles.card}>\n                <Text style={styles.cardText}>{item}</Text>\n              </View>\n            )\n          }}\n          renderSectionHeader={({ section }) => {\n            return <Text style={styles.sectionHeaderText}>{section.type}</Text>\n          }}\n          ItemSeparatorComponent={() => <View style={{ height: 16 }} />}\n        />\n      </View>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#f5f5f5',\n    paddingTop: StatusBar.currentHeight,\n  },\n  scrollView: {\n    paddingHorizontal: 16,\n  },\n  card: {\n    flex: 1,\n    backgroundColor: 'white',\n    padding: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    // marginBottom: 16,\n  },\n  cardText: {\n    fontSize: 30,\n  },\n  headerText: {\n    fontSize: 24,\n    textAlign: 'center',\n    marginBottom: 12,\n  },\n  footerText: {\n    fontSize: 24,\n    textAlign: 'center',\n    marginTop: 12,\n  },\n  sectionHeaderText: {\n    backgroundColor: 'white',\n    fontSize: 24,\n    fontWeight: 'bold',\n  },\n})\n")),(0,o.kt)("h4",{id:"sectionseparatorcomponent"},"SectionSeparatorComponent"),(0,o.kt)("blockquote",null),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"and ",(0,o.kt)("inlineCode",{parentName:"li"},"SectionSeparatorComponents"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import {\n  StyleSheet,\n  Text,\n  View,\n  ScrollView,\n  SafeAreaView,\n  StatusBar,\n  FlatList,\n  SectionList,\n} from 'react-native'\nimport pokemonList from './data.json'\nimport groupedPokemonList from './grouped-data.json'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.container}>\n      {/* <ScrollView style={styles.scrollView}>\n        {pokemonList.map(pokemon => {\n          return (\n            <View\n              style={styles.card}\n              key={pokemon.id}>\n              <Text style={styles.cardText}>{pokemon.type}</Text>\n              <Text style={styles.cardText}>{pokemon.name}</Text>\n            </View>\n          )\n        })}\n      </ScrollView> */}\n      <View style={styles.scrollView}>\n        {/* <FlatList\n          data={pokemonList}\n          renderItem={({ item }) => {\n            console.log(item.id)\n            return (\n              <View\n                style={styles.card}\n                key={item.id}>\n                <Text style={styles.cardText}>{item.type}</Text>\n                <Text style={styles.cardText}>{item.name}</Text>\n              </View>\n            )\n          }}\n          keyExtractor={item => item.id.toString()}\n          ItemSeparatorComponent={<View style={{ height: 16 }} />}\n          ListEmptyComponent={\n            <Text style={{ fontSize: 35, textAlign: 'center' }}>No items found</Text>\n          }\n          ListHeaderComponent={<Text style={styles.headerText}>Pokemon List</Text>}\n          ListFooterComponent={<Text style={styles.footerText}>End if list</Text>}\n          // horizontal={true}\n        /> */}\n        <SectionList\n          sections={groupedPokemonList}\n          renderItem={({ item }) => {\n            return (\n              <View style={styles.card}>\n                <Text style={styles.cardText}>{item}</Text>\n              </View>\n            )\n          }}\n          renderSectionHeader={({ section }) => {\n            return <Text style={styles.sectionHeaderText}>{section.type}</Text>\n          }}\n          ItemSeparatorComponent={() => <View style={{ height: 16 }} />}\n          SectionSeparatorComponent={() => <View style={{ height: 16 }} />}\n        />\n      </View>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: '#f5f5f5',\n    paddingTop: StatusBar.currentHeight,\n  },\n  scrollView: {\n    paddingHorizontal: 16,\n  },\n  card: {\n    flex: 1,\n    backgroundColor: 'white',\n    padding: 16,\n    borderRadius: 8,\n    borderWidth: 1,\n    // marginBottom: 16,\n  },\n  cardText: {\n    fontSize: 30,\n  },\n  headerText: {\n    fontSize: 24,\n    textAlign: 'center',\n    marginBottom: 12,\n  },\n  footerText: {\n    fontSize: 24,\n    textAlign: 'center',\n    marginTop: 12,\n  },\n  sectionHeaderText: {\n    backgroundColor: 'white',\n    fontSize: 24,\n    fontWeight: 'bold',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Be sure to return (",(0,o.kt)("inlineCode",{parentName:"li"},"() =>"),") the View component instead of directly assigning it to the ItemSeparator or SectionSeparator component.")),(0,o.kt)("h4",{id:"conclusion-9"},"Conclusion"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"With the SectionListComponent, we have learned how to render grouped data efficiently in React Native.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This concludes the section on lists in React Native, where we explored various list rendering methods, including the Map method, Scroll View component, FlatList component, and SectionListComponent."))),(0,o.kt)("h2",{id:"section-8-inputs-and-forms"},"Section 8: Inputs and Forms"),(0,o.kt)("blockquote",null),(0,o.kt)("h3",{id:"-inputs-and-forms"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Inputs and Forms"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-49"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Welcome back to the eighth section of our course, where we will focus on inputs and forms in React Native.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In this introductory video, we will clarify some key aspects and set expectations for what we are about to learn."))),(0,o.kt)("h4",{id:"input-options-in-react-native"},"Input Options in React Native"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In web applications, we have numerous HTML elements for capturing user input, such as input fields, text areas, drop-down menus, checkboxes, radio buttons, and more.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"However, in React Native, our input options are more limited. As of this recording, the core React Native library provides only two input components: ",(0,o.kt)("inlineCode",{parentName:"p"},"TextInput")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Switch")," These will be our primary focus in this section."))),(0,o.kt)("h4",{id:"expo-expands-input-options"},"Expo Expands Input Options"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Expo, an additional toolkit for React Native, offers more input components like checkboxes and date pickers as part of the Expo SDK. We will explore these in a separate section.")),(0,o.kt)("h4",{id:"challenges-in-react-native-forms"},"Challenges in React Native Forms"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Working with forms in React Native presents challenges. We typically focus on four key aspects:")),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Managing form state."),(0,o.kt)("li",{parentName:"ol"},"Handling form validation."),(0,o.kt)("li",{parentName:"ol"},"Displaying validation messages."),(0,o.kt)("li",{parentName:"ol"},"Submitting form data.")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"While libraries like React Hook Form can streamline these steps, we will learn how to handle forms manually without external dependencies in this section.")),(0,o.kt)("h4",{id:"react-hook-form"},"React Hook Form"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"In the future, we might dedicate an entire section to combining React Native with React Hook Form, so stay tuned for that.")),(0,o.kt)("h4",{id:"project-setup"},"Project Setup"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"To follow along, I've created a new Expo project named ",(0,o.kt)("inlineCode",{parentName:"p"},"RNForms"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"You can create a similar project using the command:"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npx create-expo-app RNForms\n")),(0,o.kt)("h3",{id:"-textinput"},(0,o.kt)("strong",{parentName:"h3"},"=>")," TextInput"),(0,o.kt)("h4",{id:"textinput"},(0,o.kt)("strong",{parentName:"h4"},"TextInput")),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-50"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The Text Input component is a fundamental building block for user input in React Native.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"It allows users to enter text and other data into your application."))),(0,o.kt)("h4",{id:"getting-started-2"},"Getting Started"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"I'm going to start by making some changes in App.js"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Remove the ",(0,o.kt)("inlineCode",{parentName:"p"},"expo-status-bar")," import from Expo and instead import ",(0,o.kt)("inlineCode",{parentName:"p"},"StatusBar")," from ",(0,o.kt)("inlineCode",{parentName:"p"},"react-native")," to stick with vanilla RN")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Import ",(0,o.kt)("inlineCode",{parentName:"p"},"SafeAreaView")," and replace the ",(0,o.kt)("inlineCode",{parentName:"p"},"View")," component with ",(0,o.kt)("inlineCode",{parentName:"p"},"SafeAreaView")," to handle iOS padding at the top.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"For Android, add padding equal to the status bar height in the container styles. ",(0,o.kt)("inlineCode",{parentName:"p"},"paddingTop: StatusBar.currentHeight"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Remove any alignment properties on the container that may affect text input placement.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Delete the JSX within the ",(0,o.kt)("inlineCode",{parentName:"p"},"SafeAreaView"),"."))))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, StatusBar, SafeAreaView } from 'react-native'\n\nexport default function App() {\n  return <SafeAreaView style={styles.container}></SafeAreaView>\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    paddingTop: StatusBar.currentHeight,\n  },\n})\n")),(0,o.kt)("h4",{id:"adding-text-input"},"Adding Text Input"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We are now ready for our text input.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Begin by importing it from React Native and invoke the component within ",(0,o.kt)("inlineCode",{parentName:"p"},"SafeAreaView"),"."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, StatusBar, SafeAreaView, TextInput } from 'react-native'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.container}>\n      <TextInput />\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    paddingTop: StatusBar.currentHeight,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"However, when you view it on your devices, you may not see the text input component.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The styling is such that you don't really see it.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If you try to click on the input, you can see the cursor."))),(0,o.kt)("h4",{id:"styling-the-text-input"},"Styling the Text Input"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let's add some styles to fix this.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let's call the key ",(0,o.kt)("inlineCode",{parentName:"p"},"input")," and add a height of 40 pixels, margin, padding, and border width.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Assign this style to the ",(0,o.kt)("inlineCode",{parentName:"p"},"TextInput")," component"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, StatusBar, SafeAreaView, TextInput } from 'react-native'\n\nexport default function App() {\n  return (\n    <SafeAreaView style={styles.container}>\n      <TextInput style={styles.input} />\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    paddingTop: StatusBar.currentHeight,\n  },\n  input: {\n    height: 40,\n    margin: 12,\n    padding: 10,\n    borderWidth: 1,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Now, when you view the UI, you can clearly see the text input component.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"You can focus on the input and start typing.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"On Android, it brings up the keyboard, and you can continue typing.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"For iOS, if you want a similar keyboard, you need to press ",(0,o.kt)("inlineCode",{parentName:"p"},"Command+Shift+K"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This will bring up the keyboard, and you can press different keys.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Press ",(0,o.kt)("inlineCode",{parentName:"p"},"Command+Shift+K")," again, and the keyboard disappears."))),(0,o.kt)("h4",{id:"tracking-input-value-with-usestate"},"Tracking Input Value with useState"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"However, the value you've entered isn't being tracked.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"To track the input value, we can make use of a ",(0,o.kt)("inlineCode",{parentName:"p"},"state")," variable similar to how we do it in React.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Import ",(0,o.kt)("inlineCode",{parentName:"p"},"useState")," from React")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"and create a state variable ",(0,o.kt)("inlineCode",{parentName:"p"},"name")," and the corresponding ",(0,o.kt)("inlineCode",{parentName:"p"},"setName")," function with an initial value of an empty string."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, StatusBar, SafeAreaView, TextInput } from 'react-native'\nimport { useState } from 'react'\n\nexport default function App() {\n  const [name, setName] = useState('')\n  return (\n    <SafeAreaView style={styles.container}>\n      <TextInput style={styles.input} />\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    paddingTop: StatusBar.currentHeight,\n  },\n  input: {\n    height: 40,\n    margin: 12,\n    padding: 10,\n    borderWidth: 1,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Assign ",(0,o.kt)("inlineCode",{parentName:"li"},"name")," to the ",(0,o.kt)("inlineCode",{parentName:"li"},"value")," prop on the ",(0,o.kt)("inlineCode",{parentName:"li"},"TextInput")," and assign ",(0,o.kt)("inlineCode",{parentName:"li"},"setName")," function to the ",(0,o.kt)("inlineCode",{parentName:"li"},"onChangeText")," prop of the text input component.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, StatusBar, SafeAreaView, TextInput } from 'react-native'\nimport { useState } from 'react'\n\nexport default function App() {\n  const [name, setName] = useState('')\n  return (\n    <SafeAreaView style={styles.container}>\n      <TextInput\n        style={styles.input}\n        value={name}\n        onChangeText={setName}\n      />\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    paddingTop: StatusBar.currentHeight,\n  },\n  input: {\n    height: 40,\n    margin: 12,\n    padding: 10,\n    borderWidth: 1,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"This will automatically update the state variable when you start typing in the input box.")),(0,o.kt)("h4",{id:"displaying-input-value"},"Displaying Input Value"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Let's add some text to make sure we are tracking the input value:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, StatusBar, SafeAreaView, TextInput } from 'react-native'\nimport { useState } from 'react'\n\nexport default function App() {\n  const [name, setName] = useState('')\n  return (\n    <SafeAreaView style={styles.container}>\n      <TextInput\n        style={styles.input}\n        value={name}\n        onChangeText={setName}\n      />\n      <Text>My name is {name}</Text>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    paddingTop: StatusBar.currentHeight,\n  },\n  input: {\n    height: 40,\n    margin: 12,\n    padding: 10,\n    borderWidth: 1,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Let's also add some styles to make it clear:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, StatusBar, SafeAreaView, TextInput } from 'react-native'\nimport { useState } from 'react'\n\nexport default function App() {\n  const [name, setName] = useState('')\n  return (\n    <SafeAreaView style={styles.container}>\n      <TextInput\n        style={styles.input}\n        value={name}\n        onChangeText={setName}\n      />\n      <Text style={styles.text}>My name is {name}</Text>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    paddingTop: StatusBar.currentHeight,\n  },\n  input: {\n    height: 40,\n    margin: 12,\n    padding: 10,\n    borderWidth: 1,\n  },\n  text: {\n    fontSize: 30,\n    padding: 10,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Now, when you start typing on the devices, you can see the same value is reflected in the text component below.")),(0,o.kt)("h4",{id:"summary-17"},"Summary"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"TextInput")," component is a tool for inputting text into the app via a keyboard.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"You can import it from the React Native library and invoke it with the ",(0,o.kt)("inlineCode",{parentName:"p"},"value")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"onChangeText")," props to manage its state.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Join me in the next video where we will learn about some of the important props supported by the text input component."))),(0,o.kt)("h3",{id:"-textinput-props"},(0,o.kt)("strong",{parentName:"h3"},"=>")," TextInput Props"),(0,o.kt)("h4",{id:"textinput-props"},(0,o.kt)("strong",{parentName:"h4"},"TextInput Props")),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-51"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In the previous video, we explored the fundamental aspects of the TextInput component in React Native.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In this video, let's dive into some important props that allow you to customize the behavior and appearance of the TextInput component."))),(0,o.kt)("h4",{id:"placeholder-prop"},"Placeholder Prop"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"First, we have the ",(0,o.kt)("inlineCode",{parentName:"p"},"placeholder")," prop.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"It provides users with visual cues about the expected input.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"For example, we can specify ",(0,o.kt)("inlineCode",{parentName:"p"},"placeholder= 'email@example.com'")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, StatusBar, SafeAreaView, TextInput } from 'react-native'\nimport { useState } from 'react'\n\nexport default function App() {\n  const [name, setName] = useState('')\n  return (\n    <SafeAreaView style={styles.container}>\n      <TextInput\n        style={styles.input}\n        value={name}\n        onChangeText={setName}\n        placeholder='email@example.com'\n      />\n      <Text style={styles.text}>My name is {name}</Text>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    paddingTop: StatusBar.currentHeight,\n  },\n  input: {\n    height: 40,\n    margin: 12,\n    padding: 10,\n    borderWidth: 1,\n  },\n  text: {\n    fontSize: 30,\n    padding: 10,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"When we take a look at the UI, you can see that before the user starts typing, the placeholder text is displayed.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This guides them on what information to provide, in our case, an email.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Please remember that ",(0,o.kt)("inlineCode",{parentName:"p"},"a placeholder is not a substitute for a label"),", as the hint disappears once you start typing."))),(0,o.kt)("h4",{id:"securetextentry-prop"},"SecureTextEntry Prop"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The second prop is ",(0,o.kt)("inlineCode",{parentName:"p"},"secureTextEntry"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Enabling this prop masks the input characters, making them appear as asterisks or dots."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, StatusBar, SafeAreaView, TextInput } from 'react-native'\nimport { useState } from 'react'\n\nexport default function App() {\n  const [name, setName] = useState('')\n  return (\n    <SafeAreaView style={styles.container}>\n      <TextInput\n        style={styles.input}\n        value={name}\n        onChangeText={setName}\n        placeholder='email@example.com'\n        secureTextEntry\n      />\n      <Text style={styles.text}>My name is {name}</Text>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    paddingTop: StatusBar.currentHeight,\n  },\n  input: {\n    height: 40,\n    margin: 12,\n    padding: 10,\n    borderWidth: 1,\n  },\n  text: {\n    fontSize: 30,\n    padding: 10,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This ensures that the user's input remains hidden when dealing with sensitive information like passwords.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"secureTextEntry")," prop is crucial for privacy and security."))),(0,o.kt)("h4",{id:"keyboardtype-prop"},"keyboardType Prop"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The third prop to be aware of is ",(0,o.kt)("inlineCode",{parentName:"p"},"keyboardType"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This prop allows you to specify the type of keyboard that appears when the user interacts with the text input.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"For example, if you have created a phone number field, you can set ",(0,o.kt)("inlineCode",{parentName:"p"},"keyboardType = 'numeric'")))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, StatusBar, SafeAreaView, TextInput } from 'react-native'\nimport { useState } from 'react'\n\nexport default function App() {\n  const [name, setName] = useState('')\n  return (\n    <SafeAreaView style={styles.container}>\n      <TextInput\n        style={styles.input}\n        value={name}\n        onChangeText={setName}\n        placeholder='email@example.com'\n        secureTextEntry\n        keyboardType='numeric'\n      />\n      <Text style={styles.text}>My name is {name}</Text>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    paddingTop: StatusBar.currentHeight,\n  },\n  input: {\n    height: 40,\n    margin: 12,\n    padding: 10,\n    borderWidth: 1,\n  },\n  text: {\n    fontSize: 30,\n    padding: 10,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Returning to the UI and focusing on the text input field on Android, you can see the numeric keyboard.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"There are a few other values you can specify, but you can see how this prop enhances the user experience."))),(0,o.kt)("h4",{id:"autocorrection-and-autocapitalization"},"AutoCorrection and AutoCapitalization"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let me walk you through two more props which are sometimes not favored but are enabled by default.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'If I restart the app and head back to the UI, if I were to type "watre" and press Enter, you can see it auto-corrects to "water."')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'Also, if I type "john doe" and press Enter, you can see it auto-capitalizes the last name.')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"While this behavior is valid for some scenarios, for a username or email field that doesn't always follow perfect English, you might want to relax these enforcements.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"To do that, you can set ",(0,o.kt)("inlineCode",{parentName:"p"},"autoCorrect={false}")," ",(0,o.kt)("inlineCode",{parentName:"p"},'autoCapitalize="none"')))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, StatusBar, SafeAreaView, TextInput } from 'react-native'\nimport { useState } from 'react'\n\nexport default function App() {\n  const [name, setName] = useState('')\n  return (\n    <SafeAreaView style={styles.container}>\n      <TextInput\n        style={styles.input}\n        value={name}\n        onChangeText={setName}\n        placeholder='email@example.com'\n        // secureTextEntry\n        // keyboardType='numeric'\n        autoCorrect={false}\n        autoCapitalize='none'\n      />\n      <Text style={styles.text}>My name is {name}</Text>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    paddingTop: StatusBar.currentHeight,\n  },\n  input: {\n    height: 40,\n    margin: 12,\n    padding: 10,\n    borderWidth: 1,\n  },\n  text: {\n    fontSize: 30,\n    padding: 10,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Other values for ",(0,o.kt)("inlineCode",{parentName:"li"},"autoCapitalize")," include capitalizing every ",(0,o.kt)("inlineCode",{parentName:"li"},"character"),", the first character of every ",(0,o.kt)("inlineCode",{parentName:"li"},"words"),", or the first character of every ",(0,o.kt)("inlineCode",{parentName:"li"},"sentences")," (which is the default).")),(0,o.kt)("h3",{id:"-multiline-textinput"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Multiline TextInput"),(0,o.kt)("h4",{id:"multiline-textinput"},(0,o.kt)("strong",{parentName:"h4"},"Multiline TextInput")),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-52"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In this video, we will explore how to define and style a multiline input in React Native.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Unlike the web, which has an input element for single-line input and a text area element for multiline input, in React Native, the same text input element can be used for both purposes.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"All we have to do is include the ",(0,o.kt)("inlineCode",{parentName:"p"},"multiline")," prop."))),(0,o.kt)("h4",{id:"creating-a-multi-line-input"},"Creating a Multi-line Input"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let's add a new ",(0,o.kt)("inlineCode",{parentName:"p"},"TextInput")," component.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We're going to set ",(0,o.kt)("inlineCode",{parentName:"p"},"style")," as equal to ",(0,o.kt)("inlineCode",{parentName:"p"},"Styles.input"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"placeholder"),' as equal to "message," and then add the ',(0,o.kt)("inlineCode",{parentName:"p"},"multiline")," prop"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, StatusBar, SafeAreaView, TextInput } from 'react-native'\nimport { useState } from 'react'\n\nexport default function App() {\n  const [name, setName] = useState('')\n  return (\n    <SafeAreaView style={styles.container}>\n      <TextInput\n        style={styles.input}\n        value={name}\n        onChangeText={setName}\n        placeholder='email@example.com'\n        // secureTextEntry\n        // keyboardType='numeric'\n        autoCorrect={false}\n        autoCapitalize='none'\n      />\n      <TextInput\n        style={styles.input}\n        placeholder='message'\n        multiline\n      />\n      <Text style={styles.text}>My name is {name}</Text>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    paddingTop: StatusBar.currentHeight,\n  },\n  input: {\n    height: 40,\n    margin: 12,\n    padding: 10,\n    borderWidth: 1,\n  },\n  text: {\n    fontSize: 30,\n    padding: 10,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"If we take a look at the UI, we don't see much difference since the underlying element is the same.")),(0,o.kt)("h4",{id:"styling-the-multiline-input"},"Styling the multiline Input"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"To make this multiline input stand out, we need to add some additional styles.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In the ",(0,o.kt)("inlineCode",{parentName:"p"},"Styles")," object, add a new key-value pair ",(0,o.kt)("inlineCode",{parentName:"p"},"multilineText: { minHeight: 100 }"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Now, we need to specify an array of styles for the TextInput"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, StatusBar, SafeAreaView, TextInput } from 'react-native'\nimport { useState } from 'react'\n\nexport default function App() {\n  const [name, setName] = useState('')\n  return (\n    <SafeAreaView style={styles.container}>\n      <TextInput\n        style={styles.input}\n        value={name}\n        onChangeText={setName}\n        placeholder='email@example.com'\n        // secureTextEntry\n        // keyboardType='numeric'\n        autoCorrect={false}\n        autoCapitalize='none'\n      />\n      <TextInput\n        style={[styles.input, styles.multilineText]}\n        placeholder='message'\n        multiline\n      />\n      <Text style={styles.text}>My name is {name}</Text>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    paddingTop: StatusBar.currentHeight,\n  },\n  input: {\n    height: 40,\n    margin: 12,\n    padding: 10,\n    borderWidth: 1,\n  },\n  text: {\n    fontSize: 30,\n    padding: 10,\n  },\n  multilineText: {\n    minHeight: 100,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If we take a look at the UI, it is clear that this now resembles a multi-line text input.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"A user will be able to understand from the get-go that they can input longer text, which is always good."))),(0,o.kt)("h4",{id:"addressing-alignment"},"Addressing Alignment"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Now, it's important to note that the ",(0,o.kt)("inlineCode",{parentName:"p"},"multiline")," prop aligns the text input to the top on iOS and centers it on Android.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"To address this, we need to specify ",(0,o.kt)("inlineCode",{parentName:"p"},"textAlignVertical"),' and set it to "top."'))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, StatusBar, SafeAreaView, TextInput } from 'react-native'\nimport { useState } from 'react'\n\nexport default function App() {\n  const [name, setName] = useState('')\n  return (\n    <SafeAreaView style={styles.container}>\n      <TextInput\n        style={styles.input}\n        value={name}\n        onChangeText={setName}\n        placeholder='email@example.com'\n        // secureTextEntry\n        // keyboardType='numeric'\n        autoCorrect={false}\n        autoCapitalize='none'\n      />\n      <TextInput\n        style={[styles.input, styles.multilineText]}\n        placeholder='message'\n        multiline\n      />\n      <Text style={styles.text}>My name is {name}</Text>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    paddingTop: StatusBar.currentHeight,\n  },\n  input: {\n    height: 40,\n    margin: 12,\n    padding: 10,\n    borderWidth: 1,\n  },\n  text: {\n    fontSize: 30,\n    padding: 10,\n  },\n  multilineText: {\n    minHeight: 100,\n    textAlignVertical: 'top',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"If we head back to the UI, we can see it is now properly aligned to the top.")),(0,o.kt)("h4",{id:"summary-18"},"Summary"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"That covers the text input component in React Native, including how to create a multi-line input and style it to meet your design requirements.")),(0,o.kt)("h3",{id:"-switch"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Switch"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-53"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In this video, let's explore the ",(0,o.kt)("inlineCode",{parentName:"p"},"Switch")," component in React Native.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Switch")," component serves as a valuable tool for integrating toggles into your app's user interface.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"It is particularly well suited for scenarios where you require users to make binary choices, such as enabling or disabling specific app features."))),(0,o.kt)("h4",{id:"usage-steps"},"Usage Steps"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Let's head back to VS Code and understand its usage step by step:")),(0,o.kt)("h4",{id:"step-1-importing-the-switch-component"},"Step 1: Importing the Switch Component"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Begin by importing the Switch component from the React Native library.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, StatusBar, SafeAreaView, TextInput, Switch } from 'react-native'\n")),(0,o.kt)("h4",{id:"step-2-creating-a-container"},"Step 2: Creating a Container"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let's use the ",(0,o.kt)("inlineCode",{parentName:"p"},"View")," component from React Native and create a container for the switch component.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We're going to set ",(0,o.kt)("inlineCode",{parentName:"p"},"styles")," as equal to ",(0,o.kt)("inlineCode",{parentName:"p"},"styles.switchContainer"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Inside this container, nest a ",(0,o.kt)("inlineCode",{parentName:"p"},"Text"),' component that says "Dark mode" with a style set to ',(0,o.kt)("inlineCode",{parentName:"p"},"styles.text"),". Then, invoke the switch component."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, StatusBar, SafeAreaView, TextInput, Switch } from 'react-native'\nimport { useState } from 'react'\n\nexport default function App() {\n  const [name, setName] = useState('')\n  return (\n    <SafeAreaView style={styles.container}>\n      <TextInput\n        style={styles.input}\n        value={name}\n        onChangeText={setName}\n        placeholder='email@example.com'\n        // secureTextEntry\n        // keyboardType='numeric'\n        autoCorrect={false}\n        autoCapitalize='none'\n      />\n      <TextInput\n        style={[styles.input, styles.multilineText]}\n        placeholder='message'\n        multiline\n      />\n      <Text style={styles.text}>My name is {name}</Text>\n      <View style={styles.switchContainer}>\n        <Text style={styles.text}>Dark Mode</Text>\n        <Switch />\n      </View>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    paddingTop: StatusBar.currentHeight,\n  },\n  input: {\n    height: 40,\n    margin: 12,\n    padding: 10,\n    borderWidth: 1,\n  },\n  text: {\n    fontSize: 30,\n    padding: 10,\n  },\n  multilineText: {\n    minHeight: 100,\n    textAlignVertical: 'top',\n  },\n})\n")),(0,o.kt)("h4",{id:"step-3-defining-styles"},"Step 3: Defining Styles"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let's define the styles for the switchContainer.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Set ",(0,o.kt)("inlineCode",{parentName:"p"},"flexDirection"),' to "row," ',(0,o.kt)("inlineCode",{parentName:"p"},"alignItems"),' to "center," ',(0,o.kt)("inlineCode",{parentName:"p"},"justifyContent"),' to "space-between," and finally, ',(0,o.kt)("inlineCode",{parentName:"p"},"paddingHorizontal")," to 10."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, StatusBar, SafeAreaView, TextInput, Switch } from 'react-native'\nimport { useState } from 'react'\n\nexport default function App() {\n  const [name, setName] = useState('')\n  return (\n    <SafeAreaView style={styles.container}>\n      <TextInput\n        style={styles.input}\n        value={name}\n        onChangeText={setName}\n        placeholder='email@example.com'\n        // secureTextEntry\n        // keyboardType='numeric'\n        autoCorrect={false}\n        autoCapitalize='none'\n      />\n      <TextInput\n        style={[styles.input, styles.multilineText]}\n        placeholder='message'\n        multiline\n      />\n      <Text style={styles.text}>My name is {name}</Text>\n      <View style={styles.switchContainer}>\n        <Text style={styles.text}>Dark Mode</Text>\n        <Switch />\n      </View>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    paddingTop: StatusBar.currentHeight,\n  },\n  input: {\n    height: 40,\n    margin: 12,\n    padding: 10,\n    borderWidth: 1,\n  },\n  text: {\n    fontSize: 30,\n    padding: 10,\n  },\n  multilineText: {\n    minHeight: 100,\n    textAlignVertical: 'top',\n  },\n  switchContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingHorizontal: 10,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},'Now, we will have 10 pixels of horizontal padding for the text "dark mode," but that is okay as styling isn\'t really the main focus.')),(0,o.kt)("h4",{id:"step-4-connecting-with-state-variable"},"Step 4: Connecting with state variable"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"For step 4, create a new state variable named ",(0,o.kt)("inlineCode",{parentName:"p"},"isDarkMode")," with an initial value of ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Then, add two props to the switch component: ",(0,o.kt)("inlineCode",{parentName:"p"},"value")," is equal to ",(0,o.kt)("inlineCode",{parentName:"p"},"isDarkMode"),",")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"and ",(0,o.kt)("inlineCode",{parentName:"p"},"onValueChange"),", where we toggle the ",(0,o.kt)("inlineCode",{parentName:"p"},"isDarkMode")," value.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We pass in a function that receives the ",(0,o.kt)("inlineCode",{parentName:"p"},"previousState")," and set it to the inverse of the previous state, ",(0,o.kt)("inlineCode",{parentName:"p"},"!previousState")," basically inverting the value."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, StatusBar, SafeAreaView, TextInput, Switch } from 'react-native'\nimport { useState } from 'react'\n\nexport default function App() {\n  const [name, setName] = useState('')\n  const [isDarkMode, setIsDarkMode] = useState(false)\n  return (\n    <SafeAreaView style={styles.container}>\n      <TextInput\n        style={styles.input}\n        value={name}\n        onChangeText={setName}\n        placeholder='email@example.com'\n        // secureTextEntry\n        // keyboardType='numeric'\n        autoCorrect={false}\n        autoCapitalize='none'\n      />\n      <TextInput\n        style={[styles.input, styles.multilineText]}\n        placeholder='message'\n        multiline\n      />\n      <Text style={styles.text}>My name is {name}</Text>\n      <View style={styles.switchContainer}>\n        <Text style={styles.text}>Dark Mode</Text>\n        <Switch\n          value={isDarkMode}\n          onValueChange={() => setIsDarkMode(previousState => !previousStates)}\n        />\n      </View>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    paddingTop: StatusBar.currentHeight,\n  },\n  input: {\n    height: 40,\n    margin: 12,\n    padding: 10,\n    borderWidth: 1,\n  },\n  text: {\n    fontSize: 30,\n    padding: 10,\n  },\n  multilineText: {\n    minHeight: 100,\n    textAlignVertical: 'top',\n  },\n  switchContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingHorizontal: 10,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"In a practical scenario, you can consider showing different content or activating certain features in your application when the switch is turned on or off.")),(0,o.kt)("h4",{id:"customizing-appearance-using-trackcolor-and-thumbcolor"},"Customizing Appearance using trackColor and thumbColor"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"As for the props, we can use ",(0,o.kt)("inlineCode",{parentName:"p"},"trackColor")," to set colors for the track in different states.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This is an object. If the value is ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),", let's set it to ",(0,o.kt)("inlineCode",{parentName:"p"},"#767577"),", and if it is ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),", we set it to light blue.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We can also set the thumb color using the ",(0,o.kt)("inlineCode",{parentName:"p"},"thumbColor")," prop, let's set it to ",(0,o.kt)("inlineCode",{parentName:"p"},"#F4F3F4"),"."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { StyleSheet, Text, View, StatusBar, SafeAreaView, TextInput, Switch } from 'react-native'\nimport { useState } from 'react'\n\nexport default function App() {\n  const [name, setName] = useState('')\n  const [isDarkMode, setIsDarkMode] = useState(false)\n  return (\n    <SafeAreaView style={styles.container}>\n      <TextInput\n        style={styles.input}\n        value={name}\n        onChangeText={setName}\n        placeholder='email@example.com'\n        // secureTextEntry\n        // keyboardType='numeric'\n        autoCorrect={false}\n        autoCapitalize='none'\n      />\n      <TextInput\n        style={[styles.input, styles.multilineText]}\n        placeholder='message'\n        multiline\n      />\n      <Text style={styles.text}>My name is {name}</Text>\n      <View style={styles.switchContainer}>\n        <Text style={styles.text}>Dark Mode</Text>\n        <Switch\n          value={isDarkMode}\n          onValueChange={() => setIsDarkMode(previousState => !previousState)}\n          trackColor={{ false: '#767577', true: 'lightblue' }}\n          thumbColor={'#f4f3f4'}\n        />\n      </View>\n    </SafeAreaView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    paddingTop: StatusBar.currentHeight,\n  },\n  input: {\n    height: 40,\n    margin: 12,\n    padding: 10,\n    borderWidth: 1,\n  },\n  text: {\n    fontSize: 30,\n    padding: 10,\n  },\n  multilineText: {\n    minHeight: 100,\n    textAlignVertical: 'top',\n  },\n  switchContainer: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    paddingHorizontal: 10,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If we take a look at the UI, we can see we have different colors from before.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Ideally, these would be dictated by your brand colors."))),(0,o.kt)("h4",{id:"platform-differences"},"Platform Differences"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"You can also see that the appearance of the switch component is different across the two platforms.")),(0,o.kt)("h3",{id:"-login-form"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Login Form"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-54"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Welcome back! In our previous videos, we have covered inputs in React Native.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Now, let's talk about forms.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We're going to be learning this through a series of four videos where we will be building a login form from scratch.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In this particular video, our focus will be on building the user interface for our login form.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This means we'll be writing the JSX and styling it."))),(0,o.kt)("h4",{id:"setting-up-the-component"},"Setting Up the Component"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"I have reset the app component to minimal code.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We have imports for ",(0,o.kt)("inlineCode",{parentName:"p"},"View"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Text"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"TextInput"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Button"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"StyleSheet"),". The JSX is empty."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, TextInput, Button, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return ()\n}\n\nconst styles = StyleSheet.create({})\n\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Now, let's add the elements for the login form.")),(0,o.kt)("h4",{id:"creating-the-main-container"},"Creating the Main Container"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"First things first, we'll begin with a ",(0,o.kt)("inlineCode",{parentName:"p"},"View")," component.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Think of this as our main container, and of course, we're going to apply some container styles to make it look neat.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"style")," is equal to ",(0,o.kt)("inlineCode",{parentName:"p"},"styles.container"),", and we're going to define the container styles: ",(0,o.kt)("inlineCode",{parentName:"p"},"flex")," set to ",(0,o.kt)("inlineCode",{parentName:"p"},"1"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"justifyContent")," set to ",(0,o.kt)("inlineCode",{parentName:"p"},"center"),", a bit of padding in the horizontal direction, and a slightly gray background color."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, TextInput, Button, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return <View style={styles.container}></View>\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 20,\n    backgroundColor: '#f5f5f5',\n  },\n})\n")),(0,o.kt)("h4",{id:"form-container"},"Form Container"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Next, inside this container, let's nest another ",(0,o.kt)("inlineCode",{parentName:"p"},"View")," component.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This will act as our form container, and you guessed it, we're going to style it using form styles.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"style")," is set to ",(0,o.kt)("inlineCode",{parentName:"p"},"styles.form"),", and we're going to specify a white background color, padding, border radius, shadow color, shadow offset, shadow opacity, shadow radius, and elevation. This is specifically for Android."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, TextInput, Button, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View style={styles.form}></View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 20,\n    backgroundColor: '#f5f5f5',\n  },\n  form: {\n    backgroundColor: 'white',\n    padding: 20,\n    borderRadius: 10,\n    shadowColor: 'black',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5,\n  },\n})\n")),(0,o.kt)("h4",{id:"adding-labels-and-inputs"},"Adding Labels and Inputs"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Now it's time to add our labels and inputs. We'll need one for username and one for the password.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'For our inputs, let\'s add a placeholder to guide our users: "Enter your username" and "Enter your password."')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"For the password input, always use ",(0,o.kt)("inlineCode",{parentName:"p"},"secureTextEntry")," to keep passwords hidden."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, TextInput, Button, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View style={styles.form}>\n        <Text>Username</Text>\n        <TextInput placeholder='Enter your username' />\n        <Text>Password</Text>\n        <TextInput\n          placeholder='Enter your password'\n          secureTextEntry\n        />\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 20,\n    backgroundColor: '#f5f5f5',\n  },\n  form: {\n    backgroundColor: 'white',\n    padding: 20,\n    borderRadius: 10,\n    shadowColor: 'black',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Let's style these components: For the label, ",(0,o.kt)("inlineCode",{parentName:"li"},"style")," is equal to ",(0,o.kt)("inlineCode",{parentName:"li"},"styles.label"),", and for the text input, ",(0,o.kt)("inlineCode",{parentName:"li"},"style")," is equal to ",(0,o.kt)("inlineCode",{parentName:"li"},"styles.input"),".")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, TextInput, Button, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View style={styles.form}>\n        <Text style={styles.label}>Username</Text>\n        <TextInput\n          style={styles.input}\n          placeholder='Enter your username'\n        />\n        <Text style={styles.label}>Password</Text>\n        <TextInput\n          style={styles.input}\n          placeholder='Enter your password'\n          secureTextEntry\n        />\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 20,\n    backgroundColor: '#f5f5f5',\n  },\n  form: {\n    backgroundColor: 'white',\n    padding: 20,\n    borderRadius: 10,\n    shadowColor: 'black',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"For the label, we set font size, margin bottom, font weight,")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"and for the input, we define height, border color, border width, margin bottom, padding, and border radius."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, TextInput, Button, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View style={styles.form}>\n        <Text style={styles.label}>Username</Text>\n        <TextInput\n          style={styles.input}\n          placeholder='Enter your username'\n        />\n        <Text style={styles.label}>Password</Text>\n        <TextInput\n          style={styles.input}\n          placeholder='Enter your password'\n          secureTextEntry\n        />\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 20,\n    backgroundColor: '#f5f5f5',\n  },\n  form: {\n    backgroundColor: 'white',\n    padding: 20,\n    borderRadius: 10,\n    shadowColor: 'black',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5,\n  },\n  label: {\n    fontSize: 16,\n    marginBottom: 5,\n    fontWeight: 'bold',\n  },\n  input: {\n    height: 40,\n    borderColor: '#ddd',\n    borderWidth: 1,\n    marginBottom: 15,\n    padding: 10,\n    borderRadius: 5,\n  },\n})\n")),(0,o.kt)("h4",{id:"adding-a-submit-button"},"Adding a Submit Button"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Moving on, we will add a button that users can click to submit this form data.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'We will title it "Login," and as for the ',(0,o.kt)("inlineCode",{parentName:"p"},"onPress")," prop, we will leave it empty for now. We'll tackle that in an upcoming video."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, TextInput, Button, StyleSheet } from 'react-native'\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <View style={styles.form}>\n        <Text style={styles.label}>Username</Text>\n        <TextInput\n          style={styles.input}\n          placeholder='Enter your username'\n        />\n        <Text style={styles.label}>Password</Text>\n        <TextInput\n          style={styles.input}\n          placeholder='Enter your password'\n          secureTextEntry\n        />\n        <Button\n          title='Login'\n          onPress={() => {}}\n        />\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 20,\n    backgroundColor: '#f5f5f5',\n  },\n  form: {\n    backgroundColor: 'white',\n    padding: 20,\n    borderRadius: 10,\n    shadowColor: 'black',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5,\n  },\n  label: {\n    fontSize: 16,\n    marginBottom: 5,\n    fontWeight: 'bold',\n  },\n  input: {\n    height: 40,\n    borderColor: '#ddd',\n    borderWidth: 1,\n    marginBottom: 15,\n    padding: 10,\n    borderRadius: 5,\n  },\n})\n")),(0,o.kt)("h4",{id:"managing-form-state"},"Managing Form State"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If we save the file and take a look at the UI, we can see our login form with username, password, and the login button.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"For our final step, we're going to manage the form state using the ",(0,o.kt)("inlineCode",{parentName:"p"},"useState")," hook.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let's import it at the top."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { useState } from 'react'\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We'll then create two state variables:")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"username")," (empty string as the default value)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"and ",(0,o.kt)("inlineCode",{parentName:"p"},"password")," (empty string as the default value)."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, TextInput, Button, StyleSheet } from 'react-native'\nimport { useState } from 'react'\n\nexport default function App() {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.form}>\n        <Text style={styles.label}>Username</Text>\n        <TextInput\n          style={styles.input}\n          placeholder='Enter your username'\n        />\n        <Text style={styles.label}>Password</Text>\n        <TextInput\n          style={styles.input}\n          placeholder='Enter your password'\n          secureTextEntry\n        />\n        <Button\n          title='Login'\n          onPress={() => {}}\n        />\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 20,\n    backgroundColor: '#f5f5f5',\n  },\n  form: {\n    backgroundColor: 'white',\n    padding: 20,\n    borderRadius: 10,\n    shadowColor: 'black',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5,\n  },\n  label: {\n    fontSize: 16,\n    marginBottom: 5,\n    fontWeight: 'bold',\n  },\n  input: {\n    height: 40,\n    borderColor: '#ddd',\n    borderWidth: 1,\n    marginBottom: 15,\n    padding: 10,\n    borderRadius: 5,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"On the text inputs, we add ",(0,o.kt)("inlineCode",{parentName:"p"},"value")," is equal to ",(0,o.kt)("inlineCode",{parentName:"p"},"username")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"onChangeText")," is equal to ",(0,o.kt)("inlineCode",{parentName:"p"},"setUsername"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Similarly, ",(0,o.kt)("inlineCode",{parentName:"p"},"value")," is equal to ",(0,o.kt)("inlineCode",{parentName:"p"},"password"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"onChangeText")," is equal to ",(0,o.kt)("inlineCode",{parentName:"p"},"setPassword"),"."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, TextInput, Button, StyleSheet } from 'react-native'\nimport { useState } from 'react'\n\nexport default function App() {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.form}>\n        <Text style={styles.label}>Username</Text>\n        <TextInput\n          style={styles.input}\n          placeholder='Enter your username'\n          value={username}\n          onChangeText={setUsername}\n        />\n        <Text style={styles.label}>Password</Text>\n        <TextInput\n          style={styles.input}\n          placeholder='Enter your password'\n          secureTextEntry\n          value={password}\n          onChangeText={setPassword}\n        />\n        <Button\n          title='Login'\n          onPress={() => {}}\n        />\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 20,\n    backgroundColor: '#f5f5f5',\n  },\n  form: {\n    backgroundColor: 'white',\n    padding: 20,\n    borderRadius: 10,\n    shadowColor: 'black',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5,\n  },\n  label: {\n    fontSize: 16,\n    marginBottom: 5,\n    fontWeight: 'bold',\n  },\n  input: {\n    height: 40,\n    borderColor: '#ddd',\n    borderWidth: 1,\n    marginBottom: 15,\n    padding: 10,\n    borderRadius: 5,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"We can now manage our form state seamlessly.")),(0,o.kt)("h3",{id:"-keyboardavoidingview"},(0,o.kt)("strong",{parentName:"h3"},"=>")," KeyboardAvoidingView"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-55"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In our last video, we built the UI for our login form, but as with most things in development, there is a common hiccup we run into when dealing with forms in React Native.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let me show that to you."))),(0,o.kt)("h4",{id:"adding-an-image"},"Adding an Image"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"First, let's make a small change in our UI.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Above the username label, I'm going to render an image.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Make sure to import the component from React Native.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We're going to require the Adaptive icon from the assets folder:")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We will also add ",(0,o.kt)("inlineCode",{parentName:"p"},"style")," is equal to ",(0,o.kt)("inlineCode",{parentName:"p"},"Styles.image"),",")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"and with the StyleSheet API, a new key ",(0,o.kt)("inlineCode",{parentName:"p"},"image")," with a height of 200, width of 200, ",(0,o.kt)("inlineCode",{parentName:"p"},"alignSelf")," set to ",(0,o.kt)("inlineCode",{parentName:"p"},"center"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"marginBottom")," of 50."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import { View, Text, TextInput, Button, StyleSheet, Image } from 'react-native'\nimport { useState } from 'react'\n\nexport default function App() {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n\n  return (\n    <View style={styles.container}>\n      <View style={styles.form}>\n        <Image\n          style={styles.image}\n          source={require('./assets/adaptive-icon.png')}\n        />\n        <Text style={styles.label}>Username</Text>\n        <TextInput\n          style={styles.input}\n          placeholder='Enter your username'\n          value={username}\n          onChangeText={setUsername}\n        />\n        <Text style={styles.label}>Password</Text>\n        <TextInput\n          style={styles.input}\n          placeholder='Enter your password'\n          secureTextEntry\n          value={password}\n          onChangeText={setPassword}\n        />\n        <Button\n          title='Login'\n          onPress={() => {}}\n        />\n      </View>\n    </View>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 20,\n    backgroundColor: '#f5f5f5',\n  },\n  form: {\n    backgroundColor: 'white',\n    padding: 20,\n    borderRadius: 10,\n    shadowColor: 'black',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5,\n  },\n  label: {\n    fontSize: 16,\n    marginBottom: 5,\n    fontWeight: 'bold',\n  },\n  input: {\n    height: 40,\n    borderColor: '#ddd',\n    borderWidth: 1,\n    marginBottom: 15,\n    padding: 10,\n    borderRadius: 5,\n  },\n  image: {\n    width: 200,\n    height: 200,\n    alignSelf: 'center',\n    marginBottom: 50,\n  },\n})\n")),(0,o.kt)("h4",{id:"the-keyboard-overlay-issue"},"The Keyboard Overlay Issue"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Now, if we jump back to our UI, we can see the form with the Adaptive icon image.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If we tap on the password field on the iOS device and press ",(0,o.kt)("inlineCode",{parentName:"p"},"Command+Shift+K")," to bring up the keyboard, do you notice something off?")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The keyboard completely overlays the input element; it's practically invisible.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"And let's be honest, this is not a great user experience."))),(0,o.kt)("h4",{id:"using-keyboardavoidingview"},"Using KeyboardAvoidingView"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Luckily, React Native has a solution for us: the ",(0,o.kt)("inlineCode",{parentName:"p"},"KeyboardAvoidingView")," component.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let's import it from React Native.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Now, replace our outermost ",(0,o.kt)("inlineCode",{parentName:"p"},"View")," container with ",(0,o.kt)("inlineCode",{parentName:"p"},"KeyboardAvoidingView"),", both opening and closing tags.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"On this component, we also set a prop ",(0,o.kt)("inlineCode",{parentName:"p"},"behavior")," is equal to ",(0,o.kt)("inlineCode",{parentName:"p"},"padding"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This ensures that the component increases its padding at the bottom, matching the keyboard's height."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import {\n  View,\n  Text,\n  TextInput,\n  Button,\n  StyleSheet,\n  Image,\n  KeyboardAvoidingView,\n} from 'react-native'\nimport { useState } from 'react'\n\nexport default function App() {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n\n  return (\n    <KeyboardAvoidingView\n      behavior='padding'\n      style={styles.container}>\n      <View style={styles.form}>\n        <Image\n          style={styles.image}\n          source={require('./assets/adaptive-icon.png')}\n        />\n        <Text style={styles.label}>Username</Text>\n        <TextInput\n          style={styles.input}\n          placeholder='Enter your username'\n          value={username}\n          onChangeText={setUsername}\n        />\n        <Text style={styles.label}>Password</Text>\n        <TextInput\n          style={styles.input}\n          placeholder='Enter your password'\n          secureTextEntry\n          value={password}\n          onChangeText={setPassword}\n        />\n        <Button\n          title='Login'\n          onPress={() => {}}\n        />\n      </View>\n    </KeyboardAvoidingView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 20,\n    backgroundColor: '#f5f5f5',\n  },\n  form: {\n    backgroundColor: 'white',\n    padding: 20,\n    borderRadius: 10,\n    shadowColor: 'black',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5,\n  },\n  label: {\n    fontSize: 16,\n    marginBottom: 5,\n    fontWeight: 'bold',\n  },\n  input: {\n    height: 40,\n    borderColor: '#ddd',\n    borderWidth: 1,\n    marginBottom: 15,\n    padding: 10,\n    borderRadius: 5,\n  },\n  image: {\n    width: 200,\n    height: 200,\n    alignSelf: 'center',\n    marginBottom: 50,\n  },\n})\n")),(0,o.kt)("h4",{id:"addressing-the-image-issue"},"Addressing the Image Issue"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let's take a look at our UI, tap on the password, and our form gracefully moves up, revealing the input element.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Problem solved! Well, not entirely.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"I'm going to set the image height to 400."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"image: {\n    width: 200,\n    height: 400,\n    alignSelf: 'center',\n    marginBottom: 50,\n  },\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Now, if we revisit our UI, you'll notice that the input is hiding again when the keyboard pops up.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Once again, we have a fix, and that is a prop called ",(0,o.kt)("inlineCode",{parentName:"p"},"keyboardVerticalOffset"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Setting it to 100 usually does the trick."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import {\n  View,\n  Text,\n  TextInput,\n  Button,\n  StyleSheet,\n  Image,\n  KeyboardAvoidingView,\n} from 'react-native'\nimport { useState } from 'react'\n\nexport default function App() {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n\n  return (\n    <KeyboardAvoidingView\n      behavior='padding'\n      keyboardVerticalOffset={100}\n      style={styles.container}>\n      <View style={styles.form}>\n        <Image\n          style={styles.image}\n          source={require('./assets/adaptive-icon.png')}\n        />\n        <Text style={styles.label}>Username</Text>\n        <TextInput\n          style={styles.input}\n          placeholder='Enter your username'\n          value={username}\n          onChangeText={setUsername}\n        />\n        <Text style={styles.label}>Password</Text>\n        <TextInput\n          style={styles.input}\n          placeholder='Enter your password'\n          secureTextEntry\n          value={password}\n          onChangeText={setPassword}\n        />\n        <Button\n          title='Login'\n          onPress={() => {}}\n        />\n      </View>\n    </KeyboardAvoidingView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 20,\n    backgroundColor: '#f5f5f5',\n  },\n  form: {\n    backgroundColor: 'white',\n    padding: 20,\n    borderRadius: 10,\n    shadowColor: 'black',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5,\n  },\n  label: {\n    fontSize: 16,\n    marginBottom: 5,\n    fontWeight: 'bold',\n  },\n  input: {\n    height: 40,\n    borderColor: '#ddd',\n    borderWidth: 1,\n    marginBottom: 15,\n    padding: 10,\n    borderRadius: 5,\n  },\n  image: {\n    width: 200,\n    height: 400,\n    alignSelf: 'center',\n    marginBottom: 50,\n  },\n})\n")),(0,o.kt)("h4",{id:"handling-platform-specific-offset"},"Handling Platform-Specific Offset"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"But wait, there is a tiny problem for our Android users. When I tap on the password field, you can see there is this unnecessary space that is introduced by the offset.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"So what is the solution? Well, a platform-specific offset.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let's import the ",(0,o.kt)("inlineCode",{parentName:"p"},"Platform")," module and adjust our offset to only apply to iOS devices:"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import {\n  View,\n  Text,\n  TextInput,\n  Button,\n  StyleSheet,\n  Image,\n  KeyboardAvoidingView,\n  Platform,\n} from 'react-native'\nimport { useState } from 'react'\n\nexport default function App() {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n\n  return (\n    <KeyboardAvoidingView\n      behavior='padding'\n      keyboardVerticalOffset={Platform.OS === 'ios' ? 100 : 0}\n      style={styles.container}>\n      <View style={styles.form}>\n        <Image\n          style={styles.image}\n          source={require('./assets/adaptive-icon.png')}\n        />\n        <Text style={styles.label}>Username</Text>\n        <TextInput\n          style={styles.input}\n          placeholder='Enter your username'\n          value={username}\n          onChangeText={setUsername}\n        />\n        <Text style={styles.label}>Password</Text>\n        <TextInput\n          style={styles.input}\n          placeholder='Enter your password'\n          secureTextEntry\n          value={password}\n          onChangeText={setPassword}\n        />\n        <Button\n          title='Login'\n          onPress={() => {}}\n        />\n      </View>\n    </KeyboardAvoidingView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 20,\n    backgroundColor: '#f5f5f5',\n  },\n  form: {\n    backgroundColor: 'white',\n    padding: 20,\n    borderRadius: 10,\n    shadowColor: 'black',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5,\n  },\n  label: {\n    fontSize: 16,\n    marginBottom: 5,\n    fontWeight: 'bold',\n  },\n  input: {\n    height: 40,\n    borderColor: '#ddd',\n    borderWidth: 1,\n    marginBottom: 15,\n    padding: 10,\n    borderRadius: 5,\n  },\n  image: {\n    width: 200,\n    height: 400,\n    alignSelf: 'center',\n    marginBottom: 50,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"If we restart our application and take a look at our UI, we see that the UI is much better on both Android and iOS.")),(0,o.kt)("h4",{id:"conclusion-10"},"Conclusion"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"KeyboardAvoidingView")," can be a tricky component in React Native; it might test your patience.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"But with the basics we have covered today, you're well positioned to deal with it."))),(0,o.kt)("h3",{id:"-form-validation"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Form Validation"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-56"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In this video, Let's dive into form validation.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We will make sure our email and password fields have mandatory field validation."))),(0,o.kt)("h4",{id:"to-display-error-messages"},"to display error messages"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We need a way to display error messages to our users.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let's start by creating a new state variable to store these messages.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We're going to call this ",(0,o.kt)("inlineCode",{parentName:"p"},"errors"),", the function ",(0,o.kt)("inlineCode",{parentName:"p"},"setErrors"),", and its initial value is an empty object."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import {\n  View,\n  Text,\n  TextInput,\n  Button,\n  StyleSheet,\n  Image,\n  KeyboardAvoidingView,\n  Platform,\n} from 'react-native'\nimport { useState } from 'react'\n\nexport default function App() {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [errors, setErrors] = useState({})\n\n  return (\n    <KeyboardAvoidingView\n      behavior='padding'\n      keyboardVerticalOffset={Platform.OS === 'ios' ? 100 : 0}\n      style={styles.container}>\n      <View style={styles.form}>\n        <Image\n          style={styles.image}\n          source={require('./assets/adaptive-icon.png')}\n        />\n        <Text style={styles.label}>Username</Text>\n        <TextInput\n          style={styles.input}\n          placeholder='Enter your username'\n          value={username}\n          onChangeText={setUsername}\n        />\n        <Text style={styles.label}>Password</Text>\n        <TextInput\n          style={styles.input}\n          placeholder='Enter your password'\n          secureTextEntry\n          value={password}\n          onChangeText={setPassword}\n        />\n        <Button\n          title='Login'\n          onPress={() => {}}\n        />\n      </View>\n    </KeyboardAvoidingView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 20,\n    backgroundColor: '#f5f5f5',\n  },\n  form: {\n    backgroundColor: 'white',\n    padding: 20,\n    borderRadius: 10,\n    shadowColor: 'black',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5,\n  },\n  label: {\n    fontSize: 16,\n    marginBottom: 5,\n    fontWeight: 'bold',\n  },\n  input: {\n    height: 40,\n    borderColor: '#ddd',\n    borderWidth: 1,\n    marginBottom: 15,\n    padding: 10,\n    borderRadius: 5,\n  },\n  image: {\n    width: 200,\n    height: 400,\n    alignSelf: 'center',\n    marginBottom: 50,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"This object will help us keep track of any errors that might pop up.")),(0,o.kt)("h4",{id:"define-a-validation-function"},"Define a Validation Function"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Now, let's define a function called ",(0,o.kt)("inlineCode",{parentName:"p"},"validateForm"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This function will be the heart of our validation logic.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"It will check the fields and either populate our ",(0,o.kt)("inlineCode",{parentName:"p"},"errors")," object with messages or return true if everything is valid.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Similarly, one for the password."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import {\n  View,\n  Text,\n  TextInput,\n  Button,\n  StyleSheet,\n  Image,\n  KeyboardAvoidingView,\n  Platform,\n} from 'react-native'\nimport { useState } from 'react'\n\nexport default function App() {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [errors, setErrors] = useState({})\n\n  const validateForm = () => {\n    let errors = {}\n    if (!username) errors.username = 'Username is require'\n    if (!password) errors.password = 'Password is require'\n  }\n\n  return (\n    <KeyboardAvoidingView\n      behavior='padding'\n      keyboardVerticalOffset={Platform.OS === 'ios' ? 100 : 0}\n      style={styles.container}>\n      <View style={styles.form}>\n        <Image\n          style={styles.image}\n          source={require('./assets/adaptive-icon.png')}\n        />\n        <Text style={styles.label}>Username</Text>\n        <TextInput\n          style={styles.input}\n          placeholder='Enter your username'\n          value={username}\n          onChangeText={setUsername}\n        />\n        <Text style={styles.label}>Password</Text>\n        <TextInput\n          style={styles.input}\n          placeholder='Enter your password'\n          secureTextEntry\n          value={password}\n          onChangeText={setPassword}\n        />\n        <Button\n          title='Login'\n          onPress={() => {}}\n        />\n      </View>\n    </KeyboardAvoidingView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 20,\n    backgroundColor: '#f5f5f5',\n  },\n  form: {\n    backgroundColor: 'white',\n    padding: 20,\n    borderRadius: 10,\n    shadowColor: 'black',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5,\n  },\n  label: {\n    fontSize: 16,\n    marginBottom: 5,\n    fontWeight: 'bold',\n  },\n  input: {\n    height: 40,\n    borderColor: '#ddd',\n    borderWidth: 1,\n    marginBottom: 15,\n    padding: 10,\n    borderRadius: 5,\n  },\n  image: {\n    width: 200,\n    height: 400,\n    alignSelf: 'center',\n    marginBottom: 50,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"We will then call ",(0,o.kt)("inlineCode",{parentName:"li"},"setErrors")," passing in the ",(0,o.kt)("inlineCode",{parentName:"li"},"errors")," object.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import {\n  View,\n  Text,\n  TextInput,\n  Button,\n  StyleSheet,\n  Image,\n  KeyboardAvoidingView,\n  Platform,\n} from 'react-native'\nimport { useState } from 'react'\n\nexport default function App() {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [errors, setErrors] = useState({})\n\n  const validateForm = () => {\n    let errors = {}\n    if (!username) errors.username = 'Username is require'\n    if (!password) errors.password = 'Password is require'\n\n    setErrors(errors)\n\n    return Object.keys(errors).length === 0\n  }\n\n  return (\n    <KeyboardAvoidingView\n      behavior='padding'\n      keyboardVerticalOffset={Platform.OS === 'ios' ? 100 : 0}\n      style={styles.container}>\n      <View style={styles.form}>\n        <Image\n          style={styles.image}\n          source={require('./assets/adaptive-icon.png')}\n        />\n        <Text style={styles.label}>Username</Text>\n        <TextInput\n          style={styles.input}\n          placeholder='Enter your username'\n          value={username}\n          onChangeText={setUsername}\n        />\n        <Text style={styles.label}>Password</Text>\n        <TextInput\n          style={styles.input}\n          placeholder='Enter your password'\n          secureTextEntry\n          value={password}\n          onChangeText={setPassword}\n        />\n        <Button\n          title='Login'\n          onPress={() => {}}\n        />\n      </View>\n    </KeyboardAvoidingView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 20,\n    backgroundColor: '#f5f5f5',\n  },\n  form: {\n    backgroundColor: 'white',\n    padding: 20,\n    borderRadius: 10,\n    shadowColor: 'black',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5,\n  },\n  label: {\n    fontSize: 16,\n    marginBottom: 5,\n    fontWeight: 'bold',\n  },\n  input: {\n    height: 40,\n    borderColor: '#ddd',\n    borderWidth: 1,\n    marginBottom: 15,\n    padding: 10,\n    borderRadius: 5,\n  },\n  image: {\n    width: 200,\n    height: 400,\n    alignSelf: 'center',\n    marginBottom: 50,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"So, if the ",(0,o.kt)("inlineCode",{parentName:"li"},"errors")," object doesn't have a key for username or password, we don't have any error messages, and our form is valid.")),(0,o.kt)("h4",{id:"displaying-error-messages"},"Displaying Error Messages"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"But if you do have errors, we need to display them.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In our JSX, let's add error messages using a text component right after the text input.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We're going to check if a username error is present and render that message. If there is no error, we return null.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We'll also style this using ",(0,o.kt)("inlineCode",{parentName:"p"},"Styles.errorText"),", which we will define shortly.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'I\'m going to copy this, paste it after the other text input, and change occurrences of "username" to "password".'))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import {\n  View,\n  Text,\n  TextInput,\n  Button,\n  StyleSheet,\n  Image,\n  KeyboardAvoidingView,\n  Platform,\n} from 'react-native'\nimport { useState } from 'react'\n\nexport default function App() {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [errors, setErrors] = useState({})\n\n  const validateForm = () => {\n    let errors = {}\n    if (!username) errors.username = 'Username is require'\n    if (!password) errors.password = 'Password is require'\n\n    setErrors(errors)\n\n    return Object.keys(errors).length === 0\n  }\n\n  return (\n    <KeyboardAvoidingView\n      behavior='padding'\n      keyboardVerticalOffset={Platform.OS === 'ios' ? 100 : 0}\n      style={styles.container}>\n      <View style={styles.form}>\n        <Image\n          style={styles.image}\n          source={require('./assets/adaptive-icon.png')}\n        />\n        <Text style={styles.label}>Username</Text>\n        <TextInput\n          style={styles.input}\n          placeholder='Enter your username'\n          value={username}\n          onChangeText={setUsername}\n        />\n        {errors.username ? <Text style={styles.errorText}>{errors.username}</Text> : null}\n        <Text style={styles.label}>Password</Text>\n        <TextInput\n          style={styles.input}\n          placeholder='Enter your password'\n          secureTextEntry\n          value={password}\n          onChangeText={setPassword}\n        />\n        {errors.password ? <Text style={styles.errorText}>{errors.password}</Text> : null}\n\n        <Button\n          title='Login'\n          onPress={() => {}}\n        />\n      </View>\n    </KeyboardAvoidingView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 20,\n    backgroundColor: '#f5f5f5',\n  },\n  form: {\n    backgroundColor: 'white',\n    padding: 20,\n    borderRadius: 10,\n    shadowColor: 'black',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5,\n  },\n  label: {\n    fontSize: 16,\n    marginBottom: 5,\n    fontWeight: 'bold',\n  },\n  input: {\n    height: 40,\n    borderColor: '#ddd',\n    borderWidth: 1,\n    marginBottom: 15,\n    padding: 10,\n    borderRadius: 5,\n  },\n  image: {\n    width: 200,\n    height: 400,\n    alignSelf: 'center',\n    marginBottom: 50,\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"This way, our users will know exactly what they missed or what they need to correct.")),(0,o.kt)("h4",{id:"styling-the-error-text"},"Styling the Error Text"),(0,o.kt)("p",null,"-For the error text styles, we'll set color to red and a margin bottom."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"import {\n  View,\n  Text,\n  TextInput,\n  Button,\n  StyleSheet,\n  Image,\n  KeyboardAvoidingView,\n  Platform,\n} from 'react-native'\nimport { useState } from 'react'\n\nexport default function App() {\n  const [username, setUsername] = useState('')\n  const [password, setPassword] = useState('')\n  const [errors, setErrors] = useState({})\n\n  const validateForm = () => {\n    let errors = {}\n    if (!username) errors.username = 'Username is require'\n    if (!password) errors.password = 'Password is require'\n\n    setErrors(errors)\n\n    return Object.keys(errors).length === 0\n  }\n\n  return (\n    <KeyboardAvoidingView\n      behavior='padding'\n      keyboardVerticalOffset={Platform.OS === 'ios' ? 100 : 0}\n      style={styles.container}>\n      <View style={styles.form}>\n        <Image\n          style={styles.image}\n          source={require('./assets/adaptive-icon.png')}\n        />\n        <Text style={styles.label}>Username</Text>\n        <TextInput\n          style={styles.input}\n          placeholder='Enter your username'\n          value={username}\n          onChangeText={setUsername}\n        />\n        {errors.username ? <Text style={styles.errorText}>{errors.username}</Text> : null}\n        <Text style={styles.label}>Password</Text>\n        <TextInput\n          style={styles.input}\n          placeholder='Enter your password'\n          secureTextEntry\n          value={password}\n          onChangeText={setPassword}\n        />\n        {errors.password ? <Text style={styles.errorText}>{errors.password}</Text> : null}\n\n        <Button\n          title='Login'\n          onPress={() => {}}\n        />\n      </View>\n    </KeyboardAvoidingView>\n  )\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingHorizontal: 20,\n    backgroundColor: '#f5f5f5',\n  },\n  form: {\n    backgroundColor: 'white',\n    padding: 20,\n    borderRadius: 10,\n    shadowColor: 'black',\n    shadowOffset: {\n      width: 0,\n      height: 2,\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 4,\n    elevation: 5,\n  },\n  label: {\n    fontSize: 16,\n    marginBottom: 5,\n    fontWeight: 'bold',\n  },\n  input: {\n    height: 40,\n    borderColor: '#ddd',\n    borderWidth: 1,\n    marginBottom: 15,\n    padding: 10,\n    borderRadius: 5,\n  },\n  image: {\n    width: 200,\n    height: 400,\n    alignSelf: 'center',\n    marginBottom: 50,\n  },\n  errorText: {\n    color: 'red',\n    marginBottom: 10,\n  },\n})\n")),(0,o.kt)("p",null,"This will make sure our errors stand out."),(0,o.kt)("h4",{id:"conclusion-11"},"Conclusion"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"And there you have it\u2014simple yet effective form validation.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"But we are not done yet. In our next video, we will be handling form submission.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We will learn when to call this ",(0,o.kt)("inlineCode",{parentName:"p"},"validateForm")," function and how to log form values if the form is indeed valid."))),(0,o.kt)("h2",{id:"section-9-networking"},"Section 9: Networking"),(0,o.kt)("blockquote",null),(0,o.kt)("h3",{id:"-networking"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Networking"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-57"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In this section of our course, we will delve into networking in React Native.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Our primary focus will be on fetching and submitting data to an API.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Along the way, we'll tackle loading states, error handling, and utilize the FlatList component to display our data."))),(0,o.kt)("h4",{id:"section-goals"},"Section Goals"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Our goal in this section is to work with React Native code, focusing on networking.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We'll use the JsonPlaceholder API, a free online REST API, to obtain fake data.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This API is useful for tutorials, testing, sharing code examples, and more.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We'll primarily use the ",(0,o.kt)("inlineCode",{parentName:"p"},"/posts")," endpoint."))),(0,o.kt)("h4",{id:"react-query-and-tan-stack-query"},"React Query and Tan Stack Query"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"You can also use libraries like React Query or Tan Stack Query (formerly known as react-query).")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"However, in this section, we'll stick to plain React Native.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We might explore Tan Stack Query in a separate section later in the series."))),(0,o.kt)("h4",{id:"getting-started-3"},"Getting Started"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'To follow along, create a new Expo project called "react-native-networking" using the following command:'),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-markdown"},"npx create Expo app RN networking\n")))),(0,o.kt)("h4",{id:"jsonplaceholder-api"},"JsonPlaceholder API"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We'll use the JsonPlaceholder API for our examples.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This free API offers various endpoints for posts, comments, albums, etc.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Our focus will be on the ",(0,o.kt)("inlineCode",{parentName:"p"},"/posts")," endpoint.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The API returns 100 posts with post IDs ranging from 1 to 100.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Each post has a user ID, title, and body.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"While the text may not make sense, it's suitable for our purposes.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We can limit the number of posts returned by using a query parameter, e.g., ",(0,o.kt)("inlineCode",{parentName:"p"},"/posts?_limit=10"),"."))),(0,o.kt)("h4",{id:"next-steps"},"Next Steps"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In the next video, we'll make a GET request from our React Native application.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We'll retrieve post titles and bodies from the API and display them in the UI."))),(0,o.kt)("h4",{id:"conclusion-12"},"Conclusion"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Now that you're familiar with the JsonPlaceholder API and our goals for this section, let's proceed with our networking journey. See you in the next video!")),(0,o.kt)("h3",{id:"-get-requests"},(0,o.kt)("strong",{parentName:"h3"},"=>")," GET Requests"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"introduction"},"Introduction"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In our last video, we learned about the ",(0,o.kt)("strong",{parentName:"p"},"Jsonplaceholder API"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In this video, we will fetch data from this API within a ",(0,o.kt)("strong",{parentName:"p"},"React Native component")," and display it in our UI."))),(0,o.kt)("h4",{id:"clearing-existing-code"},"Clearing Existing Code"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Start by clearing out the existing JSX and styles in ",(0,o.kt)("inlineCode",{parentName:"p"},"app.js"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Import ",(0,o.kt)("inlineCode",{parentName:"p"},"SafeAreaView")," and add it to our JSX, setting the ",(0,o.kt)("inlineCode",{parentName:"p"},"style")," prop to ",(0,o.kt)("inlineCode",{parentName:"p"},"Styles.container"),"."),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"For the ",(0,o.kt)("inlineCode",{parentName:"p"},"container")," style, leave ",(0,o.kt)("inlineCode",{parentName:"p"},"flex")," as ",(0,o.kt)("inlineCode",{parentName:"p"},"1")," to occupy the entire available space.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Change the background color to ",(0,o.kt)("inlineCode",{parentName:"p"},"#F5F5F5"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Remove ",(0,o.kt)("inlineCode",{parentName:"p"},"alignItems")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"justifyContent"),", and instead add top padding for Android equal to ",(0,o.kt)("inlineCode",{parentName:"p"},"StatusBar.currentHeight"),". Don't forget to import ",(0,o.kt)("inlineCode",{parentName:"p"},"StatusBar")," from ",(0,o.kt)("inlineCode",{parentName:"p"},"react-native"),".")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Nest a ",(0,o.kt)("inlineCode",{parentName:"p"},"View")," component within the ",(0,o.kt)("inlineCode",{parentName:"p"},"SafeAreaView"),", assign the ",(0,o.kt)("inlineCode",{parentName:"p"},"style")," prop to ",(0,o.kt)("inlineCode",{parentName:"p"},"Styles.listContainer"),"."),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"listContainer")," style will have ",(0,o.kt)("inlineCode",{parentName:"p"},"flex")," set to ",(0,o.kt)("inlineCode",{parentName:"p"},"1")," and horizontal padding.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Import ",(0,o.kt)("inlineCode",{parentName:"p"},"StyleSheet")," if not already imported."))))),(0,o.kt)("h4",{id:"fetching-data"},"Fetching Data"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Define an async function named ",(0,o.kt)("inlineCode",{parentName:"p"},"fetchData"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In ",(0,o.kt)("inlineCode",{parentName:"p"},"fetchData"),", make a fetch request to the Jsonplaceholder post endpoint:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const response = await fetch('https://jsonplaceholder.typicode.com/posts?_limit=10')\n"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Convert the response to JSON:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const data = await response.json()\n"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Store the JSON array of posts in a state variable named ",(0,o.kt)("inlineCode",{parentName:"p"},"postList"),". Import ",(0,o.kt)("inlineCode",{parentName:"p"},"useState")," from ",(0,o.kt)("inlineCode",{parentName:"p"},"react")," and initialize it with an empty array."))),(0,o.kt)("h4",{id:"component-mounting"},"Component Mounting"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Import ",(0,o.kt)("inlineCode",{parentName:"p"},"useEffect")," from ",(0,o.kt)("inlineCode",{parentName:"p"},"react")," and use it with a callback function and an empty dependency array.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Inside the callback, invoke ",(0,o.kt)("inlineCode",{parentName:"p"},"fetchData")," to fetch data when the component mounts."))),(0,o.kt)("h4",{id:"rendering-data"},"Rendering Data"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Use the ",(0,o.kt)("inlineCode",{parentName:"p"},"FlatList")," component to render the data."),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Import ",(0,o.kt)("inlineCode",{parentName:"li"},"FlatList")," from ",(0,o.kt)("inlineCode",{parentName:"li"},"react-native"),"."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Provide the ",(0,o.kt)("inlineCode",{parentName:"p"},"data")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"renderItem")," props to ",(0,o.kt)("inlineCode",{parentName:"p"},"FlatList"),":"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"data={postList}\nrenderItem={({ item }) => (\n  // JSX for each post item\n)}\n"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Destructure ",(0,o.kt)("inlineCode",{parentName:"p"},"item")," and return a ",(0,o.kt)("inlineCode",{parentName:"p"},"View")," component with nested ",(0,o.kt)("inlineCode",{parentName:"p"},"Text")," components to display each post's title and body.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Style each component using the ",(0,o.kt)("inlineCode",{parentName:"p"},"card"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"titleText"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"bodyText")," styles."))),(0,o.kt)("h4",{id:"enhancing-the-ui"},"Enhancing the UI"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Add separators, a header, and a footer to the ",(0,o.kt)("inlineCode",{parentName:"p"},"FlatList")," as props:"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"ItemSeparatorComponent"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"ListEmptyComponent"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"ListHeaderComponent"),", and ",(0,o.kt)("inlineCode",{parentName:"li"},"ListFooterComponent"),"."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Style the header and filter text accordingly."))),(0,o.kt)("h4",{id:"conclusion-13"},"Conclusion"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"You have now learned how to make a GET request and bind the response to the UI.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In the next video, we will learn how to add a loading state while data is fetched in the background."))),(0,o.kt)("h3",{id:"-loading-state"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Loading State"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-58"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In our last video, we successfully fetched data from the JSON Placeholder API and displayed it in our UI.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In this video, we will explore how to implement a loading state while our data is being fetched in the background."))),(0,o.kt)("h4",{id:"implementing-loading-state"},"Implementing Loading State"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"To add a loading state, we will need to introduce a new state variable. Let's name it ",(0,o.kt)("inlineCode",{parentName:"p"},"isLoading"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"With the ",(0,o.kt)("inlineCode",{parentName:"p"},"setup")," function, set ",(0,o.kt)("inlineCode",{parentName:"p"},"isLoading")," and the initial value to ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),"."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"set isLoading true\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Once our data has been fetched, we will update the state to ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In our ",(0,o.kt)("inlineCode",{parentName:"p"},"fetchData")," function, right after invoking ",(0,o.kt)("inlineCode",{parentName:"p"},"setPostList")," function, we will call ",(0,o.kt)("inlineCode",{parentName:"p"},"set isLoading")," and set it to ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),"."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"set isLoading false\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Now, based on the value of ",(0,o.kt)("inlineCode",{parentName:"p"},"isLoading"),", we will conditionally render a loading spinner.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Start by importing the ",(0,o.kt)("inlineCode",{parentName:"p"},"ActivityIndicator")," component from React Native."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"import { ActivityIndicator } from 'react-native'\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Then, just before the return statement, add:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'if isLoading\n  return (\n    <SafeAreaView style={Styles.loadingContainer}>\n      <ActivityIndicator size="large" color="blue" />\n      <Text>Loading</Text>\n    </SafeAreaView>\n  );\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Let's also define the styles for this ",(0,o.kt)("inlineCode",{parentName:"li"},"loadingContainer"),".")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const Styles = StyleSheet.create({\n  loadingContainer: {\n    flex: 1,\n    backgroundColor: 'background-color',\n    paddingTop: StatusBar.currentHeight,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n})\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"We want the loading indicator right in the center of our screen.")),(0,o.kt)("h4",{id:"visualizing-the-loading-ui"},"Visualizing the Loading UI"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If we now save the file and head back to the UI, with iPhone in focus, press R to refresh.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"You will briefly see the loading indicator.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Given that the API is quite fast, the loading state might not be visible for long.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"To better visualize the loading UI during longer API response times, you can temporarily comment out ",(0,o.kt)("inlineCode",{parentName:"p"},"set isLoading")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),"."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"// set isLoading false\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"You can see the loading indicator and the loading text.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This is the UI a user would see while data is being fetched in the background."))),(0,o.kt)("h4",{id:"conclusion-14"},"Conclusion"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"As you can see, implementing a loading state for network requests in React Native is straightforward and enhances the user experience.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Thank you for watching, and I'll see you in the next one."))),(0,o.kt)("h3",{id:"-pull-to-refresh"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Pull to refresh"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-59"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Welcome back, everyone. In this video, we're going to explore how to implement the pull-to-refresh functionality using the ",(0,o.kt)("inlineCode",{parentName:"p"},"FlatList")," component in React Native.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This feature is particularly useful when you want to refresh the data displayed in your app without having to restart it.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Given that we are already fetching posts from the JSON Placeholder API, let's see how we can refresh this data."))),(0,o.kt)("h4",{id:"implementing-pull-to-refresh"},"Implementing Pull-to-Refresh"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"To begin, let's introduce a new state variable to keep track of the refreshing state. We will call it ",(0,o.kt)("inlineCode",{parentName:"p"},"refreshing")," and set its initial value to ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Next, we will assign this ",(0,o.kt)("inlineCode",{parentName:"p"},"refreshing")," state to the ",(0,o.kt)("inlineCode",{parentName:"p"},"refreshing")," prop of our ",(0,o.kt)("inlineCode",{parentName:"p"},"FlatList")," component. So ",(0,o.kt)("inlineCode",{parentName:"p"},"refreshing")," is equal to the state variable ",(0,o.kt)("inlineCode",{parentName:"p"},"refreshing"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We will also provide the ",(0,o.kt)("inlineCode",{parentName:"p"},"onRefresh")," prop on the ",(0,o.kt)("inlineCode",{parentName:"p"},"FlatList")," component, which expects a function to be executed when the ",(0,o.kt)("inlineCode",{parentName:"p"},"FlatList")," is pulled down for refreshing. Let's assign it a function named ",(0,o.kt)("inlineCode",{parentName:"p"},"handleRefresh"),"."))),(0,o.kt)("h4",{id:"defining-the-handlerefresh-function"},"Defining the ",(0,o.kt)("inlineCode",{parentName:"h4"},"handleRefresh")," Function"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Now, let's define this function. So, right after ",(0,o.kt)("inlineCode",{parentName:"p"},"fetchData"),", const ",(0,o.kt)("inlineCode",{parentName:"p"},"handleRefresh"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Within the function, we call ",(0,o.kt)("inlineCode",{parentName:"p"},"setRefreshing")," and set it to ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We will then call the ",(0,o.kt)("inlineCode",{parentName:"p"},"fetchData")," function but this time pass ",(0,o.kt)("inlineCode",{parentName:"p"},"20")," as the limit to fetch an additional ",(0,o.kt)("inlineCode",{parentName:"p"},"10")," items on refresh.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We will then call ",(0,o.kt)("inlineCode",{parentName:"p"},"setRefreshing")," once more and set it back to ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),"."))),(0,o.kt)("h4",{id:"conclusion-15"},"Conclusion"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"And that is essentially all there is to it. We don't need to add any additional JSX as the two props, ",(0,o.kt)("inlineCode",{parentName:"p"},"refreshing")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"onRefresh"),", on the ",(0,o.kt)("inlineCode",{parentName:"p"},"FlatList")," component automatically render a default loading spinner when the list is pulled down.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Now, if we save the file and return to our UI, you can see we have ",(0,o.kt)("inlineCode",{parentName:"p"},"1-10")," posts to begin with.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If I scroll all the way to the top and pull down, we will briefly see a loading indicator.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"But after pulling to refresh, we should now see a total of ",(0,o.kt)("inlineCode",{parentName:"p"},"20")," cards in our UI.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Our code is working as expected.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The pull-to-refresh gesture is a common pattern in mobile development, and I wanted to highlight its implementation in this video.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"I hope you found it straightforward.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Alright, in the next video, let's learn how to submit data to an API endpoint.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Thank you for watching, and please do consider subscribing to the channel and leaving a like if you're enjoying the content."))),(0,o.kt)("h3",{id:"-post-request"},(0,o.kt)("strong",{parentName:"h3"},"=>")," POST Request"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"introduction-1"},"Introduction"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In this video, we will explore how to make a ",(0,o.kt)("strong",{parentName:"p"},"POST request from a React Native app"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We will use the ",(0,o.kt)("strong",{parentName:"p"},"jsonplaceholder API")," as an example, posting a new post title and body."))),(0,o.kt)("h4",{id:"using-jsonplaceholder-api"},"Using Jsonplaceholder API"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The Jsonplaceholder API accepts POST requests to the ",(0,o.kt)("inlineCode",{parentName:"p"},"/posts")," endpoint, allowing us to focus on the React Native code.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"For more information, refer to the guide on creating a resource."))),(0,o.kt)("h4",{id:"step-1-create-state-variables"},"Step 1: Create State Variables"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Begin by creating ",(0,o.kt)("strong",{parentName:"p"},"state variables")," to track the post title and body.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Introduce a variable to monitor the data submission process (",(0,o.kt)("inlineCode",{parentName:"p"},"isPosting"),"), initially set to ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),"."))),(0,o.kt)("h4",{id:"step-2-bind-variables-to-ui-elements"},"Step 2: Bind Variables to UI Elements"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Wrap the current JSX with a ",(0,o.kt)("strong",{parentName:"p"},"React fragment"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Include a ",(0,o.kt)("inlineCode",{parentName:"p"},"View")," above our list with ",(0,o.kt)("inlineCode",{parentName:"p"},"style")," set to ",(0,o.kt)("inlineCode",{parentName:"p"},"Styles.inputContainer"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Inside the ",(0,o.kt)("inlineCode",{parentName:"p"},"View"),", add two ",(0,o.kt)("strong",{parentName:"p"},"text inputs")," for post title and body."),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Set ",(0,o.kt)("inlineCode",{parentName:"p"},"style")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"Styles.input"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Set ",(0,o.kt)("inlineCode",{parentName:"p"},"placeholder"),' to "post title".')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Set ",(0,o.kt)("inlineCode",{parentName:"p"},"value")," to the state variable ",(0,o.kt)("inlineCode",{parentName:"p"},"postTitle"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Use ",(0,o.kt)("inlineCode",{parentName:"p"},"onChangeText")," to call ",(0,o.kt)("inlineCode",{parentName:"p"},"setPostTitle"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Duplicate this for post body.")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Include a ",(0,o.kt)("strong",{parentName:"p"},"button")," to submit the data to the API."),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Set ",(0,o.kt)("inlineCode",{parentName:"p"},"title")," to conditionally render the button text based on the ",(0,o.kt)("inlineCode",{parentName:"p"},"isPosting")," state.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Disable the button when the submission is in progress.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Define ",(0,o.kt)("inlineCode",{parentName:"p"},"onPress")," as ",(0,o.kt)("inlineCode",{parentName:"p"},"addPost")," (yet to be defined).")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Set ",(0,o.kt)("inlineCode",{parentName:"p"},"disabled")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"isPosting"),"."))))),(0,o.kt)("h4",{id:"styling"},"Styling"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Define the styles for the input container and text input."),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"inputContainer")," style: white background, padding, border radius, width, margin.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"input")," style: height, border color, width, margin bottom, padding, border radius.")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Make sure to import the ",(0,o.kt)("inlineCode",{parentName:"p"},"Button")," component at the top."))),(0,o.kt)("h4",{id:"step-3-define-button-click-handler"},"Step 3: Define Button Click Handler"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Uncomment ",(0,o.kt)("inlineCode",{parentName:"p"},"onPress")," and define the ",(0,o.kt)("inlineCode",{parentName:"p"},"addPost")," function.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Inside ",(0,o.kt)("inlineCode",{parentName:"p"},"addPost"),", set ",(0,o.kt)("inlineCode",{parentName:"p"},"isPosting")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"true"),' at the start to disable the "Add Post" button.')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Make a POST request using ",(0,o.kt)("inlineCode",{parentName:"p"},"fetch"),"."),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"URL: ",(0,o.kt)("inlineCode",{parentName:"p"},"/posts"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Method: POST")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Headers: Content-Type - application/json")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Body: JSON.stringify({ title: postTitle, body: postBody })")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Convert the response to JSON and store it as ",(0,o.kt)("inlineCode",{parentName:"p"},"newPost"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Update the post list by prepending ",(0,o.kt)("inlineCode",{parentName:"p"},"newPost")," to it.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Reset the state of the form: ",(0,o.kt)("inlineCode",{parentName:"p"},"postTitle")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"postBody")," to empty strings, and ",(0,o.kt)("inlineCode",{parentName:"p"},"isPosting")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),"."))),(0,o.kt)("h4",{id:"conclusion-16"},"Conclusion"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This is how you make a POST request from a React Native component.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In this example, we used ",(0,o.kt)("inlineCode",{parentName:"p"},"fetch"),", but you can use other libraries like Axios or TenStack Query."))),(0,o.kt)("h3",{id:"-error-handling"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Error Handling"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-60"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Welcome back, in this video, we will add the final touch to our networking code by handling errors when fetching and submitting data. Let's get started.")),(0,o.kt)("h4",{id:"step-1-define-error-state-variable"},"Step 1: Define Error State Variable"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Define a state variable to track any errors that might occur.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Use the ",(0,o.kt)("inlineCode",{parentName:"p"},"setError")," setter function to set ",(0,o.kt)("inlineCode",{parentName:"p"},"error"),", and the initial value is an empty string."))),(0,o.kt)("h4",{id:"step-2-try-catch-blocks-for-fetch-and-post"},"Step 2: Try-Catch Blocks for Fetch and Post"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Add try-catch blocks to our fetch data and add post functions to handle any errors that might occur during the fetch or post operations.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In the try block, reset any error that was present, and within the catch block, call ",(0,o.kt)("inlineCode",{parentName:"p"},"setError"),' with a message "failed to fetch post list" for error feedback to the user.'))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"try {\n  // Fetch data or add post\n} catch (error) {\n  console.log('Error fetching data or adding new post: ', error)\n  setError('failed to fetch post list') // Or \"failed to add new post\"\n}\n")),(0,o.kt)("h4",{id:"step-3-render-ui-based-on-error-state"},"Step 3: Render UI Based on Error State"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Use the error state to render appropriate UI to the user.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If there is an error present, render a view component with the text from the ",(0,o.kt)("inlineCode",{parentName:"p"},"error")," state variable. Otherwise, render the existing JSX."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"return (\n  <SafeAreaView>\n    {error ? (\n      <View style={Styles.errorContainer}>\n        <Text style={Styles.errorText}>{error}</Text>\n      </View>\n    ) : (\n      // Existing JSX\n    )}\n  </SafeAreaView>\n);\n")),(0,o.kt)("h4",{id:"error-styles"},"Error Styles"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Define styles for the error container and text.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"const Styles = StyleSheet.create({\n  errorContainer: {\n    backgroundColor: 'red',\n    padding: 10,\n    borderRadius: 5,\n    width: '80%',\n    margin: 10,\n    alignItems: 'center',\n  },\n  errorText: {\n    color: 'white',\n    fontSize: 16,\n    textAlign: 'center',\n  },\n})\n")),(0,o.kt)("h4",{id:"note-on-handling-localhost-urls-in-android-emulator"},"Note on Handling Localhost URLs in Android Emulator"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Localhost URLs do not work from the Android emulator.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'Consider using your computer\'s IP address instead of "localhost" for API requests from Android devices.'))),(0,o.kt)("h4",{id:"debugging-features-in-react-native"},"Debugging Features in React Native"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Pressing ",(0,o.kt)("inlineCode",{parentName:"p"},"Command + D")," on iOS brings up the developer menu.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Two debugging options:"),(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},"Show Element Inspector: Inspect elements, view the Box model, see styles applied."),(0,o.kt)("li",{parentName:"ol"},"JavaScript Debugger: Inspect network requests, view API calls in the debugger.")))),(0,o.kt)("h4",{id:"conclusion-17"},"Conclusion"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Handling errors in networking in React Native.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Debugging features in React Native for iOS simulator.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Stay tuned for more advanced topics in the upcoming sections of the series."))),(0,o.kt)("h2",{id:"section-10-navigation"},"Section 10: Navigation"),(0,o.kt)("blockquote",null),(0,o.kt)("h3",{id:"-navigation"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Navigation"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-61"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In this 10th section of our course, we're going to dive into navigation in React Native.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"At the heart of any mobile application is navigation; it's the mechanism that allows users to move across different screens, access features, and generally use your app effectively."))),(0,o.kt)("h4",{id:"solutions-for-handling-navigation"},"Solutions for handling navigation"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In React Native, a go-to solution for handling navigation is the React Navigation library.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"It's worth mentioning that Expo has its own built-in routing feature, but it is exclusive to Expo projects.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"On the other hand, React Navigation works both with and without Expo. In React Native apps, we will explore Expo's router in a later section of the series and focus on React Navigation in this section.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"React Navigation provides a variety of Navigators like stack, drawer, and tab Navigators."),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Stack Navigators provide a way for your app to transition between screens, where each new screen is placed on top of a stack.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Drawer Navigator renders a navigation drawer on the side of the screen, which can be opened and closed via gestures.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Tab Navigator at the bottom of your screen lets you easily switch between different routes. We will look at examples of all three."))))),(0,o.kt)("h4",{id:"setting-up-the-project-2"},"Setting Up the Project"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'For this section, I have set up a new Expo project called "RN Navigation." If you wish to code along, create a similar project using the command:'),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"npx create-expo-app RN-navigation\n"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'In this project folder, we\'re going to install React Navigation as a dependency. You can find the command in the React Navigation docs on the "Getting Started" page. Copy the command:'),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"npm install @react-navigation/native\n")),(0,o.kt)("p",{parentName:"li"},"and run it in your terminal.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We will also install two dependencies: ",(0,o.kt)("inlineCode",{parentName:"p"},"react-native-screens")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"react-native-safe-area-context"),". Copy the command:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"npm install react-native-screens react-native-safe-area-context\n")),(0,o.kt)("p",{parentName:"li"},"and paste it in your project folder.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Finally, to work with React Navigation, we need a wrapping component for the whole app, and that is the ",(0,o.kt)("inlineCode",{parentName:"p"},"NavigationContainer")," component. You can go back to the doc, scroll down to the section on Navigation Container, copy the code, and paste it in ",(0,o.kt)("inlineCode",{parentName:"p"},"App.tsx"),". We don't really need to import React; the rest of the code we will write in this section will go in between the opening and closing tags of ",(0,o.kt)("inlineCode",{parentName:"p"},"NavigationContainer"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Join me in the next video, where we will kick things off by setting up stack navigation in our React Native app. I'll see you in the next one."))),(0,o.kt)("h3",{id:"-stack-navigation"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Stack Navigation"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-62"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Now that we have React Navigation in place, it's time to dive into one of its fundamental Navigators, which is the stack Navigator.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Stack navigation follows a straightforward principle: each new screen is stacked on top of the previous one. It's like a deck of cards - when you navigate to a new screen, a new card is placed on top of the stack, and when you navigate back, the top card is removed, revealing the previous screen.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This navigation pattern is common in many mobile apps, allowing users to drill down into detailed views and then retrace their steps when done.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"It's particularly useful in scenarios where a linear flow of screens is required, for example, viewing a list of items, tapping on an item to see its details, and then tapping on a link contained within to view more details."))),(0,o.kt)("h4",{id:"stack-navigator-and-native-stack-navigator"},"Stack Navigator and Native Stack Navigator"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The React Navigation library offers two Navigators for stack navigation: Stack Navigator and Native Stack Navigator."),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"Stack Navigator"),": This is a JavaScript-based Navigator that offers a high degree of customization, making it a great choice for apps that require a unique navigation experience."),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"However, this customization comes at the cost of performance, especially when compared to its counterpart, the Native Stack Navigator."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("inlineCode",{parentName:"p"},"Native Stack Navigator"),": The Native Stack Navigator leverages the native navigation constructs of iOS and Android, providing better performance and a more native feel to the transitions and gestures."),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"The caveat is that it might not offer the same level of customization as the Stack Navigator.")))))),(0,o.kt)("h4",{id:"setting-up-the-project-3"},"Setting Up the Project"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"First, we have to install the Native Stack Navigator library in our project. Go to the React Navigation docs, and under Navigators, select Native Stack. Copy the installation command:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"npm install @react-navigation/native-stack\n")),(0,o.kt)("p",{parentName:"li"},"and paste it in the terminal.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Next, in ",(0,o.kt)("inlineCode",{parentName:"p"},"App.js"),", at the top, import the ",(0,o.kt)("inlineCode",{parentName:"p"},"createNativeStackNavigator")," function from ",(0,o.kt)("inlineCode",{parentName:"p"},"react-navigation/native-stack")," and invoke it to create a Native Stack Navigator instance.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Now, set up the Navigator within our ",(0,o.kt)("inlineCode",{parentName:"p"},"App")," component. Within ",(0,o.kt)("inlineCode",{parentName:"p"},"NavigationContainer"),", use ",(0,o.kt)("inlineCode",{parentName:"p"},"createNativeStackNavigator"),", and within this, use ",(0,o.kt)("inlineCode",{parentName:"p"},"stack.Screen"),". This component accepts a ",(0,o.kt)("inlineCode",{parentName:"p"},"name"),' prop (which we have set to "home") and a ',(0,o.kt)("inlineCode",{parentName:"p"},"component")," prop (which refers to the React Native component that will render a view).")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let's define that component in the project. Create a new folder called ",(0,o.kt)("inlineCode",{parentName:"p"},"screens"),", and within it, create a new file, ",(0,o.kt)("inlineCode",{parentName:"p"},"HomeScreen.js"),'. Define a simple React Native component that renders the text "Home Screen."')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In ",(0,o.kt)("inlineCode",{parentName:"p"},"App.js"),", import ",(0,o.kt)("inlineCode",{parentName:"p"},"HomeScreen")," and assign it to the ",(0,o.kt)("inlineCode",{parentName:"p"},"component")," prop on ",(0,o.kt)("inlineCode",{parentName:"p"},"stack.Screen"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We now have one screen defined in our application. Of course, navigation isn't of much use with just one screen, so let's create a second one. Create a new file, ",(0,o.kt)("inlineCode",{parentName:"p"},"AboutScreen.js"),", in the ",(0,o.kt)("inlineCode",{parentName:"p"},"screens"),' folder and define a similar component, but change all occurrences of "home" to "about."')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In ",(0,o.kt)("inlineCode",{parentName:"p"},"App.js"),", duplicate the ",(0,o.kt)("inlineCode",{parentName:"p"},"stack.Screen")," line, changing ",(0,o.kt)("inlineCode",{parentName:"p"},"name"),' to "aboutScreen," and make sure to import the component at the top.')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Our basic stack Navigator has been set up. If you now run the app using ",(0,o.kt)("inlineCode",{parentName:"p"},"npm start"),', check the two devices, and you will see the "Home Screen" rendered by default at the top. We also have a header of sorts with the ',(0,o.kt)("inlineCode",{parentName:"p"},"name")," prop on ",(0,o.kt)("inlineCode",{parentName:"p"},"stack.Screen")," displayed as the title.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The library also takes care of rendering the content within a ",(0,o.kt)("inlineCode",{parentName:"p"},"SafeAreaView"),", avoiding the notch at the top. By default, the topmost screen within the Navigator is the initial screen. You can change this by setting the ",(0,o.kt)("inlineCode",{parentName:"p"},"initialRouteName")," prop on ",(0,o.kt)("inlineCode",{parentName:"p"},"createNativeStackNavigator"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'Let\'s set it to "aboutScreen," which is the name of the "About" screen.')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'Save the file, restart the server, and you can see the "About Screen" is displayed as the initial screen. But how do we navigate between the two screens? Let\'s learn that in the next video.'))),(0,o.kt)("h3",{id:"-navigation-between-screens"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Navigation between Screens"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-63"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Now that we have two screens in our stack Navigator (home and about), let's explore how we can navigate from one to the other.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We have two primary ways to handle navigation between screens: using the ",(0,o.kt)("inlineCode",{parentName:"p"},"navigation")," prop and the ",(0,o.kt)("inlineCode",{parentName:"p"},"useNavigation")," hook. Let's explore both methods and understand their use cases."))),(0,o.kt)("h4",{id:"using-the-navigation-prop"},"Using the ",(0,o.kt)("inlineCode",{parentName:"h4"},"navigation")," prop"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Every screen component in your application is provided with the ",(0,o.kt)("inlineCode",{parentName:"p"},"navigation")," prop automatically by React Navigation.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"navigation")," prop has various methods to initiate navigation actions, one of which is ",(0,o.kt)("inlineCode",{parentName:"p"},"navigate"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let's see how we can use that method to navigate from our home screen to the about screen:"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"At the top, import the ",(0,o.kt)("inlineCode",{parentName:"p"},"Button")," component from ",(0,o.kt)("inlineCode",{parentName:"p"},"react-native"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Below the ",(0,o.kt)("inlineCode",{parentName:"p"},"Text")," element, invoke the ",(0,o.kt)("inlineCode",{parentName:"p"},"Button")," component with ",(0,o.kt)("inlineCode",{parentName:"p"},"title"),' set to "Go to About" and specify the ',(0,o.kt)("inlineCode",{parentName:"p"},"onPress")," prop to navigate to the about screen.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In the ",(0,o.kt)("inlineCode",{parentName:"p"},"onPress")," handler, destructure the ",(0,o.kt)("inlineCode",{parentName:"p"},"navigation")," prop on the home screen, and within an arrow function, call ",(0,o.kt)("inlineCode",{parentName:"p"},"navigation.navigate"),' with the name of the screen, which is "about."')))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'If we save the file and change the initial route name to "home" (which is also the default route), press R to restart the app. We should see the "Go to About" button on both iOS and Android.'),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},'Click on "Go to About," and we are navigated to the about screen. It\'s really simple.')))),(0,o.kt)("h4",{id:"using-the-usenavigation-hook"},"Using the ",(0,o.kt)("inlineCode",{parentName:"h4"},"useNavigation")," hook"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Alternatively, if you prefer using hooks, React Navigation provides a ",(0,o.kt)("inlineCode",{parentName:"p"},"useNavigation")," hook.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Import it at the top and then invoke it within the component:"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"const navigation = useNavigation();")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Delete the ",(0,o.kt)("inlineCode",{parentName:"p"},"navigation")," prop, and everything else remains the same. Restart the app, and we see the behavior remains the same.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Now you might ask when to use one over the other.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"navigation")," prop is easy to use and doesn't require any additional import if you're within a screen component.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"However, the ",(0,o.kt)("inlineCode",{parentName:"p"},"useNavigation")," hook can be used in any component, not just screen components, making it a more flexible option when you have nested components or are working with utility components that need to initiate navigation.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"So, my recommendation would be to use the ",(0,o.kt)("inlineCode",{parentName:"p"},"navigation")," prop for all screen components and use the ",(0,o.kt)("inlineCode",{parentName:"p"},"useNavigation")," hook only when it is necessary.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Back in the UI, when you navigate from the home screen to the about screen, you can see that React Navigation keeps the home screen in the stack and adds the about screen on top of it.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If you press the back button, it pops the about screen off the stack and navigates back to the home screen, following the last-in-first-out principle of stack navigation.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"This stacking behavior ensures a natural navigation flow within your app, allowing users to move forward to new screens or step back to previous screens effortlessly.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"As an exercise, I would encourage you to try and add a button in the about screen to navigate to the home screen.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let me know in the comment section if you were able to achieve that.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Now that you have grasped the basics of navigating between screens, join me in the next video where we will explore passing data between screens."))),(0,o.kt)("h3",{id:"-passing-data-between-screens"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Passing Data between Screens"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-64"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"In the previous video, we learned how to navigate between screens. In this video, we will learn how to pass data while navigating. Let's get straight into the code.")),(0,o.kt)("h4",{id:"passing-data-between-screens"},"Passing Data Between Screens"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"For our example, let's pass a ",(0,o.kt)("inlineCode",{parentName:"p"},"name")," parameter from the ",(0,o.kt)("inlineCode",{parentName:"p"},"home")," screen to the ",(0,o.kt)("inlineCode",{parentName:"p"},"about")," screen and render that ",(0,o.kt)("inlineCode",{parentName:"p"},"name")," value in the ",(0,o.kt)("inlineCode",{parentName:"p"},"about")," screen.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The ",(0,o.kt)("inlineCode",{parentName:"p"},"navigation.navigate")," method, which we have already used to navigate between screens, also accepts a second argument: a route parameters object. This object can contain the data you want to pass to the new screen.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let's specify a key-value pair: ",(0,o.kt)("inlineCode",{parentName:"p"},"name"),' set to the string "WhichWas." We can access this parameter on the ',(0,o.kt)("inlineCode",{parentName:"p"},"about")," screen using the ",(0,o.kt)("inlineCode",{parentName:"p"},"route.params")," prop. This prop is provided to all screen components.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Within the component, destructure ",(0,o.kt)("inlineCode",{parentName:"p"},"name")," from ",(0,o.kt)("inlineCode",{parentName:"p"},"route.params")," and update the JSX to render ",(0,o.kt)("inlineCode",{parentName:"p"},"{name}"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If we now save the files, start our application, and go to the devices and then to the ",(0,o.kt)("inlineCode",{parentName:"p"},"about"),' screen, we see the text "about WhichWas." We are able to pass data between screens.'))),(0,o.kt)("h4",{id:"setting-default-parameter-value"},"Setting Default Parameter Value"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"It is also possible to set a default parameter value. In ",(0,o.kt)("inlineCode",{parentName:"p"},"app.js"),", on the ",(0,o.kt)("inlineCode",{parentName:"p"},"about")," screen, specify ",(0,o.kt)("inlineCode",{parentName:"p"},"initialParams"),", which is an object, and set ",(0,o.kt)("inlineCode",{parentName:"p"},"name"),' to "guest."')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Now, if we remove the data when navigating from the ",(0,o.kt)("inlineCode",{parentName:"p"},"home")," screen, restart the application, and go to the devices, and then to the ",(0,o.kt)("inlineCode",{parentName:"p"},"about"),' screen, we see the text "about guest." "Guest" is the default value for the ',(0,o.kt)("inlineCode",{parentName:"p"},"name")," parameter."))),(0,o.kt)("h4",{id:"updating-parameters"},"Updating Parameters"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"It's also possible to update the parameters from the given screen using the ",(0,o.kt)("inlineCode",{parentName:"p"},"navigation")," prop. In the ",(0,o.kt)("inlineCode",{parentName:"p"},"about")," screen, destructure ",(0,o.kt)("inlineCode",{parentName:"p"},"navigation")," and in the JSX, add a new ",(0,o.kt)("inlineCode",{parentName:"p"},"Button"),". Make sure to import the component from ",(0,o.kt)("inlineCode",{parentName:"p"},"react-native"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Specify ",(0,o.kt)("inlineCode",{parentName:"p"},"title"),' as "Update the name" and on ',(0,o.kt)("inlineCode",{parentName:"p"},"onPress"),", invoke ",(0,o.kt)("inlineCode",{parentName:"p"},"navigation.setParams"),", passing in an object with ",(0,o.kt)("inlineCode",{parentName:"p"},"name"),' set to "CodeEvolution."')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"If we restart our application, go to the device, go to the ",(0,o.kt)("inlineCode",{parentName:"p"},"about"),' screen, and click on "Update the name," we see "about CodeEvolution."'))),(0,o.kt)("h4",{id:"sending-data-back"},"Sending Data Back"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"You can also send data back to the previous screen in the same way. Create a ",(0,o.kt)("inlineCode",{parentName:"p"},"Button")," with the ",(0,o.kt)("inlineCode",{parentName:"p"},"title"),' "Go back with data," and on ',(0,o.kt)("inlineCode",{parentName:"p"},"onPress"),", use ",(0,o.kt)("inlineCode",{parentName:"p"},"navigation.navigate")," to go to the ",(0,o.kt)("inlineCode",{parentName:"p"},"home")," screen with ",(0,o.kt)("inlineCode",{parentName:"p"},"result"),' as "Data from about."')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"In the ",(0,o.kt)("inlineCode",{parentName:"p"},"home")," screen, destructure ",(0,o.kt)("inlineCode",{parentName:"p"},"route")," and add another ",(0,o.kt)("inlineCode",{parentName:"p"},"Text")," component that renders ",(0,o.kt)("inlineCode",{parentName:"p"},"route.params.result"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},'If you now click on "Go back with data," we see "Data from about."')),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"As you can see, React Navigation's parameter handling provides a seamless way to pass and retrieve data between screens, making your navigation structure more dynamic and responsive to user interaction."))),(0,o.kt)("h4",{id:"customizing-appearance-and-behavior"},"Customizing Appearance and Behavior"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"In the next video, we will dive deeper into customizing the appearance and behavior of our Navigator and screens.")),(0,o.kt)("h3",{id:"-stack-navigation-options"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Stack Navigation Options"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-65"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Now that we are familiar with basic navigation, it's time to explore some of the options that the stack Navigator supports in this video."),(0,o.kt)("li",{parentName:"ul"},"We will dive into specifying a screen title, styling headers, and setting content styles.")),(0,o.kt)("h4",{id:"screen-title"},"Screen Title"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Every screen in our stack can display a title in the header serving as a handy guide for users to understand their current location within the app."),(0,o.kt)("li",{parentName:"ul"},"By default, the ",(0,o.kt)("inlineCode",{parentName:"li"},"name"),' prop on the screen component is showcased as the screen title (e.g., "home" and "about").'),(0,o.kt)("li",{parentName:"ul"},"This can be customized by specifying a ",(0,o.kt)("inlineCode",{parentName:"li"},"title")," option.",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Use the ",(0,o.kt)("inlineCode",{parentName:"li"},"options")," prop to specify an object with the key ",(0,o.kt)("inlineCode",{parentName:"li"},"title"),", like this:")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"options: {\n  title: 'Welcome Home'\n}\n"))),(0,o.kt)("li",{parentName:"ul"},'The home screen title now reads "Welcome Home."')),(0,o.kt)("h4",{id:"styling-headers"},"Styling Headers"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"It's often desirable to style the header to resonate with the application's theme."),(0,o.kt)("li",{parentName:"ul"},"This includes setting the background color, text color, and font weight among other attributes."),(0,o.kt)("li",{parentName:"ul"},"To style the header, you can use the ",(0,o.kt)("inlineCode",{parentName:"li"},"headerStyle")," option:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Set ",(0,o.kt)("inlineCode",{parentName:"li"},"background color"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"header tint color"),", and ",(0,o.kt)("inlineCode",{parentName:"li"},"header title style font weight")," as follows:")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'options: {\n    headerStyle: {\n        backgroundColor: "purple",\n    },\n    headerTintColor: "white",\n    headerTitleStyle: {\n        fontWeight: "bold",\n    },\n}\n')))),(0,o.kt)("h4",{id:"header-left-and-header-right"},"Header Left and Header Right"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"You can add custom components to the left and right of the header."),(0,o.kt)("li",{parentName:"ul"},"To add a button on the right-hand side of the title, use the ",(0,o.kt)("inlineCode",{parentName:"li"},"headerRight")," option:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"This should be equal to a function that returns a component."),(0,o.kt)("li",{parentName:"ul"},"Import ",(0,o.kt)("inlineCode",{parentName:"li"},"Pressable")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"Text")," components if needed."),(0,o.kt)("li",{parentName:"ul"},"Example code:")),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'options: {\n    headerRight: () => (\n        <Pressable onPress={() => alert("Menu button pressed")}>\n            <Text style={{ color: "white", fontSize: 16 }}>Menu</Text>\n        </Pressable>\n    ),\n}\n')))),(0,o.kt)("h4",{id:"header-left"},"Header Left"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Similar to ",(0,o.kt)("inlineCode",{parentName:"li"},"headerRight"),", there is also the ",(0,o.kt)("inlineCode",{parentName:"li"},"headerLeft")," option, which adds an element on the left side of the header.")),(0,o.kt)("h4",{id:"styling-content"},"Styling Content"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"To style the content of your screens, you can use the ",(0,o.kt)("inlineCode",{parentName:"li"},"contentStyle")," option."),(0,o.kt)("li",{parentName:"ul"},"For instance, to set a background color, use:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},"options: {\n  contentStyle: {\n    backgroundColor: '#HEX_VALUE'\n  }\n}\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"This sets the background color to a hex value.")),(0,o.kt)("h4",{id:"uniform-style-across-all-screens"},"Uniform Style Across All Screens"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"For a more uniform style across all screens in the stack, you need to lift these options to the ",(0,o.kt)("inlineCode",{parentName:"li"},"Stack Navigator")," using the ",(0,o.kt)("inlineCode",{parentName:"li"},"screenOptions")," prop."),(0,o.kt)("li",{parentName:"ul"},"For example, you can specify ",(0,o.kt)("inlineCode",{parentName:"li"},"screenOptions")," and move all styling options to it."),(0,o.kt)("li",{parentName:"ul"},"This ensures the same styling applies to all screens in the stack.")),(0,o.kt)("h3",{id:"-dynamic-stack-navigator-options"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Dynamic Stack Navigator Options"),(0,o.kt)("blockquote",null),(0,o.kt)("h4",{id:"intro-66"},"Intro"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"In the previous video, we dived into some of the options provided by the stack Navigator."),(0,o.kt)("li",{parentName:"ul"},"We explored setting a title for the home screen, a background color for the header, and even a background color for the content.")),(0,o.kt)("h4",{id:"dynamically-set-header-title"},"Dynamically Set Header Title"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"There are instances where you might want to dynamically set certain options, with the title being a prime example."),(0,o.kt)("li",{parentName:"ul"},'Let\'s say, instead of a generic title like "about," we want to personalize it with the name of the person passed in as a parameter.')),(0,o.kt)("h4",{id:"stackscreen-component"},"Stack.Screen Component"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"One way to dynamically set the header title is directly from the ",(0,o.kt)("inlineCode",{parentName:"li"},"Stack.Screen")," component by passing a function to the ",(0,o.kt)("inlineCode",{parentName:"li"},"options")," prop."),(0,o.kt)("li",{parentName:"ul"},"In the context of our About screen component, we would specify ",(0,o.kt)("inlineCode",{parentName:"li"},"options")," as a function which returns an object."),(0,o.kt)("li",{parentName:"ul"},"The function receives the ",(0,o.kt)("inlineCode",{parentName:"li"},"route")," prop from the screen, which we can destructure to access the desired parameters and use them as part of the title."),(0,o.kt)("li",{parentName:"ul"},"For example, you can set the title like this:",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-markdown"},"```javascript\noptions: ({ route }) => ({\n  title: route.params.name,\n})\n```\n"))),(0,o.kt)("li",{parentName:"ul"},"When navigating from the Home screen and passing a ",(0,o.kt)("inlineCode",{parentName:"li"},"name"),", the title will display the passed-in name parameter.")),(0,o.kt)("h4",{id:"leveraging-react-hook"},"Leveraging React Hook"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Alternatively, we can leverage a React hook to set a dynamic title."),(0,o.kt)("li",{parentName:"ul"},"Comment out the ",(0,o.kt)("inlineCode",{parentName:"li"},"options")," prop on the About screen and head over to the About screen component."),(0,o.kt)("li",{parentName:"ul"},"Bring in ",(0,o.kt)("inlineCode",{parentName:"li"},"useLayoutEffect")," from React and invoke it within the component."),(0,o.kt)("li",{parentName:"ul"},"Pass in a function with a dependency array."),(0,o.kt)("li",{parentName:"ul"},"Within the function, invoke ",(0,o.kt)("inlineCode",{parentName:"li"},"navigation.setOptions")," and pass in the options object."),(0,o.kt)("li",{parentName:"ul"},"Set the title to ",(0,o.kt)("inlineCode",{parentName:"li"},"name"),", which we have extracted from ",(0,o.kt)("inlineCode",{parentName:"li"},"route.params"),"."),(0,o.kt)("li",{parentName:"ul"},"This approach is dependent on the ",(0,o.kt)("inlineCode",{parentName:"li"},"navigation")," prop as well as the ",(0,o.kt)("inlineCode",{parentName:"li"},"name"),".")),(0,o.kt)("h4",{id:"use-effect-vs-use-layout-effect"},"Use Effect vs. Use Layout Effect"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"If we replace ",(0,o.kt)("inlineCode",{parentName:"li"},"useLayoutEffect")," with just ",(0,o.kt)("inlineCode",{parentName:"li"},"useEffect"),", the title update might show a noticeable delay, which is not the smoothest user experience."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"useLayoutEffect")," is the recommended option for immediate updates.")),(0,o.kt)("h4",{id:"choosing-between-the-two"},"Choosing Between the Two"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Use ",(0,o.kt)("inlineCode",{parentName:"li"},"Stack.Screen")," options when the title or navigation options are driven by Route parameters or are static."),(0,o.kt)("li",{parentName:"ul"},"Opt for ",(0,o.kt)("inlineCode",{parentName:"li"},"useLayoutEffect")," when the navigation options depend on the screen component's internal logic, state, or props or when they need to be updated post-render.")),(0,o.kt)("h3",{id:"-drawer-navigation"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Drawer Navigation"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Having learned about stack navigation, it's time to switch gears and explore another essential Navigator, which is the ",(0,o.kt)("inlineCode",{parentName:"li"},"drawer Navigator"),"."),(0,o.kt)("li",{parentName:"ul"},"Similar to how ",(0,o.kt)("inlineCode",{parentName:"li"},"stack Navigator")," stacks screens one over the other, ",(0,o.kt)("inlineCode",{parentName:"li"},"drawer Navigator")," introduces a hidden menu sliding from either side of the screen. It is particularly beneficial in apps with multiple main sections that require a neat and organized navigation structure.")),(0,o.kt)("h4",{id:"installation"},"Installation"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Let's understand better with code. First, we have to install the ",(0,o.kt)("inlineCode",{parentName:"li"},"drawer Navigator")," package in our project. I will follow the documentation for this installation to make it easier for you."),(0,o.kt)("li",{parentName:"ul"},"In the ",(0,o.kt)("inlineCode",{parentName:"li"},"react navigation docs")," under ",(0,o.kt)("inlineCode",{parentName:"li"},"Navigator"),", click on ",(0,o.kt)("inlineCode",{parentName:"li"},"drawer"),". Scroll down and copy the installation command."),(0,o.kt)("li",{parentName:"ul"},"Within the project, paste the command: ",(0,o.kt)("inlineCode",{parentName:"li"},"npm install @react-navigation/drawer"),".")),(0,o.kt)("h4",{id:"library-installation"},"Library Installation"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Next, you need to install and configure the libraries that are required by the ",(0,o.kt)("inlineCode",{parentName:"li"},"drawer Navigator"),". That would be ",(0,o.kt)("inlineCode",{parentName:"li"},"react native gesture Handler")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"react native reanimated"),"."),(0,o.kt)("li",{parentName:"ul"},"Copy the command and paste it in the terminal.")),(0,o.kt)("h4",{id:"code-separation"},"Code Separation"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Now rename ",(0,o.kt)("inlineCode",{parentName:"li"},"app.js")," to ",(0,o.kt)("inlineCode",{parentName:"li"},"app stack.js")," to separate the code from the previous tutorials."),(0,o.kt)("li",{parentName:"ul"},"Within the project folder, create a new file ",(0,o.kt)("inlineCode",{parentName:"li"},"app.js"),".")),(0,o.kt)("h4",{id:"importing-libraries"},"Importing Libraries"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Import ",(0,o.kt)("inlineCode",{parentName:"li"},"react native gesture Handler"),". Make sure it's at the top and there is nothing else before it."),(0,o.kt)("li",{parentName:"ul"},"Import ",(0,o.kt)("inlineCode",{parentName:"li"},"navigation container")," from ",(0,o.kt)("inlineCode",{parentName:"li"},"react navigation"),"."),(0,o.kt)("li",{parentName:"ul"},"Import ",(0,o.kt)("inlineCode",{parentName:"li"},"create drawer navigator")," from ",(0,o.kt)("inlineCode",{parentName:"li"},"react navigation drawer"),". Invoke it and create a ",(0,o.kt)("inlineCode",{parentName:"li"},"drawer navigation")," instance that we can work with.")),(0,o.kt)("h4",{id:"missing-step"},"Missing Step"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Now there is one step missing from the docs. If you browse the docs for the ",(0,o.kt)("inlineCode",{parentName:"li"},"reanimated")," package, you will come across this step two where we need to add the ",(0,o.kt)("inlineCode",{parentName:"li"},"babel")," plugin."),(0,o.kt)("li",{parentName:"ul"},"So, copy the plugins array and open ",(0,o.kt)("inlineCode",{parentName:"li"},"Babel")," configuration (",(0,o.kt)("inlineCode",{parentName:"li"},"babel.config.js"),") in the project. Paste it after presets and remove the three dots.")),(0,o.kt)("h4",{id:"clearing-cache"},"Clearing Cache"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"In step three, they also recommend we clear the cache before starting the app. Let's add this ",(0,o.kt)("inlineCode",{parentName:"li"},"-C")," option in ",(0,o.kt)("inlineCode",{parentName:"li"},"package.json")," to start the script."),(0,o.kt)("li",{parentName:"ul"},"So, ",(0,o.kt)("inlineCode",{parentName:"li"},"npm start -C"),".")),(0,o.kt)("h4",{id:"component-creation"},"Component Creation"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Our installation and setup step is now complete. Next, within ",(0,o.kt)("inlineCode",{parentName:"li"},"app.js"),", create a ",(0,o.kt)("inlineCode",{parentName:"li"},"react component")," and default export the same."),(0,o.kt)("li",{parentName:"ul"},"Add the ",(0,o.kt)("inlineCode",{parentName:"li"},"navigation container")," within the app component and inside ",(0,o.kt)("inlineCode",{parentName:"li"},"navigation container"),", invoke ",(0,o.kt)("inlineCode",{parentName:"li"},"drawer.Navigator"),".")),(0,o.kt)("h4",{id:"defining-screens"},"Defining Screens"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Define two screens in the ",(0,o.kt)("inlineCode",{parentName:"li"},"screens")," folder: create a ",(0,o.kt)("inlineCode",{parentName:"li"},"dashboard screen.js")," and a ",(0,o.kt)("inlineCode",{parentName:"li"},"settings screen.js"),"."),(0,o.kt)("li",{parentName:"ul"},"This component will render just a title.")),(0,o.kt)("h4",{id:"adding-screens"},"Adding Screens"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"In ",(0,o.kt)("inlineCode",{parentName:"li"},"app.js"),", on each ",(0,o.kt)("inlineCode",{parentName:"li"},"drawer screen")," component, we specify a ",(0,o.kt)("inlineCode",{parentName:"li"},"name")," prop, which is the label on our drawer."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"dashboard")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"settings"),". We will also add a ",(0,o.kt)("inlineCode",{parentName:"li"},"component")," prop to which we assign the individual screen, ",(0,o.kt)("inlineCode",{parentName:"li"},"dashboard screen")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"settings screen"),".")),(0,o.kt)("h4",{id:"restart-server"},"Restart Server"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"We can now restart our server: ",(0,o.kt)("inlineCode",{parentName:"li"},"npm start"),"."),(0,o.kt)("li",{parentName:"ul"},"Press ",(0,o.kt)("inlineCode",{parentName:"li"},"I")," to run the app on iOS simulator and ",(0,o.kt)("inlineCode",{parentName:"li"},"A")," to run on Android emulator."),(0,o.kt)("li",{parentName:"ul"},"If the app is still not working, press ",(0,o.kt)("inlineCode",{parentName:"li"},"R")," to restart the application on the devices.")),(0,o.kt)("h4",{id:"using-the-drawer"},"Using the Drawer"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"We can now see an icon to toggle the drawer; a swipe from the left edge also reveals our drawer."),(0,o.kt)("li",{parentName:"ul"},"From the drawer menu, we can navigate to the ",(0,o.kt)("inlineCode",{parentName:"li"},"dashboard")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"settings")," screen."),(0,o.kt)("li",{parentName:"ul"},"In each screen, the ",(0,o.kt)("inlineCode",{parentName:"li"},"name")," prop is displayed as the screen title: ",(0,o.kt)("inlineCode",{parentName:"li"},"settings")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"dashboard"),", which correspond to the ",(0,o.kt)("inlineCode",{parentName:"li"},"name")," prop.")),(0,o.kt)("h4",{id:"programmatic-navigation"},"Programmatic Navigation"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"It's also possible to toggle the drawer programmatically. In ",(0,o.kt)("inlineCode",{parentName:"li"},"dashboard screen"),", import ",(0,o.kt)("inlineCode",{parentName:"li"},"button")," component, destructure the ",(0,o.kt)("inlineCode",{parentName:"li"},"navigation")," prop, and add a button with title set to ",(0,o.kt)("inlineCode",{parentName:"li"},"toggle drawer"),"."),(0,o.kt)("li",{parentName:"ul"},"On press, we call ",(0,o.kt)("inlineCode",{parentName:"li"},"navigation.toggleDrawer"),".")),(0,o.kt)("h4",{id:"navigating-programmatically"},"Navigating Programmatically"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Along similar lines, you can use the ",(0,o.kt)("inlineCode",{parentName:"li"},"jump to")," method on the ",(0,o.kt)("inlineCode",{parentName:"li"},"navigation")," prop to navigate programmatically without the drawer UI."),(0,o.kt)("li",{parentName:"ul"},"Duplicate, change the title to ",(0,o.kt)("inlineCode",{parentName:"li"},"settings"),", and call the ",(0,o.kt)("inlineCode",{parentName:"li"},"jump to")," method passing in ",(0,o.kt)("inlineCode",{parentName:"li"},"settings"),"."),(0,o.kt)("li",{parentName:"ul"},"Click on ",(0,o.kt)("inlineCode",{parentName:"li"},"settings"),", and we are navigated to the settings screen, which is set as the active item in the drawer.")),(0,o.kt)("h4",{id:"conclusion-18"},"Conclusion"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The drawer navigation is pretty straightforward. In the next video, let's take a look at some of the options we can specify on the drawer Navigator."),(0,o.kt)("li",{parentName:"ul"},"Thank you for watching, and I'll see you in the next one.")),(0,o.kt)("h3",{id:"-drawer-navigation-options"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Drawer Navigation Options"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Now that we have set up a basic ",(0,o.kt)("inlineCode",{parentName:"li"},"drawer Navigator"),", let's quickly take a look at some options to customize its appearance."),(0,o.kt)("li",{parentName:"ul"},"We will specify the ",(0,o.kt)("inlineCode",{parentName:"li"},"options")," prop on the ",(0,o.kt)("inlineCode",{parentName:"li"},"dashboard screen"),".")),(0,o.kt)("h4",{id:"title-option"},"Title Option"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"The first option is ",(0,o.kt)("inlineCode",{parentName:"li"},"title"),". Let's assign the text ",(0,o.kt)("inlineCode",{parentName:"li"},"my dashboard"),"."),(0,o.kt)("li",{parentName:"ul"},"This gets rendered as the header title as well as the drawer label, which is ",(0,o.kt)("inlineCode",{parentName:"li"},"my dashboard"),"."),(0,o.kt)("li",{parentName:"ul"},"If you want a different drawer label, specify the ",(0,o.kt)("inlineCode",{parentName:"li"},"drawerLabel")," option and assign a value. Let's go with ",(0,o.kt)("inlineCode",{parentName:"li"},"dashboard label"),"."),(0,o.kt)("li",{parentName:"ul"},"You can see the header title is now different from the drawer label.")),(0,o.kt)("h4",{id:"custom-colors"},"Custom Colors"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Next, we can specify ",(0,o.kt)("inlineCode",{parentName:"li"},"drawer active tint color")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"drawer active background color"),". This affects the active item in the drawer.")),(0,o.kt)("h4",{id:"entire-drawer-color"},"Entire Drawer Color"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Finally, for the entire drawer color, we can specify ",(0,o.kt)("inlineCode",{parentName:"li"},"drawer content style")," and set ",(0,o.kt)("inlineCode",{parentName:"li"},"background color")," to ",(0,o.kt)("inlineCode",{parentName:"li"},"#C6CBEF"),". Don't forget the hash symbol."),(0,o.kt)("li",{parentName:"ul"},"Save the file, take a look at the device, and we can see the new color.")),(0,o.kt)("h4",{id:"further-customization"},"Further Customization"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Now, there are a few more options that you can use to customize the behavior of the drawer, but I would say they are often not necessary."),(0,o.kt)("li",{parentName:"ul"},"Please refer to the docs if you wish to further customize the drawer's appearance and behavior."),(0,o.kt)("li",{parentName:"ul"},"These five options are very helpful.")),(0,o.kt)("h4",{id:"conclusion-19"},"Conclusion"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Thank you for watching, and in the next video, let's take a look at tab navigation in React Native.")),(0,o.kt)("h3",{id:"-tab-navigation"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Tab Navigation"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Now that we have learned about stack and drawer navigations, let's learn about tab navigation in this video."),(0,o.kt)("li",{parentName:"ul"},"Tab navigation offers a way to switch between different screens by tapping on a tab, which is usually displayed at the bottom of the screen."),(0,o.kt)("li",{parentName:"ul"},"It's a common and intuitive navigation pattern found in many apps, providing a seamless user-friendly experience.")),(0,o.kt)("h4",{id:"installation-1"},"Installation"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"First, we have to install the ",(0,o.kt)("inlineCode",{parentName:"li"},"bottom tabs Navigator")," library in our project. I'll follow the documentation for this installation to make it easier for you."),(0,o.kt)("li",{parentName:"ul"},"Open the page on ",(0,o.kt)("inlineCode",{parentName:"li"},"bottom tabs")," under ",(0,o.kt)("inlineCode",{parentName:"li"},"Navigators")," and copy the installation command."),(0,o.kt)("li",{parentName:"ul"},"Run it in the terminal: ",(0,o.kt)("inlineCode",{parentName:"li"},"npm install @react-navigation/bottom-tabs"),".")),(0,o.kt)("h4",{id:"code-separation-1"},"Code Separation"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Now rename ",(0,o.kt)("inlineCode",{parentName:"li"},"app.js")," to ",(0,o.kt)("inlineCode",{parentName:"li"},"app draw.js")," to separate the code from the previous tutorials."),(0,o.kt)("li",{parentName:"ul"},"Within the project folder, create a new ",(0,o.kt)("inlineCode",{parentName:"li"},"app.js")," file.")),(0,o.kt)("h4",{id:"importing-libraries-1"},"Importing Libraries"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Import ",(0,o.kt)("inlineCode",{parentName:"li"},"navigation container")," from ",(0,o.kt)("inlineCode",{parentName:"li"},"react navigation"),"."),(0,o.kt)("li",{parentName:"ul"},"In the next line, import ",(0,o.kt)("inlineCode",{parentName:"li"},"create bottom tab Navigator")," function from ",(0,o.kt)("inlineCode",{parentName:"li"},"react navigation bottom tabs"),"."),(0,o.kt)("li",{parentName:"ul"},"Invoke the function and create a ",(0,o.kt)("inlineCode",{parentName:"li"},"tab Navigator")," instance.")),(0,o.kt)("h4",{id:"creating-components"},"Creating Components"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Next, create a ",(0,o.kt)("inlineCode",{parentName:"li"},"react component")," and default export the same."),(0,o.kt)("li",{parentName:"ul"},"Add the ",(0,o.kt)("inlineCode",{parentName:"li"},"navigation container")," within the app component and inside ",(0,o.kt)("inlineCode",{parentName:"li"},"navigation container"),", invoke ",(0,o.kt)("inlineCode",{parentName:"li"},"tab.Navigator"),"."),(0,o.kt)("li",{parentName:"ul"},"As children to ",(0,o.kt)("inlineCode",{parentName:"li"},"tab.Navigator"),", invoke ",(0,o.kt)("inlineCode",{parentName:"li"},"tab.Screen")," once for each screen you wish to include as a tab.")),(0,o.kt)("h4",{id:"defining-screens-1"},"Defining Screens"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Let's reuse the ",(0,o.kt)("inlineCode",{parentName:"li"},"settings screen")," from before and create two additional screens."),(0,o.kt)("li",{parentName:"ul"},"In the ",(0,o.kt)("inlineCode",{parentName:"li"},"screens")," folder, create a ",(0,o.kt)("inlineCode",{parentName:"li"},"profile screen.js")," and a ",(0,o.kt)("inlineCode",{parentName:"li"},"course list screen.js"),"."),(0,o.kt)("li",{parentName:"ul"},"Copy-paste the code from ",(0,o.kt)("inlineCode",{parentName:"li"},"settings screen")," and change the component name and the text that is rendered."),(0,o.kt)("li",{parentName:"ul"},"So, ",(0,o.kt)("inlineCode",{parentName:"li"},"profile")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"course list"),".")),(0,o.kt)("h4",{id:"configuring-tab-screens"},"Configuring Tab Screens"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Back in ",(0,o.kt)("inlineCode",{parentName:"li"},"app.js"),", on each ",(0,o.kt)("inlineCode",{parentName:"li"},"tab.Screen")," component, we specify a ",(0,o.kt)("inlineCode",{parentName:"li"},"name")," prop, which is the label on our tabs: ",(0,o.kt)("inlineCode",{parentName:"li"},"course list"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"profile"),", and ",(0,o.kt)("inlineCode",{parentName:"li"},"settings"),"."),(0,o.kt)("li",{parentName:"ul"},"We also assign a ",(0,o.kt)("inlineCode",{parentName:"li"},"component")," prop to which we assign the individual screens."),(0,o.kt)("li",{parentName:"ul"},"Make sure to import the component at the top. For example, ",(0,o.kt)("inlineCode",{parentName:"li"},"profile screen")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"settings screen"),".")),(0,o.kt)("h4",{id:"tab-navigation-in-action"},"Tab Navigation in Action"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"If we head back to the devices, we can see the tab navigation at the bottom."),(0,o.kt)("li",{parentName:"ul"},"We have three tabs: one for ",(0,o.kt)("inlineCode",{parentName:"li"},"course list"),", one for ",(0,o.kt)("inlineCode",{parentName:"li"},"profile"),", and one for ",(0,o.kt)("inlineCode",{parentName:"li"},"settings"),"."),(0,o.kt)("li",{parentName:"ul"},"The same in Android. The tabs allow for easy navigation to the respective screens."),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"name")," prop on ",(0,o.kt)("inlineCode",{parentName:"li"},"tab.Screen")," is displayed as the label, which you see at the bottom, as well as the title in the header.")),(0,o.kt)("h4",{id:"conclusion-20"},"Conclusion"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"As you can see, it is really simple to create a tabbed navigation in React Native."),(0,o.kt)("li",{parentName:"ul"},"In the next video, let's take a look at some options for the tab Navigator."),(0,o.kt)("li",{parentName:"ul"},"Thank you for watching, and I'll see you in the next one.")),(0,o.kt)("h3",{id:"-tab-navigation-options"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Tab Navigation Options"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Now that we have set up a basic tab Navigator, let's look at some of the options we can specify.")),(0,o.kt)("h4",{id:"screen-options"},"Screen Options"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Let's start with screen options on the ",(0,o.kt)("inlineCode",{parentName:"p"},"tab Navigator"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"First, we have ",(0,o.kt)("inlineCode",{parentName:"p"},"tab bar label position"),". By default, it is set to ",(0,o.kt)("inlineCode",{parentName:"p"},"below icon"),", which is what you see currently - label below the icon.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"We can change this to ",(0,o.kt)("inlineCode",{parentName:"p"},"beside icon"),", and the label is now to the right of the icon. Typically, ",(0,o.kt)("inlineCode",{parentName:"p"},"below icon")," is set for mobile devices, and ",(0,o.kt)("inlineCode",{parentName:"p"},"beside icon")," for iPad and tablets. Let's stick with ",(0,o.kt)("inlineCode",{parentName:"p"},"below icon")," as we are dealing with two mobile devices.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"The next option is ",(0,o.kt)("inlineCode",{parentName:"p"},"tab bar show label"),". This is set to ",(0,o.kt)("inlineCode",{parentName:"p"},"True")," by default. If we set it to ",(0,o.kt)("inlineCode",{parentName:"p"},"false"),", the tab label is hidden, and only the icon is displayed. We do want the label, so I will flip it back to ",(0,o.kt)("inlineCode",{parentName:"p"},"True"),".")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Next, we have ",(0,o.kt)("inlineCode",{parentName:"p"},"tab bar active tint color"),", which sets the active tab font color. Let's set it to ",(0,o.kt)("inlineCode",{parentName:"p"},"purple"),", and you can see the new purple color being reflected.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"There is also ",(0,o.kt)("inlineCode",{parentName:"p"},"tab bar inactive color")," (inactive tint color), which applies the color for inactive tabs. It is set to ",(0,o.kt)("inlineCode",{parentName:"p"},"gray")," by default, but you can go ahead and change it based on your theme."))),(0,o.kt)("h4",{id:"tab-screen-options"},"Tab Screen Options"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"By default, the ",(0,o.kt)("inlineCode",{parentName:"p"},"Tab screen name")," is rendered as the ",(0,o.kt)("inlineCode",{parentName:"p"},"tab bar label"),". You can change that using the ",(0,o.kt)("inlineCode",{parentName:"p"},"tab bar label")," option on the ",(0,o.kt)("inlineCode",{parentName:"p"},"profile tab.screen")," component. Let's specify ",(0,o.kt)("inlineCode",{parentName:"p"},"options"),", which is an object, and we set ",(0,o.kt)("inlineCode",{parentName:"p"},"tab bar label")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"my profile"),". If we head back to the devices, we can see the updated tab bar label. The header title, though, remains the same as the ",(0,o.kt)("inlineCode",{parentName:"p"},"name")," prop.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Next, you would want to customize the icon in the tab. The easiest way to add icons is using Expo icons. Import ",(0,o.kt)("inlineCode",{parentName:"p"},"ion icons")," from ",(0,o.kt)("inlineCode",{parentName:"p"},"@Expo/Vector icons"),". As an option, specify the ",(0,o.kt)("inlineCode",{parentName:"p"},"tab bar icon")," option. This is going to return ",(0,o.kt)("inlineCode",{parentName:"p"},"ion icons")," with ",(0,o.kt)("inlineCode",{parentName:"p"},"name")," equal to ",(0,o.kt)("inlineCode",{parentName:"p"},"person"),", which is one of the icons present, and ",(0,o.kt)("inlineCode",{parentName:"p"},"size")," equal to ",(0,o.kt)("inlineCode",{parentName:"p"},"20"),". Take a look at the devices, and we see the ",(0,o.kt)("inlineCode",{parentName:"p"},"person")," icon being rendered for the ",(0,o.kt)("inlineCode",{parentName:"p"},"profile")," tab.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"To ensure the icon picks up on the active and inactive tint color, you can destructure a ",(0,o.kt)("inlineCode",{parentName:"p"},"color")," prop and assign it to the ",(0,o.kt)("inlineCode",{parentName:"p"},"color")," prop on ",(0,o.kt)("inlineCode",{parentName:"p"},"ION icons"),". So, ",(0,o.kt)("inlineCode",{parentName:"p"},"color")," is equal to ",(0,o.kt)("inlineCode",{parentName:"p"},"color"),", and you can see the icon is now purple or gray instead of black.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Finally, you can specify ",(0,o.kt)("inlineCode",{parentName:"p"},"tab bar badge")," to add a badge to the icon. This is particularly useful if you have a notifications tab or an inbox tab that requires the user's attention to items on the screen."))),(0,o.kt)("h4",{id:"additional-options"},"Additional Options"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Apart from these basic options, you have a few more which may come in handy depending on your requirements. It is also possible to define a completely custom ",(0,o.kt)("inlineCode",{parentName:"li"},"tab bar component")," and pass it into ",(0,o.kt)("inlineCode",{parentName:"li"},"react navigation"),". Unless you have a lot of time to work on that, I would recommend you stick to the default bottom tab that ",(0,o.kt)("inlineCode",{parentName:"li"},"react navigation")," offers.")),(0,o.kt)("h4",{id:"conclusion-21"},"Conclusion"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Now that we have seen the three different types of Navigators in react native, in the next video, let's learn how to Nest Navigators."),(0,o.kt)("li",{parentName:"ul"},"Thank you for watching. Please do consider subscribing to the channel, and I'll see you in the next one.")),(0,o.kt)("h3",{id:"-nesting-navigators"},(0,o.kt)("strong",{parentName:"h3"},"=>")," Nesting Navigators"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"For the final video in this section on react native navigation, let's learn how to Nest Navigators."),(0,o.kt)("li",{parentName:"ul"},"Nesting Navigators allows us to combine the powers of different types of Navigators, creating a seamless and organized user experience."),(0,o.kt)("li",{parentName:"ul"},"It's like having a main road with smaller branching lanes, each having its own set of rules yet interconnected.")),(0,o.kt)("h4",{id:"nesting-example"},"Nesting Example"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Let's dive into code and explore how to Nest Navigators in our react native app."),(0,o.kt)("li",{parentName:"ul"},"For our example, we will Nest a stack Navigator within a tab Navigator. We're going to reuse the Navigators we have already created.")),(0,o.kt)("h4",{id:"modifying-appjs"},"Modifying app.js"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Let's begin by making a small change in ",(0,o.kt)("inlineCode",{parentName:"li"},"app.js"),", which contains our stack Navigator."),(0,o.kt)("li",{parentName:"ul"},"Create and export a constant called ",(0,o.kt)("inlineCode",{parentName:"li"},"about stack")," which returns the stack Navigator."),(0,o.kt)("li",{parentName:"ul"},"So, from the function ",(0,o.kt)("inlineCode",{parentName:"li"},"app"),", cut ",(0,o.kt)("inlineCode",{parentName:"li"},"stack Navigator")," and return it from ",(0,o.kt)("inlineCode",{parentName:"li"},"about stack"),"."),(0,o.kt)("li",{parentName:"ul"},"Invoke ",(0,o.kt)("inlineCode",{parentName:"li"},"about stack")," within ",(0,o.kt)("inlineCode",{parentName:"li"},"navigation container")," to not break any code we have written before.")),(0,o.kt)("h4",{id:"creating-a-new-tab-screen"},"Creating a New Tab Screen"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"For this video, we will only be using ",(0,o.kt)("inlineCode",{parentName:"li"},"about stack"),"."),(0,o.kt)("li",{parentName:"ul"},"Back in ",(0,o.kt)("inlineCode",{parentName:"li"},"app.js"),", where our tab Navigator is present, create a new ",(0,o.kt)("inlineCode",{parentName:"li"},"tab screen"),". The name will read ",(0,o.kt)("inlineCode",{parentName:"li"},"about stack"),", and ",(0,o.kt)("inlineCode",{parentName:"li"},"component")," will be equal to the new ",(0,o.kt)("inlineCode",{parentName:"li"},"about stack")," component we've exported from ",(0,o.kt)("inlineCode",{parentName:"li"},"app stack.js"),"."),(0,o.kt)("li",{parentName:"ul"},"Make sure to import the component at the top.")),(0,o.kt)("h4",{id:"nested-navigation"},"Nested Navigation"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"That is pretty much it. We have nested ",(0,o.kt)("inlineCode",{parentName:"li"},"about stack"),", which is a stack Navigator, within our tab Navigator."),(0,o.kt)("li",{parentName:"ul"},"If we head back to the devices, we should now see a fourth tab called ",(0,o.kt)("inlineCode",{parentName:"li"},"about stack"),". Clicking on the tab will present the home screen, which is part of the ",(0,o.kt)("inlineCode",{parentName:"li"},"about stack Navigator"),". We can navigate to the ",(0,o.kt)("inlineCode",{parentName:"li"},"about screen")," from here.")),(0,o.kt)("h4",{id:"handling-headers"},"Handling Headers"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"We do, however, have two headers, one from each of the Navigators. Ideally, you would want the stack Navigator to control the heading. In this scenario, to hide the tab Navigator heading on ",(0,o.kt)("inlineCode",{parentName:"li"},"tab screen"),", specify ",(0,o.kt)("inlineCode",{parentName:"li"},"options"),", which is an object."),(0,o.kt)("li",{parentName:"ul"},"Set ",(0,o.kt)("inlineCode",{parentName:"li"},"headerShown")," to ",(0,o.kt)("inlineCode",{parentName:"li"},"false"),".")),(0,o.kt)("h4",{id:"conclusion-22"},"Conclusion"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"If we head back to the devices, we now have only one header from the stack Navigator. This is how you Nest Navigators with react navigation."),(0,o.kt)("li",{parentName:"ul"},"Ideally, you should try to achieve the behavior you want with as little nesting as possible. Not only the code but also the UX will be confusing with many levels of nesting."),(0,o.kt)("li",{parentName:"ul"},"With that, we come to the end of this section on navigation in react native. We've learned about react navigation, which is a go-to package for navigation in react native. We've learned about the three different types of Navigators, namely stack, drawer, and tab."),(0,o.kt)("li",{parentName:"ul"},"We've also seen how to navigate to different screens with each of them and customize the look and feel as well."),(0,o.kt)("li",{parentName:"ul"},"Thank you for watching. Please do leave a like if you're enjoying the content, and I'll see you in the next one.")))}u.isMDXComponent=!0}}]);